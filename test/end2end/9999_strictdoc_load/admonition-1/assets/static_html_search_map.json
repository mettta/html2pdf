{"1":{"MID":"75a595ff028741d0bf9067bba8fb787a","TITLE":"Introduction","_LINK":"1-Introduction"},"2":{"MID":"27023bf63c414fd998437961c77a0e2e","STATEMENT":"StrictDoc is software for technical documentation and requirements management.\n\nSummary of StrictDoc features:\n\n- The documentation files are stored as human-readable text files.\n- A simple domain-specific language DSL is used for writing the documents. The\n  text format for encoding this language is called SDoc (strict-doc).\n- StrictDoc reads \\*.sdoc files and builds an in-memory representation of a\n  document tree.\n- From this in-memory representation, StrictDoc can generate the documentation\n  into a number of formats including HTML, RST, ReqIF, PDF, JSON, Excel.\n- StrictDoc has a web-based user interface which allows viewing and editing the documents and requirements. The changes are written back to .sdoc files.\n- The focus of the tool is modeling requirements and specifications documents.\n  Such documents consist of multiple statements like \"system X shall do Y\"\n  called requirements.\n- The requirements can be linked together to form the relationships, such as\n  \"parent-child\". From these connections, many useful features, such as\n  `Requirements Traceability <https://en.wikipedia.org/wiki/Requirements_traceability>`_\n  and Documentation Coverage, can be derived.\n- Requirements to source files traceability (experimental). See\n  [LINK: SECTION-TRACEABILITY-REQS-TO-SOURCE-CODE].\n- Document grammar and custom fields support. The StrictDoc's grammar can be\n  extended to support arbitrary special fields, such as \"PRIORITY\", \"OWNER\",\n  or even more specialized fields, such as\n  \"Automotive Safety Integrity Level (ASIL)\" or \"Verification method\".\n  See [LINK: SECTION-UG-DOCUMENT-GRAMMAR].\n- Good performance of the `textX <https://github.com/textX/textX>`_\n  parser and parallelized incremental generation of documents: generation of\n  document trees with up to 2000–3000 requirements into HTML pages stays within\n  a few seconds. From the second run, only changed documents are regenerated.\n  Further performance tuning should be possible.\n\nSee also a summary of StrictDoc's existing limitations: [LINK: SDOC_UG_LIMIT].\n","_LINK":"27023bf63c414fd998437961c77a0e2e"},"3":{"MID":"bcd0cf7c13cf4cf2ab176455aedc0c90","UID":"SDOC_UG_CONTACT","TITLE":"Contact the developers","_LINK":"SDOC_UG_CONTACT"},"4":{"MID":"3ae6491057674be1abf057b7e0d9bf21","STATEMENT":"Join the StrictDoc mailing list on groups.io: https://groups.io/g/strictdoc. As of Q1 2025, this is the primary channel for general discussions and announcements about StrictDoc, uniting three previously separate communities: email, GitHub, and Discord.\n\nFor more interactive discussions, join us in Discord. Here is the invitation link: https://discord.gg/4BAAME9MmG.\n\nThe developers can be also contacted via email: Stanislav Pankevich `s.pankevich@gmail.com <s.pankevich@gmail.com>`_ and Maryna Balioura `mettta@gmail.com <mettta@gmail.com>`_.\n\nSee also [LINK: SDOC_FAQ] for common topics and [LINK: SDOC_TROUBLESHOOTING] for troubleshooting the most common issues.\n","_LINK":"3ae6491057674be1abf057b7e0d9bf21"},"5":{"MID":"8e4ede8cdc70402b91a59026d31a7020","TITLE":"StrictDoc office hours","_LINK":"1.1.1-StrictDoc-office-hours"},"6":{"MID":"c46def916b6f4df692c95f47414feebb","STATEMENT":"The StrictDoc team hosts a weekly 1-hour office hours meeting.\n\nStrictDoc Office Hours provide an open space for users and contributors to connect with the core team. Spontaneous participation is highly encouraged – feel free to join at any time with questions, ideas, or feedback. By default, these slots are used for StrictDoc development unless a specific topic is agreed upon in advance.\n\nThe goal is to balance core development priorities with community-driven input. While the team follows a focused roadmap, these sessions create space for discussing feature requests, improvements, and other topics that matter most to users – especially active contributors. Agenda updates will be posted in the calendar when applicable.\n\nHere is a `public Google calendar <https://calendar.google.com/calendar/embed?src=9e52bdb79398efa1c138c5938a54d48918b2858a9564f7326477879ec27c34b3%40group.calendar.google.com&ctz=Europe%2FBerlin>`_ to subscribe to.\n\nWhen adding the calendar, it's recommended to enable notifications for new and updated events. This ensures you'll be informed if an event's agenda is updated with announcements or if the event is canceled.\n","_LINK":"c46def916b6f4df692c95f47414feebb"},"7":{"MID":"e0a00ca3085f444187050ce9576aa31b","TITLE":"Examples","_LINK":"2-Examples"},"8":{"MID":"2122186075e8455181178b01331101fa","UID":"SDOC_UG_HELLO_WORLD","TITLE":"Hello World","_LINK":"SDOC_UG_HELLO_WORLD"},"9":{"MID":"ffbdb80fb21d48adbaeffb782d7994a2","STATEMENT":"\"Hello World\" example of the SDoc text language:\n\n.. code-block:: text\n\n    [DOCUMENT]\n    TITLE: StrictDoc\n\n    [REQUIREMENT]\n    UID: SDOC-HIGH-REQS-MANAGEMENT\n    TITLE: Requirements management\n    STATEMENT: StrictDoc shall enable requirements management.\n\nCreate a file called ``hello_world.sdoc`` somewhere on your file system and copy the above \"Hello World\" example text to it. **The file must end with a newline character**.\n\nOpen a command-line terminal program supported on your system.\n\nOnce you have ``strictdoc`` installed (see [LINK: SDOC_UG_GETTING_STARTED] below), switch to the directory with the ``hello_world.sdoc`` file. For example, assuming that the file is now in the ``workspace/hello_world`` directory in your user folder:\n\n.. code-block:: text\n\n    cd <your user home directory>/workspace/hello_world\n\nRun StrictDoc as follows:\n\n.. code-block:: text\n\n    strictdoc export .\n\nThe expected output:\n\n.. code-block:: text\n\n    $ strictdoc export hello.sdoc\n    Parallelization: Enabled\n    Step 'Collect traceability information' start\n    Step 'Find and read SDoc files' start\n    Reading SDOC: hello.sdoc .................................... 0.08s\n    Step 'Find and read SDoc files' took: 0.09 sec\n    Step 'Collect traceability information' start\n    Step 'Collect traceability information' took: 0.01 sec\n    Step 'Collect traceability information' took: 0.11 sec\n    Published: StrictDoc ........................................ 0.24s\n    ...\n    Export completed. Documentation tree can be found at:\n    .../output/html\n\nThe HTML output produced so far has been generated statically. Now, start a StrictDoc server from the same directory:\n\n.. code-block:: bash\n\n    strictdoc server .\n\nThe expected output should contain the following line:\n\n.. code-block:: text\n\n    INFO:     Uvicorn running on http://127.0.0.1:5111 (Press CTRL+C to quit)\n\nOpen the URL in the browser and explore the contents of the example.\n","_LINK":"ffbdb80fb21d48adbaeffb782d7994a2"},"10":{"MID":"83369fc77d584407b530b179a449479b","TITLE":"StrictDoc Examples repository","_LINK":"2.2-StrictDoc-Examples-repository"},"11":{"MID":"d6bde8e4055b42138d216b48692c8f26","STATEMENT":"The `strictdoc-examples <https://github.com/strictdoc-project/strictdoc-examples>`_ repository contains a collection of basic examples. Visit the repository and read its README for details.\n","_LINK":"d6bde8e4055b42138d216b48692c8f26"},"12":{"MID":"0a736f05ab154b2599988b63201d4f10","TITLE":"StrictDoc Templates repository","_LINK":"2.3-StrictDoc-Templates-repository"},"13":{"MID":"47c2088447d7452ba28962ee220ba63a","STATEMENT":"The `strictdoc-templates <https://github.com/strictdoc-project/strictdoc-templates>`_ repository contains a growing collection of templates from the industry standards like DO-178C (aviation) and ECSS-E-ST-40C (space).\n","_LINK":"47c2088447d7452ba28962ee220ba63a"},"14":{"MID":"2b2e39c48cc740e5b8452d76881f667d","TITLE":"Other examples","_LINK":"2.4-Other-examples"},"15":{"MID":"2eaa8bfe5a354fcbb704ea7fd94f3a0a","STATEMENT":"For a more comprehensive example, check the source file of this documentation\nwhich is written using StrictDoc:\n`strictdoc_01_user_guide.sdoc <https://github.com/strictdoc-project/strictdoc/blob/main/docs/strictdoc_01_user_guide.sdoc>`_.\n\n- `StrictDoc HTML export (this website) <https://strictdoc.readthedocs.io/en/latest/>`_\n- `StrictDoc HTML export using Sphinx <https://strictdoc.readthedocs.io/en/latest/sphinx/>`_\n- `StrictDoc PDF export using Sphinx <https://strictdoc.readthedocs.io/_/downloads/en/latest/pdf/>`_\n","_LINK":"2eaa8bfe5a354fcbb704ea7fd94f3a0a"},"16":{"MID":"821b818006a14ed7aeb025d9ac8fe8b6","UID":"SDOC_UG_GETTING_STARTED","TITLE":"Installing StrictDoc","_LINK":"SDOC_UG_GETTING_STARTED"},"17":{"MID":"4e9f094a7b2949edb23c817c5e2276e4","TITLE":"Requirements","_LINK":"3.1-Requirements"},"18":{"MID":"e7e4c2982d8e49deaa9b7413a09a4efa","STATEMENT":"- Python 3.9+\n- macOS, Linux or Windows\n- Command-line terminal program\n\nDepending on an operating system, a terminal program can be, for example:\n\n- ``Terminal`` or ``iTerm2`` on macOS\n- ``Gnome Terminal`` or ``konsole`` on Linux\n- ``Terminal`` or ``PowerShell`` on Windows.\n\nA terminal program is required to input all the commands outlined in this user guide.\n","_LINK":"e7e4c2982d8e49deaa9b7413a09a4efa"},"19":{"MID":"914da2bf10364a6fbd9fc7f48b96c6e5","TITLE":"Installing StrictDoc as a Pip package (recommended way)","_LINK":"3.2-Installing-StrictDoc-as-a-Pip-package-recommended-way"},"20":{"MID":"872a60c673854cfd909787f2379d88c7","STATEMENT":".. code-block:: text\n\n    pip install strictdoc\n","_LINK":"872a60c673854cfd909787f2379d88c7"},"21":{"MID":"b3e2c50e2d7e46acbce7ea0c646776ca","TITLE":"Installing \"nightly\" StrictDoc as a Pip package","_LINK":"3.3-Installing-nightly-StrictDoc-as-a-Pip-package"},"22":{"MID":"867f22a2767a434586d1ee4f7ee161fb","STATEMENT":"Sometimes, it takes a while before the latest features and fixes reach the stable Pip release. In that case, installing a Pip package from the Git repository directly is possible:\n\n.. code-block::\n\n    pip install -U --pre git+https://github.com/strictdoc-project/strictdoc.git@main\n","_LINK":"867f22a2767a434586d1ee4f7ee161fb"},"23":{"MID":"9e95ac9422f44aae92c0615176153815","TITLE":"Installing StrictDoc into a Docker container","_LINK":"3.4-Installing-StrictDoc-into-a-Docker-container"},"24":{"MID":"32e04944c2a14ead93248ff1ea37a68d","STATEMENT":"StrictDoc can be installed with a dedicated Docker image.\n\nTo build the image:\n\n.. code-block:: text\n\n    docker build . \\\n        --build-arg STRICTDOC_SOURCE=pypi \\\n        -t strictdoc:latest\n\nThe ``STRICTDOC_SOURCE`` argument is optional (default value is ``pypi``) and can be used to specify which Git revision the container shall check out when installing StrictDoc with ``pip install``. Possible values: a branch name, e.g., ``main``, or a commit hash.\n\nTo run the container:\n\n.. code-block:: text\n\n    docker run \\\n        --name strictdoc \\\n        --rm \\\n        -e HOST_UID=$(id -u) \\\n        -e HOST_GID=$(id -g) \\\n        -v \"$(pwd):/data\" \\\n        -i -t \\\n        strictdoc:latest \\\n        /bin/bash -c \"strictdoc export --formats=html\"\n\n.. list-table:: ``docker run`` options breakdown\n   :widths: 40 60\n   :header-rows: 1\n\n   * - **Option**\n     - **Description**\n\n   * - ``--rm``\n     - Remove container when it is exited.\n\n   * - ``HOST_UID`` and ``HOST_GID``\n     - These environment variables are used to tell the container that it should create a ``strictdoc`` user that has these values. This enables the content generated by the container to be visible outside the container under the permissions of the host user.\n\n   * - ``-v \"<folder on host>:/data\"``\n     - Normally the folder on the host should be the folder with the StrictDoc documentation. The ``/data`` folder must always be specified without change because that's where the Docker container is designed to operate.\n\n   * - ``/bin/bash -c \"...\"``\n     - This command shall typically be ``strictdoc export`` but it can also be skipped in which case the ``docker run`` will enter the container with SSH.\n\nIf entering the container manually, the ``strictdoc`` command can be run as follows:\n\n.. code-block:: text\n\n    bash-5.1# strictdoc export .\n    bash-5.1# exit\n\nThe documentation shall be generated to ``./output/html`` which is accessible both on the host and inside the container.\n","_LINK":"32e04944c2a14ead93248ff1ea37a68d"},"25":{"MID":"e441594df15841d38f717194b722f3de","TITLE":"Installing StrictDoc as a Snap package (not maintained)","_LINK":"3.5-Installing-StrictDoc-as-a-Snap-package-not-maintained"},"26":{"MID":"2adfe1bc6be542c3885ca4ea80b8d6e1","STATEMENT":"This way of installing StrictDoc is not maintained anymore. If you want to\nuse it, refer to the instructions located in ``developer/snap/README.md``.\n","_LINK":"2adfe1bc6be542c3885ca4ea80b8d6e1"},"27":{"MID":"4af1193170a7416d81a799344dfc8ed6","TITLE":"Installing StrictDoc with Nix","_LINK":"3.6-Installing-StrictDoc-with-Nix"},"28":{"MID":"2045b5e37fc34a83b7457c43d816bf2c","STATEMENT":"StrictDoc is `packaged in nixpkgs <https://search.nixos.org/packages?query=strictdoc>`_ as ``strictdoc``.\n\nYou can try it without installing with ``nix-shell``:\n\n.. code-block:: bash\n\n    nix-shell -p strictdoc\n\nor ``nix run``:\n\n.. code-block:: bash\n\n    nix run nixpkgs#strictdoc\n\nOr you can add it to your system's packages with:\n\n.. code-block:: nix\n\n  environment.systemPackages = [\n    pkgs.strictdoc\n  ];\n","_LINK":"2045b5e37fc34a83b7457c43d816bf2c"},"29":{"MID":"6cc72bf1a2a94999954e148a6bef374c","TITLE":"Running StrictDoc","_LINK":"4-Running-StrictDoc"},"30":{"MID":"1685e4d63d9746b784b4a55f17b0de30","UID":"SECTION-UG-Static-HTML-export","TITLE":"Static HTML export","_LINK":"SECTION-UG-Static-HTML-export"},"31":{"MID":"c092847abfa04295b63f943c951f24c8","STATEMENT":"The easiest way to see the static HTML export feature in action is to run the [LINK: SDOC_UG_HELLO_WORLD] example.\n\nThe ``export`` command is the main producer of documentation. The native export format of StrictDoc is HTML. The ``export`` command supports a number of parameters, including the option for selecting export formats (HTML, RST, Excel, etc.). The options can be explored with the ``--help`` command.\n\n.. code-block:: bash\n\n    strictdoc export --help\n","_LINK":"c092847abfa04295b63f943c951f24c8"},"32":{"MID":"1a059d3ae7da45f8b53f3d74f3580980","UID":"SECTION-UG-Web-server","TITLE":"Web server","_LINK":"SECTION-UG-Web-server"},"33":{"MID":"1fc9f6f4f84d47439bf6aa3404227ca4","STATEMENT":"StrictDoc supports a web-based user interface. The StrictDoc web server is launched via the ``server`` command which accepts a path to a documentation tree as a parameter.\n\n.. code-block:: bash\n\n    strictdoc server .\n\nThe ``server`` command accepts a number of options. To explore the options, run:\n\n.. code-block:: bash\n\n    strictdoc server --help\n\nStrictDoc uses ``127.0.0.1`` as a default host and ``5111`` as a default port. When running within Docker, the host argument ``--host`` can be specified, for example, ``--host 0.0.0.0`` or a more specific host or IP address. The host and port can be also configured in a TOML config file, see [LINK: SECTION-UG-Host-and-port].\n\n.. note::\n\n    The implementation of the web interface is work-in-progress.\n    See [LINK: SDOC_UG_LIMIT_WEB] for an overview of the existing limitations.\n","_LINK":"1fc9f6f4f84d47439bf6aa3404227ca4"},"34":{"MID":"9f7fcbdd8e564af8986349deb09745a5","TITLE":"Security considerations","_LINK":"4.3-Security-considerations"},"35":{"MID":"4fa89608f70e4a84a0e4b2930da28bbe","STATEMENT":".. warning::\n    **TL;DR**: StrictDoc's web server is not yet hardened against unsafe use. Making StrictDoc safe for deployment in public networks is an ongoing effort.\n\n    Using StrictDoc's command-line and web interfaces should be more secure if the web server is not deployed on a public network.\n\nDue to current constraints (refer to [LINK: SDOC_UG_LIMIT_WEB]), StrictDoc requires running a server through a command line interface in one window or OS process, and separately committing changes to documents using Git in another window or OS process. Deploying StrictDoc as a shared web server is impractical, as it still requires manual commits to SDoc files via the server's command line using Git. The future development plan for StrictDoc aims to enable its use as a standalone server application, which includes resolving the following security-related issues.\n\nWhat makes StrictDoc's web server unsafe:\n\n- The web interface is not fully hardened against unsafe inputs, such as malformed strings or files. The web server does not perform comprehensive sanity checks on the size and validity of inputs across all its HTTP endpoints.\n- StrictDoc uses the `pickle <https://docs.python.org/3/library/pickle.html>`_ module to cache SDoc files, significantly improving performance. However, the pickle module is not secure. The pickled files are currently stored in the /tmp folder, which poses risks under certain circumstances.\n- The security-related properties of the textX/Arpeggio parser are not understood yet. We have opened a request to track this upstream: `textX -  Security considerations (#422) <https://github.com/textX/textX/discussions/422>`_.\n- Several uses of regular expressions may be unsafe, some of which have been identified by GitHub's CodeQL analyzer.\n- The security aspects of StrictDoc's dependencies have not yet been analyzed.\n\nKnown security-related issues are tracked on GitHub, under the `\"Security\" label <https://github.com/strictdoc-project/strictdoc/issues?q=is%3Aissue+is%3Aopen+security+label%3ASecurity>`_. As StrictDoc becomes usable without command-line access, all known issues will need to be addressed or acknowledged as known limitations.\n\nWe are committed to continuously enhancing the functionality and security of StrictDoc and welcome user feedback and contributions in this area.\n","_LINK":"4fa89608f70e4a84a0e4b2930da28bbe"},"36":{"MID":"6d489d82b2e24bfeb2919be24262468f","UID":"SDOC_UG_IDE_SUPPORT","TITLE":"IDE support","_LINK":"SDOC_UG_IDE_SUPPORT"},"37":{"MID":"aad57726976f4882982458de90d168c7","STATEMENT":"StrictDoc language markup (SDoc) can be activated in all IDEs that support the\nTextMate grammars. When the StrictDoc grammar is integrated into an IDE, the\nSDoc syntax becomes highlighted just as any other syntax like Markdown, RST,\nPython, etc.\n\nThe TextMate grammars can be defined in either JSON or PLIST formats.\nThe `Sublime Text's Syntax <https://www.sublimetext.com/docs/syntax.html>`_ is\nsimilar to the TextMate grammar but has more capabilities and is no longer\nbackward-compatible with both TextMate's JSON and PLIST grammars.\n\nThe following IDEs are known to work:\n\n- Microsoft Visual Studio Code (TextMate JSON)\n- JetBrains's PyCharm and WebStorm (TextMate JSON). The other `JetBrains IDEs <https://www.jetbrains.com/products/>`_ are expected to work too.\n- Eclipse (TextMate JSON)\n- Sublime Text (Sublime Syntax)\n- Neovim (Tree-sitter grammar)\n\nDue to the incompatibilities between these formats, the markup files are provided in separate repositories:\n\n- `strictdoc-project/strictdoc.tmLanguage <https://github.com/strictdoc-project/strictdoc.tmLanguage>`_ – TextMate grammar files for StrictDoc (JSON).\n- `strictdoc-project/strictdoc.tmbundle <https://github.com/strictdoc-project/strictdoc.tmbundle>`_ – TextMate grammar files for StrictDoc (PLIST).\n- `strictdoc-project/strictdoc.sublime-syntax <https://github.com/strictdoc-project/strictdoc.sublime-syntax>`_ –  StrictDoc markup syntax highlighting in Sublime Text.\n- `manueldiagostino/tree-sitter-strictdoc <https://github.com/manueldiagostino/tree-sitter-strictdoc>`_ – StrictDoc Tree‑sitter parser for Neovim.\n\nThe instructions for installing the StrictDoc markup can be found in all repositories.\n\nFor any other IDE, when possible, it is recommended to use the TextMate JSON\nformat, unless a given IDE is known to only support the TextMate bundle format\n(``.tmbundle``). The exception is Sublime Text which has its own format.\n\n.. note::\n\n    The TextMate grammar and the Sublime Syntax for StrictDoc only provides syntax highlighting.\n    More advanced features like autocompletion and deep validation of requirements can be only achieved with a dedicated Language Server Protocol (LSP) implementation for StrictDoc.\n    The StrictDoc LSP is on StrictDoc's long-term roadmap, see\n    `Enhancement: Language Protocol Server for SDoc text language #577\n    <https://github.com/strictdoc-project/strictdoc/issues/577>`_.\n","_LINK":"aad57726976f4882982458de90d168c7"},"38":{"MID":"24fb3436fa8c4b36929183eaac269376","UID":"SECTION-UG-SDoc-syntax","TITLE":"SDoc syntax","_LINK":"SECTION-UG-SDoc-syntax"},"39":{"MID":"556a4f61a4884f3088a743a0717f397f","STATEMENT":"StrictDoc defines a special syntax for writing specifications documents. This\nsyntax is called SDoc and it's grammar is encoded with the\n`textX <https://github.com/textX/textX>`_\ntool.\n\nThe grammar is defined using textX language for defining grammars and is\nlocated in a single file:\n`grammar.py <https://github.com/strictdoc-project/strictdoc/blob/main/strictdoc/backend/sdoc/grammar/grammar.py>`_.\n\nThis is how a minimal possible SDoc document looks like:\n\n.. code-block:: text\n\n    [DOCUMENT]\n    TITLE: StrictDoc\n\nThis documentation is written using StrictDoc. Here is the source file:\n`strictdoc_01_user_guide.sdoc <https://github.com/strictdoc-project/strictdoc/blob/main/docs/strictdoc_01_user_guide.sdoc>`_.\n","_LINK":"556a4f61a4884f3088a743a0717f397f"},"40":{"MID":"43c9624d3c97433a97f8e8f39e2dd784","TITLE":"Document structure","_LINK":"6.1-Document-structure"},"41":{"MID":"5419c0c9bfcc4922ac5aa79ddb333188","STATEMENT":"An SDoc document consists of a ``[DOCUMENT]`` declaration followed by a sequence of **leaf nodes** or **composite nodes**.\n\nA **leaf node** cannot contain any child nodes. It is simply a node with text fields. The default leaf nodes are defined as ``[TEXT]`` or ``[REQUIREMENT]``. Any other ``[...]`` custom leaf node can be registered by a user in a document grammar as described below in [LINK: SECTION-UG-DOCUMENT-GRAMMAR].\n\nExample of a leaf node:\n\n.. code-block:: text\n\n    [REQUIREMENT]\n    STATEMENT: StrictDoc shall be based on a document model.\n\nA **composite node** can contain other composite or leaf nodes. The default composite node is ``[[SECTION]]`` which models a section/chapter in a document. Any other ``[[...]]`` composite node can be registered by a user in a document grammar.\n\nExample of a composite node:\n\n.. code-block:: text\n\n    [[SECTION]]\n    TITLE: Document model\n\n    [REQUIREMENT]\n    STATEMENT: StrictDoc shall be based on a document model.\n\n    [[/SECTION]]\n\nThe document elements are described further below in [LINK: SECTION-UG-DOCUMENT-ELEMENTS].\n","_LINK":"5419c0c9bfcc4922ac5aa79ddb333188"},"42":{"MID":"b4ceeb12bdf1448cb97b7974d4980189","UID":"SECTION-UG-DOCUMENT-ELEMENTS","TITLE":"Document elements","_LINK":"SECTION-UG-DOCUMENT-ELEMENTS"},"43":{"MID":"db088d5977934056a851a24988e9266c","UID":"SECTION-UG-Document","TITLE":"DOCUMENT","_LINK":"SECTION-UG-Document"},"44":{"MID":"4b5c6f6fd70e44be8e5be10a38427e77","STATEMENT":"The ``[DOCUMENT]`` element must always be present in an SDoc document. It is a\nroot of an SDoc document graph.\n\n.. code-block:: text\n\n    [DOCUMENT]\n    TITLE: StrictDoc\n    (newline)\n\nThe following ``DOCUMENT`` fields are allowed:\n\n.. list-table:: SDoc grammar ``DOCUMENT`` fields\n   :widths: 20 80\n   :header-rows: 1\n\n   * - **Field**\n     - **Description**\n\n   * - ``TITLE``\n     - Title of the document (mandatory)\n\n   * - ``UID``\n     - Unique identifier of the document\n\n   * - ``VERSION``\n     - Current version of the document. Special @-macros GIT_VERSION and GIT_BRANCH can be used to get the document version from Git automatically. Example: ``VERSION: @GIT_VERSION (Git branch: @GIT_BRANCH)``.\n\n   * - ``DATE``\n     - Publication date of the document. Special @-macros GIT_COMMIT_DATE and GIT_COMMIT_DATETIME can be used to get the document date from Git. Example: ``DATE: @GIT_COMMIT_DATETIME``.\n\n   * - ``CLASSIFICATION``\n     - Security classification of the document, e.g. Public, Internal, Restricted, Confidential\n\n   * - ``PREFIX (formerly REQ_PREFIX)``\n     - Requirement prefix that should be used for automatic generation of UIDs. See [LINK: SECTION-UG-Automatic-assignment-of-requirements-UID]. This field used to be called ``REQ_PREFIX`` but it was deprecated as of 2025-Q2. The ``REQ_PREFIX`` alias will be removed from the codebase in 2025-Q3.\n\n   * - ``ROOT``\n     - Defines whether a document is a root object in a traceability graph. A root document is assumed to not have any parent requirements. The project statistics calculation will skip all root document's requirements when calculating the metric ``Non-root-level requirements not connected to any parent requirement``.\n\n   * - ``OPTIONS``\n     -  Document configuration options\n\nThe ``DOCUMENT`` declaration must always have a ``TITLE`` field. The other\nfields are optional. The ``OPTIONS`` field can be used for specifying\nthe document configuration options.\n\n.. note::\n\n    The sequence of the fields is defined by the document's Grammar, i.e. should not be changed.\n","_LINK":"4b5c6f6fd70e44be8e5be10a38427e77"},"45":{"MID":"c75dc4ddd0c349e489817076877394a7","UID":"DOCUMENT_FIELD_OPTIONS","TITLE":"Document configuration options","_LINK":"DOCUMENT_FIELD_OPTIONS"},"46":{"MID":"45f3cb9a3da54852a83670af72a4d21b","STATEMENT":"The ``OPTIONS`` field may have the following attribute fields:\n\n.. list-table:: SDoc grammar ``DOCUMENT``-``OPTIONS`` fields\n   :widths: 25 85\n   :header-rows: 1\n\n   * - **Field**\n     - **Attribute values**\n\n   * - ``ENABLE_MID``\n     - ``False`` (default), ``True``\n\n   * - ``MARKUP``\n     - ``RST`` (default), ``HTML``, ``Text``\n\n   * - ``AUTO_LEVELS``\n     - ``On`` (default), ``Off``\n\n   * - ``VIEW_STYLE``\n     - ``Inline`` (default), ``Table``, ``Zebra``\n\n   * - ``NODE_IN_TOC``\n     - ``True`` (default), ``False``\n","_LINK":"45f3cb9a3da54852a83670af72a4d21b"},"47":{"MID":"0f566e0d07bf4194adabc4fba2fdf919","TITLE":"ENABLE_MID","_LINK":"6.2.1.1.1-ENABLE_MID"},"48":{"MID":"196b9e9d857548bebecc698903a593de","STATEMENT":"See [LINK: SECTION-UG-Machine-identifiers-MID].\n","_LINK":"196b9e9d857548bebecc698903a593de"},"49":{"MID":"8cef59608d3942c88dc554f5531e2d8a","TITLE":"MARKUP","_LINK":"6.2.1.1.2-MARKUP"},"50":{"MID":"19f65eabcd1c4f28a0091133979b5b6e","STATEMENT":"The ``MARKUP`` option controls which markup renderer will be used.\nThe available options are: ``RST``, ``HTML`` and ``Text``. Default is\n``RST``.\n","_LINK":"19f65eabcd1c4f28a0091133979b5b6e"},"51":{"MID":"48c614864015426b8cb98d423201ad43","TITLE":"AUTO_LEVELS","_LINK":"6.2.1.1.3-AUTO_LEVELS"},"52":{"MID":"915b35a9193348108e60968f9b60c1d0","STATEMENT":"The ``AUTO_LEVELS`` option controls StrictDoc's system of automatic numbering\nof the section levels.\nThe available options are: ``On`` /  ``Off``. Default is ``On``.\n\nIn case of ``On``, the ``[SECTION].LEVEL`` fields must be absent or may only\ncontain ``None`` to exclude that section from StrictDoc's automatic section\nnumbering. See also [LINK: UG_NODE_WITHOUT_A_LEVEL].\n\nIn case of ``Off``, all ``[SECTION].LEVEL`` fields must be populated.\n","_LINK":"915b35a9193348108e60968f9b60c1d0"},"53":{"MID":"8cde71c0f4d448c2a8939f9a81af7ac7","UID":"SECTION-UG-VIEW_STYLE","TITLE":"VIEW_STYLE","_LINK":"SECTION-UG-VIEW_STYLE"},"54":{"MID":"538a721c42824ad6b94a2f54780887ea","STATEMENT":"The ``VIEW_STYLE`` option controls whether requirement's elements are\ndisplayed inline or as table blocks. The available options are:\n\n- ``Narrative``\n- ``Inline``\n- ``Table``\n- ``Zebra``\n- ``Plain``\n\nThe default style is Narrative. This style displays meta information and prints node fields without surrounding tables, making it most suitable for documents where nodes contain descriptive content (i.e., paragraphs of text).\n\nThe Inline, Table, and Zebra styles are all variations of a table-based format designed for requirement-like nodes.\n\nThe Plain style is the simplest option, showing only the content of the node fields without any meta information.\n\n.. code-block:: text\n\n    [DOCUMENT]\n    TITLE: Hello world\n    OPTIONS:\n      VIEW_STYLE: Narrative\n\n.. note::\n\n    The ``VIEW_STYLE`` option can be also specified individually for each grammar element, see [LINK: SECTION-UG-VIEW_STYLE-2].\n","_LINK":"538a721c42824ad6b94a2f54780887ea"},"55":{"MID":"bdf01de0fc414b70a6a07118396b23b0","TITLE":"NODE_IN_TOC","_LINK":"6.2.1.1.5-NODE_IN_TOC"},"56":{"MID":"e9e7522f3a094f5ea809f7bae93384d7","STATEMENT":"The ``NODE_IN_TOC`` option controls whether requirement's title appear\nin the table of contents (TOC). The available options are: ``True`` / ``False``.\nDefault is ``True``.\n\n.. code-block:: text\n\n    [DOCUMENT]\n    TITLE: Hello world\n    OPTIONS:\n      NODE_IN_TOC: True\n","_LINK":"e9e7522f3a094f5ea809f7bae93384d7"},"57":{"MID":"726b6a1a2f854e82a7670cb8480b887e","TITLE":"Additional Metadata","_LINK":"6.2.1.2-Additional-Metadata"},"58":{"MID":"f86d45b7ad1a48ec919b43a695ca9126","STATEMENT":"StrictDoc allows additional metadata to be added in the [DOCUMENT] element. The ``METADATA:`` field accepts any number of entries, each consisting of a key-value pair on a separate line. Keys must begin with a letter and end with a colon, but are not otherwise constrained.\n\n.. code-block:: text\n\n    [DOCUMENT]\n    TITLE: Hello world\n    OPTIONS:\n      NODE_IN_TOC: True\n    METADATA:\n      KEY: Value\n      ...\n\nThe additional metadata is also included on the front page of the exported PDF. This is useful for displaying document-specific information, such as the author's name or project identifiers.\n\n.. note ::\n\n    The front page can be further customised using the ``html2pdf_template``\n    directive in strictoc.toml\n","_LINK":"f86d45b7ad1a48ec919b43a695ca9126"},"59":{"MID":"93085eee6a214a0a85aa94472f0a0a6c","UID":"SECTION-UG-Leaf-nodes","TITLE":"Leaf nodes","_LINK":"SECTION-UG-Leaf-nodes"},"60":{"MID":"23cbc84e92294aa0aeb0bb279d914480","TITLE":"TEXT","_LINK":"6.2.2.1-TEXT"},"61":{"MID":"4474709783b74b1ca31fa754c712344e","STATEMENT":"A text node is the most basic document node which is used for normal document text. The ``[TEXT]`` is one of the default leaf elements declared in StrictDoc's default grammar. See [LINK: SECTION-UG-DOCUMENT-GRAMMAR].\n\n.. code-block:: text\n\n    [DOCUMENT]\n    TITLE: StrictDoc\n\n    [TEXT]\n    STATEMENT: >>>\n    StrictDoc is software for technical documentation.\n    <<<\n\nAccording to the [LINK: SECTION-UG-Strict-rule-2], arbitrary content cannot be written outside of StrictDoc's grammar structure. The ``[TEXT]`` node is therefore a designated grammar element for writing arbitrary text content, unless the other nodes, such as ``REQUIREMENT``, are used instead.\n\n.. warning::\n\n    If your project still uses older ``[FREETEXT]`` tags, consider migrating to the new ``[TEXT]`` syntax. The rationale behind FREETEXT-TEXT change and the migration path are described in [LINK: SECTION-UG-FREETEXT-TEXT].\n","_LINK":"4474709783b74b1ca31fa754c712344e"},"62":{"MID":"6426b56116ba428fbba395c79dc2eacc","TITLE":"REQUIREMENT","_LINK":"6.2.2.2-REQUIREMENT"},"63":{"MID":"f221cd0c72f846b385ec2f0a9ddd15d5","STATEMENT":"The ``REQUIREMENT`` is used for creating requirements, for example technical requirements or project requirements.\n\nSimilar to ``TEXT``, the ``REQUIREMENT`` is a default leaf element declared in StrictDoc's default grammar, see [LINK: SECTION-UG-DOCUMENT-GRAMMAR].\n\n.. code-block:: text\n\n    [DOCUMENT]\n    TITLE: StrictDoc\n\n    [REQUIREMENT]\n    TITLE: Requirements management\n    STATEMENT: StrictDoc shall enable requirements management.\n\nThe following ``REQUIREMENT`` fields are supported by default:\n\n.. list-table:: SDoc grammar ``REQUIREMENT`` fields\n   :widths: 20 80\n   :header-rows: 1\n\n   * - **Field**\n     - **Description**\n\n   * - ``UID``\n     - Unique identifier of the requirement\n\n   * - ``LEVEL``\n     - Define section/requirement Level numbering\n\n   * - ``STATUS``\n     - Status of the requirement, e.g. ``Draft``, ``Active``, ``Deleted``\n\n   * - ``TAGS``\n     - Tags of the requirement (comma separated AlphaNum words)\n\n   * - ``TITLE``\n     - Title of the requirement\n\n   * - ``STATEMENT``\n     - The statement of the requirement. The field can be single-line or multiline.\n\n   * - ``RATIONALE``\n     - The rationale of the requirement. The field can be single-line or multiline.\n\n   * - ``COMMENT``\n     -  Comments to the rationale. The field can be single-line or multiline.\n        Note: Multiple comment fields are possible.\n\n   * - ``RELATIONS``\n     - List of requirement relations.\n\nCurrently, all ``[REQUIREMENT]``'s fields are optional but at\nleast either the ``STATEMENT`` field or the ``TITLE`` field must be present.\n","_LINK":"f221cd0c72f846b385ec2f0a9ddd15d5"},"64":{"MID":"a1ad4861e5bc442baf38383b29c901a1","UID":"UG_COMPOSITE_NODE","TITLE":"Composite nodes","_LINK":"UG_COMPOSITE_NODE"},"65":{"MID":"ce69fe89236a4bcfa104a640def4b64a","STATEMENT":"A composite node is similar to a regular leaf node, but it can also nest other nodes.\n\nThis element can be useful in lower-level specification documents where a given section must describe a single feature, and the description requires one or more levels of nesting. In such cases, it may be natural to use a composite node that is tightly connected to several related sub-nodes.\n\nThe ``[[SECTION]]`` element is a reserved composite node in StrictDoc's default grammar, used to represent nested document sections or chapters. Users can also define custom composite nodes by registering them in the document grammar as follows:\n\n.. code-block:: text\n\n    [GRAMMAR]\n    ELEMENTS:\n    - TAG: COMPOSITE_REQUIREMENT\n      PROPERTIES:\n        IS_COMPOSITE: True\n      FIELDS:\n      - TITLE: MID\n        TYPE: String\n        REQUIRED: False\n      - TITLE: UID\n        TYPE: String\n        REQUIRED: False\n      - TITLE: STATEMENT\n        TYPE: String\n        REQUIRED: True\n\n    [[COMPOSITE_REQUIREMENT]]\n    STATEMENT: Statement\n\n    [REQUIREMENT]\n    STATEMENT: Substatement #1\n\n    [REQUIREMENT]\n    STATEMENT: Substatement #2\n\n    [REQUIREMENT]\n    STATEMENT: Substatement #3\n\n    [[/COMPOSITE_REQUIREMENT]]\n\n.. note::\n\n    Composite requirements should not be used in every document. In most cases, a simple combination of nested ``[[SECTION]]`` and ``[[REQUIREMENT]]`` elements is sufficient. See also [LINK: UG_PORTABILITY_CONSIDERATIONS].\n","_LINK":"ce69fe89236a4bcfa104a640def4b64a"},"66":{"MID":"c8c15acf52a24c99922bdae6711f5120","UID":"ELEMENT_SECTION","TITLE":"SECTION","_LINK":"ELEMENT_SECTION"},"67":{"MID":"14e5fea31b1c41bf8c743f18e51053e0","STATEMENT":".. warning::\n\n    As of 2025 Q2, StrictDoc is switching to a new ``[[SECTION]]`` syntax for declaring sections (previously ``[SECTION]``). If you are an existing user, please follow the migration guide [LINK: SECTION-UG-NODE-MIGRATION].\n\nThe ``[[SECTION]]`` element can used for creating document chapters and grouping\nrequirements into logical groups. It is equivalent to the use of ``#``, ``##``,\n``###``, etc., in Markdown and ``====``, ``----``, ``~~~~`` in RST.\n\n.. code-block:: text\n\n    [DOCUMENT]\n    TITLE: StrictDoc\n\n    [[SECTION]]\n    TITLE: High-level requirements\n\n    [REQUIREMENT]\n    UID: HIGH-001\n    STATEMENT: ...\n\n    [[/SECTION]]\n\n    [[SECTION]]\n    TITLE: Implementation requirements\n\n    [REQUIREMENT]\n    UID: IMPL-001\n    STATEMENT: ...\n\n    [[/SECTION]]\n","_LINK":"14e5fea31b1c41bf8c743f18e51053e0"},"68":{"MID":"9a571c9363ee4dc4a3cdc56abd2c57a7","TITLE":"Nesting sections","_LINK":"6.2.3.1.1-Nesting-sections"},"69":{"MID":"fa700a9b975f493ba7ec2fd0a7b44bbe","STATEMENT":"Sections can be nested within each other.\n\n.. code-block:: text\n\n    [DOCUMENT]\n    TITLE: StrictDoc\n\n    [[SECTION]]\n    TITLE: Chapter\n\n    [[SECTION]]\n    TITLE: Subchapter\n\n    [REQUIREMENT]\n    STATEMENT: ...\n\n    [[/SECTION]]\n\n    [[/SECTION]]\n\nStrictDoc creates section numbers automatically. In the example above, the\nsections will have their titles numbered accordingly: ``1 Chapter`` and\n``1.1 Subchapter``.\n","_LINK":"fa700a9b975f493ba7ec2fd0a7b44bbe"},"70":{"MID":"0f52cfb294af480e806f0434d0a07757","TITLE":"Section grammar definition","_LINK":"6.2.3.1.2-Section-grammar-definition"},"71":{"MID":"7f2967ea1a41426ba15c0bdde2664920","STATEMENT":"The ``[[SECTION]]`` element is registered by default in StrictDoc's grammar, but users can override this declaration by defining it manually in the grammar specification. See [LINK: SECTION-UG-DOCUMENT-GRAMMAR].\n\nDefault ``[[SECTION]]`` grammar is equivalent to the following manual definition:\n\n.. code-block::\n\n    [GRAMMAR]\n    ELEMENTS:\n    - TAG: SECTION\n      PROPERTIES:\n        IS_COMPOSITE: True\n        PREFIX: None\n        VIEW_STYLE: Narrative\n      FIELDS:\n      - TITLE: MID\n        TYPE: String\n        REQUIRED: False\n      - TITLE: UID\n        TYPE: String\n        REQUIRED: False\n      - TITLE: LEVEL\n        TYPE: String\n        REQUIRED: True\n      - TITLE: PREFIX\n        TYPE: String\n        REQUIRED: True\n      - TITLE: TITLE\n        TYPE: String\n        REQUIRED: True\n\nA user can add any custom field to the grammar declaration. However, the default set of fields typically covers most use cases.\n","_LINK":"7f2967ea1a41426ba15c0bdde2664920"},"72":{"MID":"324938c23b864864b4e8ff6a67b589a5","TITLE":"Reserved fields","_LINK":"6.2.4-Reserved-fields"},"73":{"MID":"4d69fa95bd974d859973dbb34679a7c4","STATEMENT":"While it is possible to declare a grammar with completely custom fields, there\nis a fixed set of reserved fields that StrictDoc uses for the presentation of the table of contents and the document structure:\n\n.. list-table:: Reserved fields in SDoc's grammar\n   :widths: 20 80\n   :header-rows: 1\n\n   * - **Reserved field**\n     - **Description**\n\n   * - MID\n     - Requirement's machine identifier.\n\n   * - UID\n     - Requirement's UID.\n\n   * - LEVEL\n     - Controls whether a node gets an automatic number in TOC or not. See [LINK: UG_NODE_WITHOUT_A_LEVEL].\n\n   * - STATUS\n     - Currently, only has an effect on the Project Statistics screen which shows the Requirement Status breakdown statistics.\n\n   * - TITLE\n     - Requirement's title. StrictDoc relies on this field to create\n       document structure and table of contents.\n\n   * - STATEMENT\n     - Requirement's statement. StrictDoc presents this field as a long text\n       block.\n\n   * - COMMENT\n     - One or more comments to a requirement.\n\n   * - RATIONALE\n     - The rationale for a requirement. Visually presented in the same way as a\n       comment.\n\n   * - RELATIONS (previously REFS)\n     - StrictDoc relies on this field to link requirements together and build traceability information. This field must be declared after all other fields of a node.\n\n       Note: The ``REFS`` field is deprecated and replaced with ``RELATIONS``.\n","_LINK":"4d69fa95bd974d859973dbb34679a7c4"},"74":{"MID":"79b128720cd74a548d291e223b61c4bc","UID":"SECTION-UG-Machine-identifiers-MID","TITLE":"MID – Machine identifier","_LINK":"SECTION-UG-Machine-identifiers-MID"},"75":{"MID":"7fe2832d60014259a8d67a09f1db102a","STATEMENT":"StrictDoc supports the automatic generation of machine identifiers (MIDs). This optional feature can be enabled individually for each document through the document-level ``ENABLE_MID`` config option. If the MIDs are enabled, the document must also provide an explicit grammar for its nodes (see [LINK: SECTION-UG-DOCUMENT-GRAMMAR]) because the default grammar does not include the MID identifier for its default TEXT and REQUIREMENT elements. All grammar elements must include the MID field.\n\n.. code-block::\n\n    [DOCUMENT]\n    TITLE: Hello World!\n    OPTIONS:\n      ENABLE_MID: True\n\n    [GRAMMAR]\n    ELEMENTS:\n    - TAG: TEXT\n      FIELDS:\n      - TITLE: MID\n        TYPE: String\n        REQUIRED: True\n      - TITLE: STATEMENT\n        TYPE: String\n        REQUIRED: True\n    - TAG: REQUIREMENT\n      FIELDS:\n      - TITLE: MID\n        TYPE: String\n        REQUIRED: True\n      - TITLE: UID\n        TYPE: String\n        REQUIRED: True\n      ... any other single-line fields by a user\n      - TITLE: TITLE\n        TYPE: String\n        REQUIRED: True\n      - TITLE: STATEMENT\n        TYPE: String\n        REQUIRED: True\n      ... any other multiline fields by a user\n\nWhen the ``ENABLE_MID`` option is enabled, StrictDoc automatically generates MID fields whenever the document is written back to the file system.\n\nWith the web server, MIDs are generated automatically when a document, section, or requirement is saved.\n\nWith the command-line interface, the generation of ``MID`` can be initiated with a ``export`` command. Executing ``strictdoc export --formats sdoc`` on a document with ``ENABLE_MID: True`` results in all nodes having auto-generated MIDs.\n\n.. note::\n\n    StrictDoc provides the ENABLE_MID option on a per-document basis because this allows for the integration of MID-enabled documents alongside third-party documents where the MID feature may not be necessary or possible.\n","_LINK":"7fe2832d60014259a8d67a09f1db102a"},"76":{"MID":"4afebe421fe341b8b609b1c24f47b708","TITLE":"Unique vs machine identifiers (MID vs UID)","_LINK":"6.2.4.1.1-Unique-vs-machine-identifiers-MID-vs-UID"},"77":{"MID":"a5a3d62d90f646aa8fac43795aa8fcbb","STATEMENT":"Machine identifiers (MIDs) differ from and do not replace unique identifiers (UIDs). A requirement, section, or document node may have both ``MID`` and ``UID`` fields defined. For example:\n\n.. code-block::\n\n    [REQUIREMENT]\n    MID: 06ab121d3c0f4d8c94652323b8f735c6\n    UID: SDOC-SSS-70\n    STATUS: Active\n    TITLE: Move nodes between documents\n    STATEMENT: >>>\n    The Requirements Tool shall allow moving nodes (sections, requirements) between documents.\n    <<<\n\nAdvantages of using machine identifiers:\n\n1. Machine identifiers provide a robust means of identifying documents, sections, requirements, or custom nodes. An MID can uniquely identify a given node, independent of other fields like UID or TITLE.\n\n2. MIDs increase the portability of requirements data. Even when UID naming conventions change or nodes are relocated, the MID continues to uniquely identify the original node.\n\n3. The unique identification of nodes via MIDs allows precise tracking of changes using StrictDoc's Diff/Changelog functionality. It allows the algorithm to accurately match requirements, sections, or document nodes, even if they are moved, renamed, or undergo metadata changes.\n\nFor larger projects, particularly those with extended maintenance cycles, we strongly recommend activating machine identifiers early in the project lifecycle. This proactive approach ensures robust tracking and management of documentation throughout the project's duration.\n","_LINK":"a5a3d62d90f646aa8fac43795aa8fcbb"},"78":{"MID":"6a7c6a10b0fc4db7a5b32abedc3bb31c","TITLE":"UID","_LINK":"6.2.4.2-UID"},"79":{"MID":"2c3b050a2cd0444fb8948bb6adcb7085","STATEMENT":"Unique identifier of the requirement.\n\n.. admonition:: Observation\n\n    Some documents do not use unique identifiers which makes it impossible to trace their requirements to each other.\n    Within StrictDoc's framework, it is assumed that a good requirements document has all of its requirements uniquely identifiable, however, the ``UID`` field is optional to accommodate for documents without connections between requirements.\n\nStrictDoc does not impose any limitations on the format of a UID. Examples of\ntypical conventions for naming UIDs:\n\n- ``REQ-001``, ``SCA-001`` (scalability), ``PERF-001`` (performance), etc.\n- ``cES1008``, ``cTBL6000.1`` (example from NASA cFS requirements)\n- Requirements without a number, e.g. ``SDOC-HIGH-DATA-MODEL`` (StrictDoc)\n- ``SAVOIR.OBC.PM.80`` (SAVOIR guidelines)\n\n.. code-block:: text\n\n    [DOCUMENT]\n    TITLE: StrictDoc\n\n    [REQUIREMENT]\n    UID: SDOC-HIGH-DATA-MODEL\n    STATEMENT: STATEMENT: StrictDoc shall be based on a well-defined data model.\n","_LINK":"2c3b050a2cd0444fb8948bb6adcb7085"},"80":{"MID":"f01eced244e842e28c0729d8458ac935","UID":"UG_NODE_WITHOUT_A_LEVEL","TITLE":"LEVEL","_LINK":"UG_NODE_WITHOUT_A_LEVEL"},"81":{"MID":"094425a33e8941d9a0016b4ed714c664","STATEMENT":"A section can have no level attached to it. To enable this behavior, the field\n``LEVEL`` has to be set to ``None``.\n\n.. code-block:: text\n\n    [DOCUMENT]\n    TITLE: Hello world doc\n\n    [[SECTION]]\n    TITLE: Section 1\n\n    [[/SECTION]]\n\n    [[SECTION]]\n    LEVEL: None\n    TITLE: Out-of-band Section\n\n    [[/SECTION]]\n\n    [[SECTION]]\n    TITLE: Section 2\n\n    [[/SECTION]]\n\nThe section with no level will be skipped by StrictDoc's system of automatic\nnumbering of the section levels (1, 1.1, 1.2, 2, ...).\n\nThe behavior of the ``LEVEL: None`` option is recursive. If a parent section\nhas its ``LEVEL`` set to ``None``, all its subsections' and requirements' levels\nare set to ``LEVEL: None`` by StrictDoc automatically.\n","_LINK":"094425a33e8941d9a0016b4ed714c664"},"82":{"MID":"05c39a0bc4d9482ca4199c84b1981948","TITLE":"STATUS","_LINK":"6.2.4.4-STATUS"},"83":{"MID":"448aa949724e4361a5b2f317c40c7492","TITLE":"TAGS","_LINK":"6.2.4.5-TAGS"},"84":{"MID":"d7c2d72f849b413cb312d44813d25d5a","STATEMENT":"Allows to add tags to a ``[REQUIREMENT]``. Tags are a comma separated list of\nsingle words. Only Alphanumeric tags (a-z, A-Z, 0-9 and underscore) are\nsupported.\n","_LINK":"d7c2d72f849b413cb312d44813d25d5a"},"85":{"MID":"62480ac9dbdf4e4fb5c533abefa19997","TITLE":"TITLE","_LINK":"6.2.4.6-TITLE"},"86":{"MID":"f5f9008f417e40aa8acd9da18ccd89d1","STATEMENT":"The title of the requirement.\nEvery requirement should have its ``TITLE`` field specified.\n\n.. admonition:: Observation\n\n    Many real-world documents have requirements with statements and titles but some documents only use statements without title in which case their ``UID`` becomes their ``TITLE`` and vice versa.\n\n    Example:\n\n    .. code-block:: text\n\n        [DOCUMENT]\n        TITLE: StrictDoc\n\n        [REQUIREMENT]\n        UID: REQ-001\n        STATEMENT: StrictDoc shall enable requirements management.\n","_LINK":"f5f9008f417e40aa8acd9da18ccd89d1"},"87":{"MID":"fb3b2d0bbf4c43abaa09b29b106346d4","TITLE":"STATEMENT","_LINK":"6.2.4.7-STATEMENT"},"88":{"MID":"cea069906c2e4329bea0d97744984ba8","STATEMENT":"The statement of the requirement. The field can be single-line or multiline.\nEvery requirement shall have its ``STATEMENT`` field specified.\n","_LINK":"cea069906c2e4329bea0d97744984ba8"},"89":{"MID":"bf35d37584b34aabb5bf3b2e144beecb","TITLE":"RATIONALE","_LINK":"6.2.4.8-RATIONALE"},"90":{"MID":"7e63bdbce418401da8eb5aa607fd8fc2","STATEMENT":"A requirement should have a ``RATIONALE`` field that explains/justifies why\nthe requirement exists. Like comments, the rationale field can be single-line\nor multiline.\n\n.. code-block:: text\n\n    [DOCUMENT]\n    TITLE: StrictDoc\n\n    [REQUIREMENT]\n    UID: REQ-001\n    STATEMENT: StrictDoc shall enable requirements management.\n    COMMENT: Clarify the meaning or give additional information here.\n    RATIONALE: The presence of the REQ-001 is justified.\n","_LINK":"7e63bdbce418401da8eb5aa607fd8fc2"},"91":{"MID":"165b33aa61474a1db0ca0bd1f1279ba4","TITLE":"COMMENT","_LINK":"6.2.4.9-COMMENT"},"92":{"MID":"3928acde165b4505943154199ecd739a","STATEMENT":"A requirement can have one or more comments explaining the requirement. The\ncomments can be single-line or multiline.\n\n.. code-block:: text\n\n    [DOCUMENT]\n    TITLE: StrictDoc\n\n    [REQUIREMENT]\n    UID: REQ-001\n    STATEMENT: StrictDoc shall enable requirements management.\n    COMMENT: Clarify the meaning or give additional information here.\n    COMMENT: >>>\n    This is a multiline comment.\n\n    The content is split via \\n\\n.\n\n    Each line is rendered as a separate paragraph.\n    <<<\n","_LINK":"3928acde165b4505943154199ecd739a"},"93":{"MID":"f10fd08172054423be7c00fcd16e61e9","UID":"SDOC_UG_REQUIREMENT_RELATIONS","TITLE":"RELATIONS","_LINK":"SDOC_UG_REQUIREMENT_RELATIONS"},"94":{"MID":"c0c9c15d57e742ed80f12b8895f01de0","STATEMENT":"The ``RELATIONS`` field is used to connect requirements to each other:\n\n.. code-block:: text\n\n    [DOCUMENT]\n    TITLE: StrictDoc\n\n    [REQUIREMENT]\n    UID: REQ-001\n    STATEMENT: StrictDoc shall enable requirements management.\n\n    [REQUIREMENT]\n    UID: REQ-002\n    TITLE: Requirement #2's title\n    STATEMENT: Requirement #2 statement\n    RELATIONS:\n    - TYPE: Parent\n      VALUE: REQ-001\n    - TYPE: File\n      VALUE: /full/path/file.py\n\nThe supported relation types are: ``Parent``, ``Child``, and ``File``. To be used in a requirement, the relations must be first registered in the document grammar. The default grammar defines ``Parent`` and ``File`` relation. See [LINK: SDOC_UG_GRAMMAR_RELATIONS] for more details.\n\nThe ``RELATIONS`` must be the last field of a requirement. For ``TYPE: Parent`` and ``TYPE: Child`` relations, the ``VALUE`` attribute contains a parent/child's requirement\n``UID``. A requirement may reference multiple parent or child requirements by\nadding multiple ``TYPE``/``VALUE`` items. Defining circular\nreferences e.g. ``Req-A`` ⇒ ``Req-B`` ⇒ ``Reg-C`` ⇒ ``Req-A`` results in validation errors and must be avoided.\n\nThe ``TYPE: File``-``VALUE`` attribute contains a filename referencing the\nimplementation of (parts of) this requirement. A requirement may add multiple\nfile references requirements by adding multiple ``TYPE: File``-``VALUE`` items.\n\n.. note::\n\n    The ``TYPE: Parent`` and ``TYPE: Child`` are currently the only fully supported types of connection.\n    Linking requirements to files is still experimental (see also [LINK: SECTION-TRACEABILITY-REQS-TO-SOURCE-CODE]).\n\n.. note::\n\n    In most requirements projects, only the Parent relations should be used, possibly with roles.\n    The Child relation should be used only in specific cases.\n    See [LINK: SDOC_UG_GRAMMAR_RELATIONS_PARENT_VS_CHILD] for more details.\n\n.. note::\n\n    In the near future, adding information about external references (e.g. company policy documents, technical specifications, regulatory requirements, etc.) is planned.\n\n.. note::\n\n    By design, StrictDoc will only show parent or child links if both requirements connected with a reference have ``UID`` defined.\n","_LINK":"c0c9c15d57e742ed80f12b8895f01de0"},"95":{"MID":"c357b57be45a4871a6dfb877483de702","TITLE":"Relation roles","_LINK":"6.2.4.10.1-Relation-roles"},"96":{"MID":"a54f41576b2d40df92041862bef13600","STATEMENT":"A requirement relation can be specialized with a role. The role must be registered in the document grammar, see [LINK: SDOC_UG_GRAMMAR_RELATIONS].\n\n.. code-block::\n\n    [DOCUMENT]\n    TITLE: Example\n\n    [GRAMMAR]\n    ELEMENTS:\n    - TAG: REQUIREMENT\n      FIELDS:\n      ...\n      RELATIONS:\n      - TYPE: Parent\n        ROLE: Refines\n\n    [REQUIREMENT]\n    UID: REQ-2\n    TITLE: Requirement title\n    STATEMENT: >>>\n    Requirement statement.\n    <<<\n    RELATIONS:\n    - TYPE: Parent\n      VALUE: REQ-1\n      ROLE: Refines\n\nIn this example REQ-1 is the parent of REQ-2 and REQ-2 refines REQ-1.\n","_LINK":"a54f41576b2d40df92041862bef13600"},"97":{"MID":"57df0956302f4c728f6b35606320b660","UID":"UG_COMPOSABLE_DOCUMENTS","TITLE":"DOCUMENT_FROM_FILE – Composing documents from other documents","_LINK":"UG_COMPOSABLE_DOCUMENTS"},"98":{"MID":"6ed881a7cb8949cab3d1a1836846b716","STATEMENT":".. note::\n    The composable documents is an early feature with only 50%+ of the implementation complete. See `Epic: UI: Composable documents <https://github.com/strictdoc-project/strictdoc/issues/1698>`_.\n\nStrictDoc ``.sdoc`` files can be built-up from including other documents where a document can be included to no more than one including document.\n\nThe ``[DOCUMENT_FROM_FILE]`` element can be used anywhere body elements can be\nused ( e.g. ``[SECTION]``, ``[REQUIREMENT``, ``[COMPOSITE_REQUIREMENT]`` etc.) and will\nevaluate by inserting its contents from the file referenced by its ``FILE:`` property\nwhere it was used in the parent document. The files included must be proper SDoc\ndocuments and have a usual ``.sdoc`` extension.\n\nHere is an example pair of files similar to examples above. First the\n``.sdoc`` file has a ``[DOCUMENT_FROM_FILE]`` that references the latter file.\n\n.. code-block:: text\n\n    [DOCUMENT]\n    TITLE: StrictDoc\n\n    [DOCUMENT_FROM_FILE]\n    FILE: include.sdoc\n\n    [REQUIREMENT]\n\nThen the referenced file, ``include.sdoc``:\n\n.. code-block:: text\n\n    [DOCUMENT]\n    TITLE: Section ABC\n\n    [REQUIREMENT]\n\n    [[SECTION]]\n    TITLE: Sub section\n    [[/SECTION]]\n\n    [COMPOSITE_REQUIREMENT]\n\n    [REQUIREMENT]\n\n    [/COMPOSITE_REQUIREMENT]\n\nWhich will resolve to the following document after inclusion:\n\n.. code-block:: text\n\n    [DOCUMENT]\n    TITLE: StrictDoc\n\n    [[SECTION]]\n    TITLE: Section ABC\n\n    [REQUIREMENT]\n\n    [[SECTION]]\n    TITLE: Sub section\n    [[/SECTION]]\n\n    [COMPOSITE_REQUIREMENT]\n\n    [REQUIREMENT]\n\n    [/COMPOSITE_REQUIREMENT]\n\n    [[/SECTION]]\n\n    [REQUIREMENT]\n\n.. note::\n\n    The Composable Documents feature belongs to the list of features that may be less portable when it comes to interfacing with other tools. See [LINK: UG_PORTABILITY_CONSIDERATIONS].\n","_LINK":"6ed881a7cb8949cab3d1a1836846b716"},"99":{"MID":"952dd638d61c45ab950f271d53e56b2f","STATEMENT":"The SDoc model and syntax provide a set of default elements, along with the option for users to create custom nodes.\n\nThe default leaf nodes are ``[TEXT]`` and ``[REQUIREMENT]``, while the default composite node is ``[[SECTION]]``. These default nodes are described below.\n\nTo create a custom node, users must declare it in a document grammar. Instructions for creating grammars are provided in [LINK: SECTION-UG-DOCUMENT-GRAMMAR].\n","_LINK":"952dd638d61c45ab950f271d53e56b2f"},"100":{"MID":"0d29071c7f924ecdb11fc32da4ecc5e3","UID":"SECTION-UG-DOCUMENT-GRAMMAR","TITLE":"Document grammar","_LINK":"SECTION-UG-DOCUMENT-GRAMMAR"},"101":{"MID":"4c2244d6affb4653844f730e1de88266","STATEMENT":".. admonition:: Observation\n\n    Different industries have their own types of requirements documents with specialized meta information.\n    Examples:\n    ``ASIL`` in the automotive industry or ``HERITAGE`` field in some of the requirements documents by NASA.\n\n    For anything beyond a small project, it's best to define a document grammar early. The default implicit document grammar works for quick tests, but real projects often need extra fields or custom node types. Starting with your own grammar saves time later. The instructions for defining a document grammar follow below.\n\nStrictDoc allows declaration of document grammars with custom fields that are\nspecific to a particular document.\n\nFirst, such fields have to be registered on a document level using the\n``[GRAMMAR]`` field. The following example defines a grammar with three elements: ``SECTION``, ``TEXT``, and ``REQUIREMENT``, where the REQUIREMENT element includes several custom fields, such as the ``VERIFICATION`` field.\n\n.. code-block:: text\n\n    [DOCUMENT]\n    TITLE: How to declare a document grammar\n\n    [GRAMMAR]\n    ELEMENTS:\n    - TAG: SECTION\n      PROPERTIES:\n        IS_COMPOSITE: True\n        PREFIX: None\n        VIEW_STYLE: Narrative\n      FIELDS:\n      - TITLE: MID\n        TYPE: String\n        REQUIRED: False\n      - TITLE: UID\n        TYPE: String\n        REQUIRED: False\n      - TITLE: LEVEL\n        TYPE: String\n        REQUIRED: True\n      - TITLE: PREFIX\n        TYPE: String\n        REQUIRED: True\n      - TITLE: TITLE\n        TYPE: String\n        REQUIRED: True\n    - TAG: TEXT\n      FIELDS:\n      - TITLE: UID\n        TYPE: String\n        REQUIRED: False\n      - TITLE: STATEMENT\n        TYPE: String\n        REQUIRED: True\n    - TAG: REQUIREMENT\n      FIELDS:\n      - TITLE: UID\n        TYPE: String\n        REQUIRED: True\n      - TITLE: VERIFICATION\n        TYPE: String\n        REQUIRED: True\n      - TITLE: TITLE\n        TYPE: String\n        REQUIRED: True\n      - TITLE: STATEMENT\n        TYPE: String\n        REQUIRED: True\n      - TITLE: COMMENT\n        TYPE: String\n        REQUIRED: True\n\nThis declaration configures the parser to recognize the declared fields as\ndefined by a user. Declaring a special field as ``REQUIRED: True`` makes this\nfield mandatory for each and every requirement in the document.\n\nWhen the fields are registered on the document level, it becomes possible to\ndeclare them as the ``[REQUIREMENT]`` special fields:\n\n.. code-block:: text\n\n    [REQUIREMENT]\n    UID: ABC-123\n    VERIFICATION: Test\n    STATEMENT: System A shall do B.\n    COMMENT: Test comment.\n\nEach grammar element must have exactly one content field named ``STATEMENT``,\n``DESCRIPTION`` or ``CONTENT``. The content field plays a key role in the HTML\nuser interface as well as other export formats.\n\nAll fields before the content field are considered meta information. Meta information\nfields are assumed to be single-line. The content field and all following fields\naccept single-line and multiline strings.\n\n.. note::\n\n    The order of fields in each document node must match the order of their declaration in the grammar.\n","_LINK":"4c2244d6affb4653844f730e1de88266"},"102":{"MID":"269600f411374fce975c3d7110ae74b6","TITLE":"Supported field types","_LINK":"6.3.1-Supported-field-types"},"103":{"MID":"a437c871dc3d46dba80460d5c8c22cf6","STATEMENT":"The supported field types are:\n\n.. list-table:: SDoc grammar field types\n   :widths: 20 80\n   :header-rows: 1\n\n   * - **Field type**\n     - **Description**\n\n   * - ``String``\n     - Simple String\n\n   * - ``SingleChoice``\n     - Enum-like behavior, one choice is possible. Must be single-line and thus\n       has to be defined before the content field.\n\n   * - ``MultipleChoice``\n     - comma-separated words with fixed options. Must be single-line and thus has\n       to be defined before the content field.\n\n   * - ``Tag``\n     - comma-separated list of tags/key words. Only Alphanumeric tags (a-z, A-Z, 0-9 and underscore) are supported.\n\n.. note::\n\n    The **field type** also influences how the field is presented in the web editor UI. A ``SingleChoice`` field enables an auto-completion function, which is useful in cases where the same values are entered repeatedly (such as requirement owners, test case types, or status fields).\n\nExample:\n\n.. code-block:: text\n\n    [DOCUMENT]\n    TITLE: How to declare a grammar with different field types\n\n    [GRAMMAR]\n    ELEMENTS:\n    - TAG: TEXT\n      FIELDS:\n      - TITLE: UID\n        TYPE: String\n        REQUIRED: False\n      - TITLE: STATEMENT\n        TYPE: String\n        REQUIRED: True\n    - TAG: REQUIREMENT\n      FIELDS:\n      - TITLE: UID\n        TYPE: String\n        REQUIRED: True\n      - TITLE: ASIL\n        TYPE: SingleChoice(A, B, C, D)\n        REQUIRED: True\n      - TITLE: VERIFICATION\n        TYPE: MultipleChoice(Review, Analysis, Inspection, Test)\n        REQUIRED: True\n      - TITLE: UNIT\n        TYPE: Tag\n        REQUIRED: True\n      - TITLE: TITLE\n        TYPE: String\n        REQUIRED: True\n      - TITLE: STATEMENT\n        TYPE: String\n        REQUIRED: True\n      - TITLE: COMMENT\n        TYPE: String\n        REQUIRED: True\n        REQUIRED: True\n      RELATIONS:\n      - Type: Parent\n      - Type: File\n\n    [TEXT]\n    STATEMENT: >>>\n    This document is an example of a simple SDoc custom grammar.\n    <<<\n\n    [REQUIREMENT]\n    UID: ABC-123\n    ASIL: A\n    VERIFICATION: Review, Test\n    UNIT: OBC, RTU\n    TITLE: Function B\n    STATEMENT: System A shall do B.\n    COMMENT: Test comment.\n    RELATIONS:\n    - TYPE: Parent\n      VALUE: REQ-001\n    - TYPE: File\n      VALUE: /full/path/file.py\n","_LINK":"a437c871dc3d46dba80460d5c8c22cf6"},"104":{"MID":"3b9af7a4f6444664aa9e76343b477236","TITLE":"Grammar element properties","_LINK":"6.3.2-Grammar-element-properties"},"105":{"MID":"e1e5bda619f549188d8d7ae158aeaa44","TITLE":"IS_COMPOSITE","_LINK":"6.3.2.1-IS_COMPOSITE"},"106":{"MID":"5396d4571b4c4204b093a44980a489ed","STATEMENT":"The ``IS_COMPOSITE`` property controls whether a document node will be treated as a leaf node, e.g., ``[NODE]``, or a composite node, e.g., ``[[NODE]]``.\n\n.. code-block::\n\n    [GRAMMAR]\n    ELEMENTS:\n    - TAG: NODE\n      PROPERTIES:\n        IS_COMPOSITE: False\n      FIELDS:\n        ...\n    - TAG: NODE2\n      PROPERTIES:\n        IS_COMPOSITE: True\n      FIELDS:\n        ...\n\n    [NODE]\n    TITLE: Leaf node\n    ...\n\n    [[NODE2]]\n    TITLE: Composite node\n\n    ...\n\n    [[/NODE]]\n\n.. note::\n\n    See [LINK: SECTION-UG-Leaf-nodes] and [LINK: UG_COMPOSITE_NODE] for a general description of leaf vs composite nodes.\n","_LINK":"5396d4571b4c4204b093a44980a489ed"},"107":{"MID":"f2c8342dd6f5432c95ef6f80cf5e87ba","TITLE":"PREFIX","_LINK":"6.3.2.2-PREFIX"},"108":{"MID":"19d4dcbf0cd24f84996bcddb778e348c","STATEMENT":"The ``PREFIX`` property declared for a grammar element determines the prefix that will be automatically added to a UID when creating a new requirement via the StrictDoc web interface or the manage auto-uuid command.\n\n.. code-block::\n\n    [GRAMMAR]\n    ELEMENTS:\n    - TAG: REQUIREMENT\n      PROPERTIES:\n        PREFIX: REQ-\n      FIELDS:\n      ...\n\nSee [LINK: SECTION-UG-Automatic-assignment-of-requirements-UID].\n","_LINK":"19d4dcbf0cd24f84996bcddb778e348c"},"109":{"MID":"61df1b83c27e43909ad5640cf0d78962","UID":"SECTION-UG-VIEW_STYLE-2","TITLE":"VIEW_STYLE","_LINK":"SECTION-UG-VIEW_STYLE-2"},"110":{"MID":"4678706b4c864f459d1b478cd703fcc1","STATEMENT":"The ``VIEW_STYLE`` property controls which template should be used for rendering a given node.\n\n.. code-block::\n\n    [GRAMMAR]\n    ELEMENTS:\n    - TAG: REQUIREMENT\n      PROPERTIES:\n        VIEW_STYLE: Narrative\n      FIELDS:\n      - TITLE: STATEMENT\n        TYPE: String\n        REQUIRED: True\n\nIf ``VIEW_STYLE`` is not specified at the grammar element level, StrictDoc will look up the view style from the ``VIEW_STYLE`` document-level declaration, see [LINK: SECTION-UG-VIEW_STYLE].\n","_LINK":"4678706b4c864f459d1b478cd703fcc1"},"111":{"MID":"04828fd96e2e42f3810af276d06859c1","UID":"SDOC_UG_GRAMMAR_RELATIONS","TITLE":"Relations","_LINK":"SDOC_UG_GRAMMAR_RELATIONS"},"112":{"MID":"012b0350547a48fc9ab3fbd6d9b5d502","STATEMENT":"The custom grammar configuration includes the optional ``RELATION:`` section which specifies the relations a given document supports.\n\n.. code-block::\n\n    [DOCUMENT]\n    TITLE: Test Doc\n\n    [GRAMMAR]\n    ELEMENTS:\n    - TAG: REQUIREMENT\n      FIELDS:\n      - TITLE: STATEMENT\n        TYPE: String\n        REQUIRED: True\n      RELATIONS:\n      - TYPE: Parent\n\n    [REQUIREMENT]\n    STATEMENT: >>>\n    This is a statement.\n    <<<\n    RELATIONS:\n    - TYPE: Parent\n      VALUE: ID-001\n\nThe supported relation types are ``Parent``, ``Child``, ``File``. The Parent/Child relations are valid between requirements, the File relation connects a requirement with a file.\n\nThe default grammar relations, when a custom grammar is not specified, are ``Parent`` and ``File``.\n","_LINK":"012b0350547a48fc9ab3fbd6d9b5d502"},"113":{"MID":"16ce47f32874421986a5a843c5aeb2bf","UID":"SECTION-UG-Relation-roles","TITLE":"Relation roles","_LINK":"SECTION-UG-Relation-roles"},"114":{"MID":"01b8aa59963b42518d98c4e6b5e3259b","STATEMENT":"StrictDoc's custom grammar support the configuration of relation roles. The Parent and Child relations can be further specialized with roles, such as Refines, Implements, Verifies, etc.\n\n.. code-block::\n\n    [DOCUMENT]\n    TITLE: Test Doc\n\n    [GRAMMAR]\n    ELEMENTS:\n    - TAG: REQUIREMENT\n      FIELDS:\n      ...\n      RELATIONS:\n      - TYPE: Parent\n        ROLE: Refines\n\nWith this grammar, StrictDoc will only allow creating requirements that have Parent relations with the ``ROLE: Refines`` specified. Any other relations will trigger validation errors.\n\n.. note::\n\n    See also [LINK: SECTION-UG-File-relations-roles].\n","_LINK":"01b8aa59963b42518d98c4e6b5e3259b"},"115":{"MID":"ed4e4d30b3eb46ca976295aa27ede9e3","UID":"SDOC_UG_GRAMMAR_RELATIONS_PARENT_VS_CHILD","TITLE":"Parent vs Child relations","_LINK":"SDOC_UG_GRAMMAR_RELATIONS_PARENT_VS_CHILD"},"116":{"MID":"b119e614781044eab641e20eaec872e5","STATEMENT":"**TL;DR** If there is no compelling reason to use the Child relations, avoid using them.\n\nMost of the technical requirements documents can be modeled with just a Parent relation type. A typical traceability graph for a requirements project is typically child-to-parent, where the higher-level parent requirements are referred to as \"Parents\" by their child requirements.\n\nFor example, in one (parent) document:\n\n.. code-block::\n\n    [REQUIREMENT]\n    UID: PARENT-1\n    TITLE: Parent requirement\n    STATEMENT: >>>\n    ...\n    <<<\n\nSomewhere in another child document:\n\n.. code-block::\n\n    [REQUIREMENT]\n    UID: CHILD-1\n    TITLE: Child requirement\n    STATEMENT: >>>\n    ...\n    <<<\n    RELATIONS:\n    - TYPE: Parent\n      VALUE: PARENT-001\n\nIn some very special cases, it may be desired to also use the Child relations. For example, creating a so-called Compliance Matrix between a standard and a project requirement can use the Child relation to connect both the upper-level standard requirement with a project-level technical requirement:\n\n.. code-block::\n\n    [DOCUMENT]\n    TITLE: Standard X Compliance Matrix\n\n    [GRAMMAR]\n    ELEMENTS:\n    ...\n    RELATIONS:\n    - TYPE: Parent\n    - TYPE: Child\n\n    [REQUIREMENT]\n    COMPLIANCE: Compliant.\n    STATEMENT: >>>\n    This is a compliance statement regarding the Standard X's STANDARD-001 requirement...\n    <<<\n    RELATIONS:\n    - TYPE: Parent\n      VALUE: STANDARD-001\n    - TYPE: Child\n      VALUE: PROJECT-001\n\nWith such a setup, StrictDoc generates the correct traceability graph that will link together the requirements of the PROJECT with the requirements of the STANDARD through the requirements of the compliance matrix.\n\nAnother example can be adapting the requirements of the Off-the-Shelf (OTS) project to the higher-level requirements of the user project. An intermediate requirements document can be created that connects the parent requirements of the user project with the immutable child requirements of the OTS project. This intermediate document can link the user requirement with the Parent and the OTS project with a Child link.\n\nBoth examples above involve activity called Tailoring when an intermediate document (Compliance Matrix) serves as an interface between two layers of documents.\n","_LINK":"b119e614781044eab641e20eaec872e5"},"117":{"MID":"cd7d9c9b0efe443895d1b6eb44a3799b","TITLE":"IMPORT_FROM_FILE – Importing grammar from file","_LINK":"6.3.4-IMPORT_FROM_FILE-Importing-grammar-from-file"},"118":{"MID":"df106206da0e446e87021fbf711fdb65","STATEMENT":"A document grammar can be described in a separate file with an extension ``.sgra`` and imported to a document. This feature may be useful when multiple documents need to share the same grammar.\n\nExample:\n\n.. code-block::\n\n    [DOCUMENT]\n    TITLE: Document 1\n\n    [GRAMMAR]\n    IMPORT_FROM_FILE: grammar.sgra\n\n    [REQUIREMENT]\n    TITLE: Requirement title\n    STATEMENT: >>>\n    Requirement statement.\n    <<<\n\nA grammar file has an extension ``grammar.sgra`` and contains a usual grammar declaration which starts with a ``[GRAMMAR]`` tag.\n\n.. code-block::\n\n    [GRAMMAR]\n    ELEMENTS:\n    - TAG: REQUIREMENT\n      FIELDS:\n      - TITLE: TITLE\n        TYPE: String\n        REQUIRED: True\n      - TITLE: STATEMENT\n        TYPE: String\n        REQUIRED: True\n\nWhen a ``[GRAMMAR]`` is declared with an ``IMPORT_FROM_FILE`` line, the grammar from the grammar file becomes the document grammar as if it was declared directly in the document.\n\n.. note::\n\n    Editing of the grammars defined in ``.sgra`` files can be only done with a text editor, it is not implemented yet in the editable web interface.\n","_LINK":"df106206da0e446e87021fbf711fdb65"},"119":{"MID":"d4292ad751ca407b8147e7204a934c4e","UID":"SDOC_UG_LINKS_AND_ANCHORS","TITLE":"Links","_LINK":"SDOC_UG_LINKS_AND_ANCHORS"},"120":{"MID":"6ce1010a003146ec9e3e8d77ee89a082","STATEMENT":"StrictDoc supports creating inline links to document sections, anchors, requirements and custom grammar elements.\n","_LINK":"6ce1010a003146ec9e3e8d77ee89a082"},"121":{"MID":"ac7ccc30e5bf489cb4929302c8ec21cf","TITLE":"Links","_LINK":"6.4.1-Links"},"122":{"MID":"8b07c82f462348a58c3ab81be4db753d","STATEMENT":"Elements that have an UID can be referenced from section text using a ``[LINK: <UID>]`` tag.\nTo reference a section that has an UID, use ``[LINK: <Section UID>]`` tag.\nLikewise, a requirement can be referenced with ``[LINK: <Requirement UID>]``.\n\nExample:\n\nThe following link references a section: [LINK: SDOC_UG_LINKS_AND_ANCHORS].\n\n.. note::\n\n    Adding a ``LINK`` tag will only work from the section text.\n    In the requirement fields, the LINK tag will not be recognized.\n","_LINK":"8b07c82f462348a58c3ab81be4db753d"},"123":{"MID":"a1d9bb6b7df84b5eb6bf355542a5288a","TITLE":"Anchors","_LINK":"6.4.2-Anchors"},"124":{"MID":"294d6a0e96424dc8a93d6502c43e8501","STATEMENT":"The ``[ANCHOR: <anchor uid>, <optional anchor title>]`` tag creates an anchor that can be referenced from other pages using ``[LINK <Anchor UID>]``.\n\nExample:\n\nThis is a link to anchor: [LINK: ANCHOR-EXAMPLE].\n\n.. note::\n\n    ``ANCHOR`` is a block-level tag.\n    It has to be placed in the beginning of a line with a newline break after the tag.\n","_LINK":"294d6a0e96424dc8a93d6502c43e8501"},"125":{"MID":"26b105a45eda470497148a7903ca731b","TITLE":"Anchor example","_LINK":"6.4.2.1-Anchor-example"},"126":{"MID":"ba71ef8f24b342178b28e87b7609b8d7","STATEMENT":"This section contains an anchor named ``Anchor ABC``.\n\n[ANCHOR: ANCHOR-EXAMPLE, Anchor ABC]\n","_LINK":"ba71ef8f24b342178b28e87b7609b8d7"},"127":{"MID":"ec9dcd4ad28a4852bc47723e667006df","TITLE":"Syntax rules","_LINK":"6.5-Syntax-rules"},"128":{"MID":"926894ac8efc4e99943741691b3d4efe","UID":"SECTION-UG-Strict-rule-1","TITLE":"Strict rule #1: One empty line between all nodes","_LINK":"SECTION-UG-Strict-rule-1"},"129":{"MID":"2ebd1f2d3c8746a383d71232756c3bd3","STATEMENT":"StrictDoc's grammar requires each node, such as ``[REQUIREMENT]``, ``[[SECTION]]``,\netc., to be separated with exactly one empty line from the nodes surrounding it.\nThis rule is valid for all nodes. Absence of an empty line or presence of more\nthan one empty line between two nodes will result in an SDoc parsing error.\n","_LINK":"2ebd1f2d3c8746a383d71232756c3bd3"},"130":{"MID":"1e465597f02842de92852be3a57f84cb","UID":"SECTION-UG-Strict-rule-2","TITLE":"Strict rule #2: No content is allowed outside of SDoc grammar","_LINK":"SECTION-UG-Strict-rule-2"},"131":{"MID":"686eb01cf7db44c4bd1edd72ccb02ed0","STATEMENT":"StrictDoc's grammar does not allow any content to be written outside the SDoc grammatical constructs.\n\nIt is assumed that the critical content shall always be\nwritten in form of leaf nodes and composite nodes, such as\n``[REQUIREMENT]`` and ``[[SECTION]]``.\n\nNon-critical content shall be specified using the ``[TEXT]`` leaf nodes.\n","_LINK":"686eb01cf7db44c4bd1edd72ccb02ed0"},"132":{"MID":"c741dd299b044fc9b72510256d48589e","UID":"SECTION-UG-Strict-rule-3","TITLE":"Strict rule #3: No empty strings","_LINK":"SECTION-UG-Strict-rule-3"},"133":{"MID":"c01ab5711463497498c91a968179d63c","STATEMENT":"StrictDoc's grammar does not allow empty strings. This rule is applicable to\nboth single-line and multiline strings and both section fields and requirement\nfields. A field is either missing or is a non-empty string.\n\nThe following patterns are all invalid for single-line fields:\n\n.. code-block::\n\n    [[SECTION]]\n    TITLE:\n\n    [[SECTION]]\n    TITLE: (any number of space characters after colons)\n\n    [REQUIREMENT]\n    STATEMENT:\n\n    [REQUIREMENT]\n    STATEMENT: (any number of space characters after colons)\n\nThe following patterns are all invalid for multiline fields:\n\n.. code-block::\n\n    [REQUIREMENT]\n    COMMENT: >>>\n    <<<\n\n    [REQUIREMENT]\n    COMMENT: >>>\n    (any number of space characters)\n    <<<\n\nIf you need to provide a placeholder for a field that you know has to be filled\nout soon, add a \"TBD\" (to be done, by our team) or a \"TBC\" (to be confirmed with a customer or a supplier) string.\n\nThe Project Statistics screen provides metrics for counting the number of TBDs (To Be Determined) and TBCs (To Be Confirmed) in a document, assisting in evaluating the document's maturity. This is a common practice in the regulared industries. See [LINK: SECTION-UG-Project-statistics-screen] for more details.\n","_LINK":"c01ab5711463497498c91a968179d63c"},"134":{"MID":"31eb939aa5684f74b86be93ea7f14f7b","TITLE":"Markup","_LINK":"7-Markup"},"135":{"MID":"a3d675f38a1341548722239e994e55e1","STATEMENT":"The Restructured Text (reST) markup is the default markup supported by\nStrictDoc. The reST markup can be written inside all StrictDoc's text blocks,\nsuch as ``STATEMENT``, ``COMMENT``, ``RATIONALE``, etc.\n\nSee the `reST syntax documentation <https://docutils.sourceforge.io/rst.html>`_\nfor a full reference.\n\n.. note::\n\n    StrictDoc supports a Docutils-subset of RST, not a Sphinx-subset.\n    See [LINK: SDOC_UG_LIMIT_RST].\n\nThe support of Tex and HTML is planned.\n","_LINK":"a3d675f38a1341548722239e994e55e1"},"136":{"MID":"64d48546374e4bfd881733b0174fbebe","TITLE":"Images","_LINK":"7.1-Images"},"137":{"MID":"e87ffdf6195c481cb39bc3d1ec29eca6","STATEMENT":"To insert an image into a document, create a folder named ``_assets`` alongside your document and then place the image file into it.\n\nThis is the example of how images are included using the reST syntax:\n\n.. code-block:: text\n\n    [TEXT]\n    STATEMENT: >>>\n    .. image:: _assets/sandbox1.svg\n       :alt: Sandbox demo\n       :class: image\n    <<<\n\n.. note::\n\n    Currently, it is not possible to upload images via the web user interface.\n    Therefore, you must manually place the image into the ``_assets`` folder using either the command-line or a file browser.\n","_LINK":"e87ffdf6195c481cb39bc3d1ec29eca6"},"138":{"MID":"83066d011cef4e8694aac5fbe90a357e","TITLE":"Mathjax support","_LINK":"7.2-Mathjax-support"},"139":{"MID":"abdf406fe10847929dd7cb12a030456f","STATEMENT":"StrictDoc can include the `MathJax <https://www.mathjax.org/>`_ Javascript library to all of the document templates. To activate MathJax, edit the ``strictdoc.toml`` config file in the root of your repository with documentation content.\n\n.. code-block::\n\n    [project]\n    title = \"My project\"\n\n    features = [\n      \"MATHJAX\"\n    ]\n\nExamples of using MathJax:\n\n.. code-block:: text\n\n    [TEXT]\n    STATEMENT: >>>\n    The following fragment will be rendered with MathJax:\n\n    .. raw:: latex html\n        $$\n        \\mathbf{\\underline{k}}_{\\text{a}} =\n        \\mathbf{\\underline{i}}_{\\text{a}} \\times\n        \\mathbf{\\underline{j}}_{\\text{a}}\n        $$\n    <<<\n\nSphinx-style syntax is also supported:\n\n.. code-block:: text\n\n    [TEXT]\n    STATEMENT: >>>\n    The following formula :math:`a^2 + b^2 = c^2` is rendered inline with the text.\n  \n    When using the math directive, the enclosing $$ are not required.\n\n    .. math::\n        \\mathbf{\\underline{k}}_{\\text{a}} =\n        \\mathbf{\\underline{i}}_{\\text{a}} \\times\n        \\mathbf{\\underline{j}}_{\\text{a}}\n    >>>\n\nSee [LINK: SDOC_UG_CONFIG_FEATURES] for the description of other features.\n","_LINK":"abdf406fe10847929dd7cb12a030456f"},"140":{"MID":"3e761d05262f44d29f48476c89ce3ca2","TITLE":"Export formats","_LINK":"8-Export-formats"},"141":{"MID":"110260c57dbb47da87662686bc73d6e7","TITLE":"HTML documentation tree by StrictDoc","_LINK":"8.1-HTML-documentation-tree-by-StrictDoc"},"142":{"MID":"a6bfffddf89045a1a7ecf55c9681fe14","STATEMENT":"This is a default export option supported by StrictDoc.\n\nThe following command creates an HTML export:\n\n.. code-block:: text\n\n    strictdoc export docs/ --formats=html --output-dir output-html\n\n.. admonition:: Example\n\n    This documentation is exported by StrictDoc to HTML:\n    `StrictDoc HTML export <https://strictdoc.readthedocs.io>`_\n\nThe options ``--formats=html`` and ``--output-dir output-html`` can be skipped because HTML export is a default export option and the default output folder is ``output``.\n\nStrictDoc does not detect .sdoc files in the output folder. This is based on the assumption that StrictDoc should not read anything in the output folder, which is intended for transient output artifacts.\n","_LINK":"a6bfffddf89045a1a7ecf55c9681fe14"},"143":{"MID":"dcc6a2bc11424cf2b114b25a7f65530d","UID":"SECTION-UG-Inbound-Links","TITLE":"Inbound Links","_LINK":"SECTION-UG-Inbound-Links"},"144":{"MID":"742831d32ca54791b53c1dbbbd070b55","STATEMENT":"To enable integration of StrictDoc with external tools such as bug trackers, project management systems, or wikis, StrictDoc supports stable inbound links to any node that has a ``UID``.\n\nTo create a stable link, click the \"Copy Stable Link\" button located in the top-left corner of a requirement or section block:\n\n.. image:: _assets/Feature_Copy_Stable_Link.png\n   :alt: copy a stable link\n   :class: image\n   :width: 400\n\nThe stable links have the form of a URL pointing to the project's main index page, followed by the UID (or MID) as an anchor. For example:\n\n``http://your-strictdoc-site/#SDOC_UG_HELLO_WORLD``\n\n``http://your-strictdoc-site/#742831d32ca54791b53c1dbbbd070b55``\n\nWhen such a link is opened, StrictDoc automatically resolves the UID (or MID) and forwards the user to the appropriate page and position within the project. This allows requirements to be moved between sections or files without breaking external references.\n","_LINK":"742831d32ca54791b53c1dbbbd070b55"},"145":{"MID":"1b41e7c036cf4e3282fa3d4e687bf95d","TITLE":"Standalone HTML pages","_LINK":"8.1.2-Standalone-HTML-pages"},"146":{"MID":"5674bfd50f31420baf56625d79d1ebff","STATEMENT":"The following command creates a normal HTML export with all pages having their\nassets embedded into HTML using Data URI / Base64. In the project's ``strictdoc.toml`` file, specify:\n\n.. code-block:: yaml\n\n    [project]\n\n    features = [\n      \"STANDALONE_DOCUMENT_SCREEN\"\n    ]\n\nThe generated document are self-contained HTML pages that can be shared via\nemail as single files. This option might be especially useful if you work with\na single document instead of a documentation tree with multiple documents.\n","_LINK":"5674bfd50f31420baf56625d79d1ebff"},"147":{"MID":"f6091bab49714c1fa72c2fbca12c970b","UID":"SECTION-UG-HTML-export-via-Sphinx","TITLE":"HTML export via Sphinx","_LINK":"SECTION-UG-HTML-export-via-Sphinx"},"148":{"MID":"bf8160f43703418db306785c48463123","STATEMENT":"The following command creates an RST export:\n\n.. code-block:: text\n\n    strictdoc export YourDoc.sdoc --formats=rst --output-dir output\n\nThe created RST files can be copied to a project created using Sphinx, see\n`Getting Started with Sphinx <https://docs.readthedocs.io/en/stable/intro/getting-started-with-sphinx.html>`_.\n\n.. code-block:: text\n\n    cp -v output/YourDoc.rst docs/sphinx/source/\n    cd docs/sphinx && make html\n\n`StrictDoc's own Sphinx/HTML documentation\n<https://strictdoc.readthedocs.io/en/latest/sphinx>`_\nis generated this way, see the Invoke task:\n`invoke sphinx <https://github.com/strictdoc-project/strictdoc/blob/5c94aab96da4ca21944774f44b2c88509be9636e/tasks.py#L48>`_.\n","_LINK":"bf8160f43703418db306785c48463123"},"149":{"MID":"c95a2b4c4fbd40fcbd92fe7f24c2cd91","UID":"SECTION-UG-PDF-export-via-Sphinx-LaTeX","TITLE":"PDF export via Sphinx/LaTeX","_LINK":"SECTION-UG-PDF-export-via-Sphinx-LaTeX"},"150":{"MID":"58595abe6ff148afbb45e2b6adc25110","STATEMENT":"\nThe following command creates an RST export:\n\n.. code-block:: text\n\n    strictdoc export YourDoc.sdoc --formats=rst --output-dir output\n\nThe created RST files can be copied to a project created using Sphinx, see\n`Getting Started with Sphinx <https://docs.readthedocs.io/en/stable/intro/getting-started-with-sphinx.html>`_.\n\n.. code-block:: text\n\n    cp -v output/YourDoc.rst docs/sphinx/source/\n    cd docs/sphinx && make pdf\n\n`StrictDoc's own Sphinx/PDF documentation\n<https://strictdoc.readthedocs.io/_/downloads/en/latest/pdf/>`_\nis generated this way, see the Invoke task:\n`invoke sphinx <https://github.com/strictdoc-project/strictdoc/blob/5c94aab96da4ca21944774f44b2c88509be9636e/tasks.py#L48>`_.\n","_LINK":"58595abe6ff148afbb45e2b6adc25110"},"151":{"MID":"e33a21323e2b48d692ed85cc56fd06e6","TITLE":"JSON","_LINK":"8.4-JSON"},"152":{"MID":"4d956edcd00846a98f59778dd7de9257","STATEMENT":"The following command creates a JSON export:\n\n.. code-block::\n\n    strictdoc export YourDoc.sdoc --formats=json --output-dir output/\n\nThe structure of the exported JSON mostly mirrors the structure of the underlying SDoc objects that represent the project tree, documents, sections, requirements, and other nodes.\n\nWhen the exported documents are included to other documents using the [LINK: UG_COMPOSABLE_DOCUMENTS] feature, the JSON export does not include the included documents but only the including documents with the included content. This can be changed by adding the ``--included-documents`` option.\n","_LINK":"4d956edcd00846a98f59778dd7de9257"},"153":{"MID":"40050f96b9a64f57bbb0ad01f4d37264","TITLE":"Manage project tree","_LINK":"9-Manage-project-tree"},"154":{"MID":"7f4b56d2a1104f539489bf7ddcdb1469","UID":"SECTION-UG-Automatic-assignment-of-requirements-UID","TITLE":"Automatic assignment of requirements UID","_LINK":"SECTION-UG-Automatic-assignment-of-requirements-UID"},"155":{"MID":"ed367ed0bc284d4d9318bf6c844c3e3e","STATEMENT":"To assign requirement UIDs automatically:\n\n.. code-block::\n\n    strictdoc manage auto-uid <path-to-project-tree>\n\nThe command goes over all requirements in the project tree and assigns missing UIDs automatically. The project tree is mutated in-place.\n\nBy default, the assignment happens based on the requirement mask ``REQ-``, so the requirements will get the UIDs of ``REQ-001``, ``REQ-002``, ...\n\nIf a document-level or a section-level requirement mask is provided, the UIDs will be generated based on that mask.\n\nA document-level requirement mask:\n\n.. code-block::\n\n    [DOCUMENT]\n    TITLE: Hello world doc\n    PREFIX: MYDOC-\n\nA section-level requirement mask:\n\n.. code-block::\n\n    [[SECTION]]\n    TITLE: Section 2.\n    PREFIX: LEVEL2-REQ-\n","_LINK":"ed367ed0bc284d4d9318bf6c844c3e3e"},"156":{"MID":"fa1cc31842144440a8ca310c7c0dedb2","UID":"SECTION-TRACEABILITY-REQS-TO-SOURCE-CODE","TITLE":"Traceability between requirements and source code","_LINK":"SECTION-TRACEABILITY-REQS-TO-SOURCE-CODE"},"157":{"MID":"4398b17f61ad4dd290e72d7888597f48","STATEMENT":"StrictDoc allows connecting requirements to source code files in two ways:\n\n1. Linking source files to requirements by adding special markers in the source code without modifying the requirements.\n2. Linking requirements to source files by adding relations in the requirements without altering the source code.\n\nThe advantage of the first approach is that requirements remain agnostic to the source code and implementation details. Special markers are added solely to the source files, creating traceability back to the requirements.\n\nThe benefit of the second approach is that traceability to source files is established without any modification to the source code. This can be useful in projects where adding markers to the source code is undesirable or not feasible.\n\nBoth options can be used independently or in combination, depending on the project setup and allocation of software components.\n\nTo activate the traceability to source files, configure the project config with a dedicated feature:\n\n.. code-block:: yaml\n\n    [project]\n\n    features = [\n      \"REQUIREMENT_TO_SOURCE_TRACEABILITY\"\n    ]\n\nBy default, StrictDoc looks for source files in a directory from which the ``strictdoc`` command is run. This can be changed by using the ``source_root_path`` project-level option.\n\nSee [LINK: SDOC_UG_OPTIONS_PROJECT_LEVEL] for more details about the project-level options.\n\nThe\n`strictdoc-examples <https://github.com/strictdoc-project/strictdoc-examples>`_\nrepository contains executable examples including the example of\nrequirements-to-source-code traceability.\n","_LINK":"4398b17f61ad4dd290e72d7888597f48"},"158":{"MID":"845ff817ad9d483796b9dc6016bfc3c7","UID":"SECTION-UG-Language-aware-parsing-of-source-code","TITLE":"Language-aware parsing of source code","_LINK":"SECTION-UG-Language-aware-parsing-of-source-code"},"159":{"MID":"07bfe045a4934dd29d97fdb8ac567b7c","STATEMENT":"For parsing source code and calculating traceability to requirements, StrictDoc uses a general parser that is agnostic of specific programming languages and their constructs, such as classes or functions. However, for languages with these constructs, establishing traceability to them can simplify the tracing process.\n\nAs an experimental option, StrictDoc supports parsing source files of selected programming languages to recognize language syntax, primarily enabling traceability of functions (in Python, C, and others), classes (in Python, C++, and others) and tests (Python, C++, Robot Framework) to requirements.\n\nTo activate language-aware traceability, configure the project with the following features:\n\n.. code:: toml\n\n    [project]\n\n    features = [\n      \"REQUIREMENT_TO_SOURCE_TRACEABILITY\",\n      \"SOURCE_FILE_LANGUAGE_PARSERS\"\n    ]\n\nCurrently, Python, C/C++ and Robot Framework parsers are implemented. Upcoming implementations include parsers for Rust, Bash, and more.\n","_LINK":"07bfe045a4934dd29d97fdb8ac567b7c"},"160":{"MID":"2cde4b7a4d42450c84c93989aeb4d53d","TITLE":"Linking source code to requirements","_LINK":"10.2-Linking-source-code-to-requirements"},"161":{"MID":"c787c538cc0a422fb2898b525ec1006d","STATEMENT":"To connect a source file to a requirement, a dedicated ``@relation`` marker must be added to the source file. Several marker types are supported, depending on the programming language. For example, the ``scope=class`` option is available for Python files but not for C files, as C does not support classes. The marker supports both () and {} for arguments.\n\n.. note::\n\n    For language-specific parsing of source code, e.g., Python and C, make sure to enable the corresponding option, see [LINK: SECTION-UG-Language-aware-parsing-of-source-code].\n\n.. warning::\n\n    The legacy ``@sdoc`` marker is still supported by StrictDoc but is deprecated. ``@relation`` is the new correct marker name.\n\nIt is also possible to use @relation markers and be compatible with Doxygen. See [LINK: SECTION-UG-Doxygen].\n\n**1\\) Linking a file to a requirement**\n\nThe marker must be added to the top comment of a file.\n\n.. code:: python\n\n    \"\"\"\n    This file implements ...\n\n    @relation(REQ-1, scope=file)\n    \"\"\"\n\n**2\\) Linking a class to a requirement (Python only)**\n\n.. code:: python\n\n    class Foo:\n        \"\"\"\n        This class implements ...\n\n        @relation(REQ-1, scope=class)\n        \"\"\"\n\n**3\\) Linking a function to a requirement (Python, C, and C++ only)**\n\n.. code:: python\n\n    class Foo:\n        def bar(self):\n            \"\"\"\n            This function implements ...\n\n            @relation(REQ-1, scope=function)\n            \"\"\"\n\nor\n\n.. code:: c\n\n    /**\n     * Some text.\n     *\n     * @relation(REQ-1, scope=function)\n     */\n    void hello_world(void) {\n        print(\"Hello, World\\n\");\n    }\n\n.. note::\n\n    For the C and C++ languages, if a ``@relation`` marker is included in a function declaration prototype (which is the most common practice), StrictDoc also creates a link between the requirement and the corresponding C function definition.\n\n**4\\) Linking a range to a requirement**\n\n.. code:: python\n\n    def foo():\n        # @relation(REQ-1, scope=range_start)\n        print(\"Hello, World!\")\n        # @relation(REQ-1, scope=range_end)\n\n**5\\) Linking a single line to a requirement**\n\n.. code:: python\n\n    def foo():\n        # @relation(REQ-1, scope=line)\n        print(\"Hello, World!\")\n","_LINK":"c787c538cc0a422fb2898b525ec1006d"},"162":{"MID":"a72c5eceff5c446c968c0e23bda3d933","TITLE":"Linking requirements to source code","_LINK":"10.3-Linking-requirements-to-source-code"},"163":{"MID":"1c06fb7b90114633801d177459f482b5","STATEMENT":"The linking of requirements to source files is arranged with a special RELATION type ``File``.\n\n.. note::\n\n    For language-specific parsing of source code, e.g., Python and C, make sure to enable the corresponding option, see [LINK: SECTION-UG-Language-aware-parsing-of-source-code].\n\n**1\\) Linking a requirement to a whole source file**\n\n.. code-block:: text\n\n    [REQUIREMENT]\n    UID: REQ-001\n    RELATIONS:\n    - TYPE: File\n      VALUE: file.py\n    TITLE: File reference\n    STATEMENT: This requirement references the file.\n\n**2\\) Linking a requirement to range in a source file**\n\n.. code-block:: text\n\n    [REQUIREMENT]\n    UID: REQ-002\n    TITLE: Range file reference\n    STATEMENT: This requirement references the file.py file.\n    RELATIONS:\n    - TYPE: File\n      VALUE: file.py\n      LINE_RANGE: 2, 4\n\n**3\\) Linking a requirement to a function in a source file**\n\n.. code-block:: text\n\n    [REQUIREMENT]\n    UID: REQ-002\n    TITLE: Function reference\n    STATEMENT: This requirement references a function in a file.\n    RELATIONS:\n    - TYPE: File\n      VALUE: file.py\n      FUNCTION: hello_world\n    - TYPE: File\n      VALUE: file.c\n      FUNCTION: Foo.hello_world_2\n\n.. note::\n\n    For linking to functions in classes, a class name has to be added in a format: ``<class name>.<function name>``. This is currently only supported for Python source files.\n\n**4\\) Linking a requirement to a class in a source file (Python only)**\n\n.. code-block:: text\n\n    [REQUIREMENT]\n    UID: REQ-002\n    TITLE: Class reference\n    STATEMENT: This requirement references a class in a file.\n    RELATIONS:\n    - TYPE: File\n      VALUE: file.py\n      CLASS: Foo\n","_LINK":"1c06fb7b90114633801d177459f482b5"},"164":{"MID":"38599400293a4b31a7cb6cb748f3dfe5","UID":"SECTION-UG-File-relations-roles","TITLE":"File relations roles","_LINK":"SECTION-UG-File-relations-roles"},"165":{"MID":"4f477cb2e0ca42aaac814042f795b982","STATEMENT":"StrictDoc supports relation roles for both SDoc nodes with ``TYPE: File`` and the source file markers.\n\nTo establish a forward link with a role from an SDoc node to a source file:\n\n.. code-block::\n\n    [REQUIREMENT]\n    UID: REQ-002\n    TITLE: Foo\n    STATEMENT: Bar\n    RELATIONS:\n    - TYPE: File\n      VALUE: file.py\n      ROLE: Test\n\nTo establish a backward link from a source file to an SDoc node:\n\n.. code-block::\n\n    /**\n     * Some text.\n     *\n     * @relation(REQ-1, scope=function, role=Implementation)\n     */\n    void hello_world(void) {\n        print(\"Hello, World\\n\");\n    }\n\n.. note::\n\n    See [LINK: SECTION-UG-Relation-roles] for a general description of the SDoc relations.\n","_LINK":"4f477cb2e0ca42aaac814042f795b982"},"166":{"MID":"c9da7df725564208971e7ee058ad8d73","UID":"SECTION-UG-Parsing-SDoc-source-nodes","TITLE":"Parsing SDoc nodes from source code comments (experimental, for C/C++ only)","_LINK":"SECTION-UG-Parsing-SDoc-source-nodes"},"167":{"MID":"72fe8c3f618042578850cfdf01868b6c","STATEMENT":".. note::\n\n    Insight: It is often practical to avoid maintaining test specifications and similar documents separately from the source code, since the information is closely related anyway.\n\nIn addition to recognizing the ``@relation(...)`` markers described above, StrictDoc can also read SDoc node fields when they are defined in source code comments.\n\n.. code-block::\n\n    /**\n     * Some text.\n     *\n     * @relation(REQ-1, scope=function)\n     *\n     * INTENTION: Intention...\n     *\n     * INPUT: This\n     *        is\n     *        a statement\n     *        \\n\\n\n     *        And this is the same statement's another paragraph.\n     *\n     * EXPECTED_RESULTS: This is a comment.\n     */\n    void test_case_1(void) {\n        print(\"hello world\\n\");\n    }\n\nTo enable SDoc node parsing, the corresponding source file must be registered in the ``strictdoc.toml`` configuration as follows:\n\n.. code-block::\n\n    source_nodes = [\n        { \"tests/\" = { uid = \"TEST_DOC\", node_type = \"TEST_SPEC\" } }\n    ]\n\nWith the above declaration, StrictDoc will locate the document with the specified UID and automatically populate it with parsed descriptions. This allows the user to start with a basic template of their choice, knowing that it will be filled with content extracted from the source files.\n\nA document template example:\n\n.. code-block::\n\n    [DOCUMENT]\n    MID: c2d4542d5f1741c88dfcb4f68ad7dcbd\n    TITLE: Test specification\n    UID: TEST_DOC\n","_LINK":"72fe8c3f618042578850cfdf01868b6c"},"168":{"MID":"31411ccbe80144868da8961ea2dd38bc","UID":"SECTION-UG-ReqIF-support","TITLE":"ReqIF support","_LINK":"SECTION-UG-ReqIF-support"},"169":{"MID":"b510d9337e604bfda366f2ec605f4c88","STATEMENT":"StrictDoc has an initial support of exporting to and importing from the ReqIF\nformat.\n\n.. note::\n\n    It is not possible to implement a single export/import procedure that works well for all ReqIF XML files produced by various requirements management tools.\n    The export/import workflow is therefore tool-specific.\n    See [LINK: SECTION-REQIF-DETAILS] for more details.\n\nSupported formats:\n\n- StrictDoc's \"native\" export/import between SDoc and ReqIF\n\nPlanned formats:\n\n- The format recommended by the\n  `ReqIF Implementation Guide <https://www.ps-ent-2023.de/fileadmin/prod-download/PSI_ImplementationGuide_ReqIF_V1-7.pdf>`_\n  that attempts to harmonize the developments of ReqIF by requirements\n  management tools.\n","_LINK":"b510d9337e604bfda366f2ec605f4c88"},"170":{"MID":"81f3e7ff2e584f789e0076d0ab560d45","TITLE":"Import flow (ReqIF -> SDoc)","_LINK":"11.1-Import-flow-ReqIF-SDoc"},"171":{"MID":"079ed6d7ec3f4040b59efce7ccd37267","STATEMENT":".. code-block:: text\n\n    strictdoc import reqif sdoc input.reqif output.sdoc\n\nThe command does the following:\n\n1. The ReqIF is parsed from XML file to ReqIF in-memory model using the ``reqif``\n   library.\n\n2. The ReqIF in-memory model is converted to SDoc in-memory model. In this case,\n   ``sdoc`` indicates that the native ReqIF-to-SDoc conversion procedure must be\n   used.\n\n3. The SDoc in-memory model is written to an .sdoc file.\n","_LINK":"079ed6d7ec3f4040b59efce7ccd37267"},"172":{"MID":"7d1678af20a84f5d8263061f36332773","TITLE":"Export flow (SDoc -> ReqIF)","_LINK":"11.2-Export-flow-SDoc-ReqIF"},"173":{"MID":"94641cac6b9748bfa2de8648ff197584","STATEMENT":".. code-block:: text\n\n    strictdoc export --formats=reqif-sdoc %S/input.sdoc\n\nThe command does the following:\n\n1. The SDoc file is parsed to an SDoc in-memory model.\n2. The SDoc in-memory model is converted to a ReqIF in-memory model using the\n   native SDoc-to-ReqIF conversion procedure as indicated by the ``reqif-sdoc``\n   argument.\n3. The ReqIF in-memory model is unparsed a to ReqIF XML file using ``reqif``\n   library.\n","_LINK":"94641cac6b9748bfa2de8648ff197584"},"174":{"MID":"c87ecf181d564e44ad1981558bf2cab0","UID":"SECTION-UG-ReqIF-options","TITLE":"ReqIF options","_LINK":"SECTION-UG-ReqIF-options"},"175":{"MID":"57dd1fb10ba64e2f8e0b75baf772b634","STATEMENT":"The following options are available for ReqIF export/import commands.\n\n``--reqif-multiline-is-xhtml`` This option makes StrictDoc to export all multiline fields as XHTML attributes, not as STRING (the default behavior). This is useful for interfacing with tools, such as Polarion, which assume XHTML as the primary format for writing multiline text.\n\n``--reqif-import-markup={RST,HTML,Text}`` This option makes StrictDoc import ReqIF to SDoc documents, setting their ``MARKUP`` option to the markup value provided. The default value is RST which is the default markup of StrictDoc. When working with other ReqIF tools, very often this option can be set to HTML. It is likely that with this option, the previous option ``--reqif-multiline-is-xhtml`` should be enabled as well.\n\n``--reqif-enable-mid`` This option requires the machine identifiers option to be enabled (see [LINK: SECTION-UG-Machine-identifiers-MID]) and allows all nodes machine identifiers (MID) exported as ReqIF IDENTIFIERs. This option can be useful when the MID/IDENTIFIER stability of document, section, and requirement nodes is critical when doing iterative export/import roundtrips.\n\nAll options can be also specified in a project's TOML file as follows:\n\n.. code-block::\n\n    [project]\n\n    [reqif]\n    multiline_is_xhtml = true\n    import_markup = \"HTML\"\n    enable_mid = true\n","_LINK":"57dd1fb10ba64e2f8e0b75baf772b634"},"176":{"MID":"95643ee2edb84ad8b86f9cf2bb74aaae","UID":"SECTION-REQIF-DETAILS","TITLE":"ReqIF implementation details","_LINK":"SECTION-REQIF-DETAILS"},"177":{"MID":"edd5c3bf902e48deaee3248d12087a75","STATEMENT":"The ReqIF is a `standard <https://www.omg.org/spec/ReqIF>`_ which is\nmaintained by Object Management Group (OMG). One important feature of the\nReqIF standard is that it requires a fixed XML structure but still leaves\ncertain details open to the implementation by the ReqIF and requirements\nmanagement tools developers. Specifically, each tool may use it own field\nnames and structure to represent requirements and sections/chapters.\n\nIn order to accommodate for the differences between ReqIF files produced by\nvarious tools, the ReqIF processing is split into two layers:\n\n1) Parsing ReqIF from ``.reqif`` XML files into ReqIF in-memory tree of Python\nobjects as well as unparsing the ReqIF in-memory tree back to ReqIF XML files is\nextracted to a separate library:\n`strictdoc-project/reqif <https://github.com/strictdoc-project/reqif>`_.\n\n2) Converting between in-memory trees of SDoc and ReqIF. This layer is part of\nStrictDoc.\n\nFor further overview of the ReqIF format and the ``reqif`` library's\nimplementation details, refer to\n`strictdoc-project/reqif <https://github.com/strictdoc-project/reqif>`_'s\ndocumentation.\n","_LINK":"edd5c3bf902e48deaee3248d12087a75"},"178":{"MID":"5ad8e72bdcfb4ac1b942468af9180657","TITLE":"Excel support","_LINK":"12-Excel-support"},"179":{"MID":"65c1657a8fb04179960fca4ece265b18","STATEMENT":"StrictDoc provides a support for Excel XLS/XLSX on input and Excel XLSX on output.\n\nOn input, the headers of sheet1 are used to put together a custom grammar and\nthe requirements are imported one row per requirement. A best effort is made by\nthe importer to recognize names of headers and map these to strictdoc\nrequirement fields.\n\n.. note::\n\n    A roundtrip \"SDoc -> Excel -> SDoc\" is not yet supported.\n","_LINK":"65c1657a8fb04179960fca4ece265b18"},"180":{"MID":"4a34ea5da82b4e469cf5a87178f69536","TITLE":"Import flow (Excel XLS/XLSX -> SDoc)","_LINK":"12.1-Import-flow-Excel-XLS-XLSX-SDoc"},"181":{"MID":"b01355b5a6d54409a0c7a684376a5278","STATEMENT":".. code-block:: text\n\n    strictdoc import excel basic input.xls output.sdoc\n\nThe command does the following:\n\n1. The Excel file is parsed to SDoc in-memory model using the ``xlrd``\n   library for XLS or the ``openpyxl`` library for XLSX files.\n\n2. The SDoc in-memory model is written to an .sdoc file.\n","_LINK":"b01355b5a6d54409a0c7a684376a5278"},"182":{"MID":"1cbdef9ee67b4392a3bdb64276e90e36","TITLE":"Export flow (SDoc -> Excel XLSX)","_LINK":"12.2-Export-flow-SDoc-Excel-XLSX"},"183":{"MID":"14161a9fa81d427f8a5a21367359339e","STATEMENT":".. code-block:: text\n\n    strictdoc export --formats=excel --output-dir=Output input.sdoc\n\nThe command does the following:\n\n1. The SDoc file is parsed to an SDoc in-memory model.\n\n2. The SDoc in-memory model is converted to an Excel XLSX file using\n   the ``XlsWriter`` library.\n\nFor exporting only selected fields:\n\n.. code-block:: text\n\n    strictdoc export --formats=excel --fields=UID,STATUS --output-dir=Output input.sdoc\n\nFor exporting a folder with multiple SDoc files, specify a path to a folder or ``.`` for a current directory:\n\n.. code-block:: text\n\n    strictdoc export --formats=excel .\n\nIf the ``output-dir`` option is not provided, the ``output/`` folder is the default value.\n","_LINK":"14161a9fa81d427f8a5a21367359339e"},"184":{"MID":"17a8adb92c8d4e7992e869355e73912d","TITLE":"Options","_LINK":"13-Options"},"185":{"MID":"05f82bdf26f141738d2f511133633a2d","UID":"SDOC_UG_OPTIONS_PROJECT_LEVEL","TITLE":"Project-level options","_LINK":"SDOC_UG_OPTIONS_PROJECT_LEVEL"},"186":{"MID":"6449098df878484fbe8aed8a8b0e9a97","STATEMENT":"StrictDoc supports reading configuration from a TOML file. The file must be called ``strictdoc.toml`` and shall be stored in the same folder which is provided as a path to the SDoc documents.\n\nFor example, ``strictdoc export .`` will make StrictDoc recognize the config file, if it is stored under the current directory.\n","_LINK":"6449098df878484fbe8aed8a8b0e9a97"},"187":{"MID":"3671119d6a304d0b80c63f7e31faee88","TITLE":"Project title","_LINK":"13.1.1-Project-title"},"188":{"MID":"12501275599f4d7a954892e1a56778b9","STATEMENT":"This option specifies a project title.\n\n.. code-block::\n\n    [project]\n    title = \"StrictDoc Documentation\"\n","_LINK":"12501275599f4d7a954892e1a56778b9"},"189":{"MID":"22741629bf054d6784faf541393e90d0","TITLE":"Path to assets","_LINK":"13.1.2-Path-to-assets"},"190":{"MID":"7d1102cda98c4ea18c6e646b73511097","STATEMENT":"By default, StrictDoc copies its CSS/JS and other asset files to a folder ``_static`` in the HTML output directory.\n\nSometimes, it is desirable to change the folder name. For example, the GitHub Pages static website engine expects the assets to be found in the ``assets`` folder.\n\nThe ``html_assets_strictdoc_dir`` allows changing the assets folder name:\n\n.. code-block::\n\n    [project]\n    html_assets_strictdoc_dir = \"assets\"\n","_LINK":"7d1102cda98c4ea18c6e646b73511097"},"191":{"MID":"9fbabb0a6d0e46648f58ba7245776bd9","UID":"SECTION-UG-Path-to-cache-dir","TITLE":"Path to cache dir","_LINK":"SECTION-UG-Path-to-cache-dir"},"192":{"MID":"e94e9762cc0e4e1eafe57d0d9e03eb5b","STATEMENT":"StrictDoc uses caching when reading and writing artifacts. By default, all cache files are stored in the output/``_cache`` directory. If a custom output directory is specified, the cache will be placed in the ``_cache`` subdirectory within that output directory.\n\nIt is possible to override the default cache location using the ``cache_dir`` option in the configuration file. For example, setting it to ``./output/build`` will store cache files there.\n\n.. code:: toml\n\n    [project]\n    cache_dir = \"./strictdoc_cache\"\n\nOne reserved value for this parameter is ``$TMPDIR`` which makes StrictDoc generate temporary files in the OS temporary directory under ``strictdoc_cache`` folder.\n\nSee [LINK: SECTION-DD-Caching-artifacts] for an overview of how caching works.\n","_LINK":"e94e9762cc0e4e1eafe57d0d9e03eb5b"},"193":{"MID":"2c54380e174e42b6ba8eff74173ceb0f","TITLE":"Path to source root","_LINK":"13.1.4-Path-to-source-root"},"194":{"MID":"be42ecf5c8a84fc3bca0b73ea50647de","STATEMENT":"When the ``REQUIREMENT_TO_SOURCE_TRACEABILITY`` feature is activated, StrictDoc looks for source files in the directory from which the ``strictdoc`` program is run. This can be changed with the ``source_root_path`` option.\n\n.. code-block::\n\n    [project]\n\n    features = [\n      \"REQUIREMENT_TO_SOURCE_TRACEABILITY\",\n    ]\n\n    source_root_path = \"source_root/\"\n\nThe ``source_root_path`` option supports relative paths, e.g. ``../source_root/``.\n","_LINK":"be42ecf5c8a84fc3bca0b73ea50647de"},"195":{"MID":"499fa0144cbd48c687ba0d5f9f7cb846","TITLE":"Path to custom HTML2PDF template","_LINK":"13.1.5-Path-to-custom-HTML2PDF-template"},"196":{"MID":"225dc4d22c084a67ae049fca1098bc1a","STATEMENT":"StrictDoc uses an internal default template when exporting documents in PDF format.\n\nIf the front page, header, or footer needs to be customised, it is possible to provide a custom template with the `html2pdf_template` option.\n\n.. code-block::\n\n    [project]\n    html2pdf_template = \"assets/template/index.jinja\"\n\n    features = [\n       \"HTML2PDF\",\n    ]\n\nWhen specified, the provided template will override the internal default template. The path can be absolute or relative to the project root.\n\n.. note ::\n\n   An example template can be found `here <https://github.com/strictdoc-project/strictdoc/tree/main/tests/end2end/screens/pdf/view_pdf_document_custom_template/html2pdf_template>`__\n","_LINK":"225dc4d22c084a67ae049fca1098bc1a"},"197":{"MID":"593a2abbdaa5470988103c70e87c4cfc","TITLE":"Include/exclude document paths","_LINK":"13.1.6-Include-exclude-document-paths"},"198":{"MID":"27e5981c451d4ad4938ab622e3cf0be2","STATEMENT":"Use ``include_doc_paths`` and ``exclude_doc_paths`` paths to whitelist/blacklist paths to SDoc documents.\n\nIn the following example, StrictDoc will look for all files in the input project directory, except all documents in the ``tests/`` folder.\n\n.. code-block:: yaml\n\n    [project]\n\n    include_doc_paths = [\n      \"**\"\n    ]\n\n    exclude_doc_paths = [\n      \"tests/**\"\n    ]\n\nThe behavior of wildcard symbols ``*`` and ``**`` is as follows:\n\n- The ``*`` expands to any combination of symbols that represent a valid file name, excluding the forward and backward slashes, which limits this wildcard to only match a single directory.\n\n- The ``**`` expands to any combination of valid file name symbols, possibly separated by any number of slashes.\n\n.. list-table:: Examples of possible filter strings\n   :widths: 20 80\n   :header-rows: 1\n\n   * - **Example**\n     - **Description**\n\n   * - ``docs/*`` or ``docs/*.sdoc``\n     - Match all documents found in the ``docs/`` folder but not in its subdirectories.\n\n   * - ``docs/**``\n     - Match all documents found in the ``docs/`` folder and all its subdirectories.\n   * - ``**/docs/**``\n     - Match all documents found in the ``docs/`` folder and all its subdirectories. The ``docs/`` folder can be a top-level folder or at any level of depth.\n","_LINK":"27e5981c451d4ad4938ab622e3cf0be2"},"199":{"MID":"7284798d60a340c2a6369c651d1ee6be","TITLE":"Include/exclude source files paths","_LINK":"13.1.7-Include-exclude-source-files-paths"},"200":{"MID":"3908f98fab5c47668ba752d0e93033ab","STATEMENT":"Use ``include_source_paths`` and ``exclude_source_paths`` to whitelist/blacklist paths to source files when the traceability between requirements and source files feature is enabled.\n\n.. code-block:: yaml\n\n    [project]\n\n    features = [\n      \"REQUIREMENT_TO_SOURCE_TRACEABILITY\"\n    ]\n\n    include_source_paths = [\n      \"src/**\"\n    ]\n\n    exclude_source_paths = [\n      \"src/tests/**\"\n    ]\n\nThe behavior of the wildcards is the same as for the ``include_doc_paths/exclude_doc_paths`` options.\n","_LINK":"3908f98fab5c47668ba752d0e93033ab"},"201":{"MID":"b355fc6730d14eb1892ac6a25e47bf59","UID":"SDOC_UG_CONFIG_FEATURES","TITLE":"Selecting features","_LINK":"SDOC_UG_CONFIG_FEATURES"},"202":{"MID":"f43d8170c44b4d70ada2816fe71caf07","STATEMENT":"StrictDoc has optional features and features that are developed with a lower priority.\n\nThe feature of exporting the SDoc documents to HTML document view is a core feature and is always enabled. The option ``features`` allows selecting which additional features should be activated or not.\n\nThe following is an example of the default configuration. The same features are active/inactive when the option ``features`` is not specified.\n\n.. code-block:: yaml\n\n    [project]\n    title = \"StrictDoc Documentation\"\n\n    features = [\n      # Stable features that are enabled by default.\n      \"TABLE_SCREEN\",\n      \"TRACEABILITY_SCREEN\",\n      \"DEEP_TRACEABILITY_SCREEN\",\n\n      # Stable features that are disabled by default.\n      # \"MATHJAX\",\n\n      # Experimental features are disabled by default.\n      # \"REQIF\",\n      # \"HTML2PDF\",\n      # \"PROJECT_STATISTICS_SCREEN\",\n      # \"STANDALONE_DOCUMENT_SCREEN\",\n      # \"TRACEABILITY_MATRIX_SCREEN\",\n      # \"REQUIREMENT_TO_SOURCE_TRACEABILITY\"\n    ]\n\nSee [LINK: SDOC_UG_EXPERIMENTAL_FEATURES] where the experimental features are outlined.\n","_LINK":"f43d8170c44b4d70ada2816fe71caf07"},"203":{"MID":"39f7752d17c848e4ae9acd53eaf8048b","TITLE":"Enable all features","_LINK":"13.1.8.1-Enable-all-features"},"204":{"MID":"d33880e1740d4d0892852cc8c425f66f","STATEMENT":"To select all available features, stable and experimental, specify ``ALL_FEATURES``.\n\n.. code-block::\n\n    [project]\n\n    features = [\n      \"ALL_FEATURES\"\n    ]\n\nThe advantage of this option is that all feature toggles become activated, and all extra screens and buttons are generated and visible.\n\nThe disadvantage is that StrictDoc spends more time rendering extra screens that might not be needed by a particular user.\n\nIf ``ALL_FEATURES`` is present, all features are activated, regardless of any other features that are also specified or not.\n","_LINK":"d33880e1740d4d0892852cc8c425f66f"},"205":{"MID":"35173b0d735a4d4f8c06256d1d4e1f89","TITLE":"Disable all features","_LINK":"13.1.8.2-Disable-all-features"},"206":{"MID":"9cf2ac683b7a4e939286146ef00631c1","STATEMENT":"To disable all features, specify the ``features`` option but leave it empty:\n\n.. code-block:: yaml\n\n    [project]\n\n    features = [\n      # Nothing specified.\n    ]\n","_LINK":"9cf2ac683b7a4e939286146ef00631c1"},"207":{"MID":"fc0da01a4a114ddd888a90fd6a29e456","TITLE":"Server configuration","_LINK":"13.1.9-Server-configuration"},"208":{"MID":"c520cefdfe3e47ccb1a0ada95ee5c4f0","UID":"SECTION-UG-Host-and-port","TITLE":"Host and port","_LINK":"SECTION-UG-Host-and-port"},"209":{"MID":"9943131c688c400b99e2db9ec4854480","STATEMENT":"By default, StrictDoc runs the server on ``127.0.0.1:5111``.\n\nUse the ``[server]`` section to configure the host and port as follows.\n\n.. code-block:: yaml\n\n    [project]\n    title = 'Test project with a host \"localhost\" and a port 5000'\n\n    [server]\n    host = \"localhost\"\n    port = 5000\n","_LINK":"9943131c688c400b99e2db9ec4854480"},"210":{"MID":"cc720b525adf46849f6117c18c97905e","TITLE":"Command-line interface options","_LINK":"13.2-Command-line-interface-options"},"211":{"MID":"d69f1fe42c754a34a5f360f47d4b4a5b","TITLE":"Project title","_LINK":"13.2.1-Project-title"},"212":{"MID":"81d8e1beb5904cb78dfde2712ff3f311","STATEMENT":"By default, StrictDoc generates a project tree with a project title\n\"Untitled Project\". To specify the project title use the option\n``--project-title``.\n\n.. code-block:: text\n\n    strictdoc export --project-title \"My Project\" .\n","_LINK":"81d8e1beb5904cb78dfde2712ff3f311"},"213":{"MID":"6ea7b264c142461398e9c8711cfec8d3","TITLE":"Parallelization","_LINK":"13.2.2-Parallelization"},"214":{"MID":"f8ff07833ff942dfabdad2412350cd0c","STATEMENT":"To improve performance for the large document trees (1000+ requirements),\nStrictDoc parallelizes reading and generation of the documents using\nprocess-based parallelization: ``multiprocessing.Pool`` and\n``multiprocessing.Queue``.\n\nParallelization improves performance but can also complicate understanding\nbehavior of the code if something goes wrong.\n\nTo disable parallelization use the ``--no-parallelization`` option:\n\n.. code-block:: text\n\n    strictdoc export --no-parallelization docs/\n\n.. note::\n\n    Currently, only the generation of HTML documents is parallelized, so this option will only have effect on the HTML export.\n    All other export options are run from the main thread.\n    Reading of the SDoc documents is parallelized for all export options and is disabled with this option as well.\n","_LINK":"f8ff07833ff942dfabdad2412350cd0c"},"215":{"MID":"8030a2ceb5014b9881529ef39d3c1fb7","TITLE":"Python API","_LINK":"14-Python-API"},"216":{"MID":"4504bffd6ced4aa78848ee9e03fdd4b7","STATEMENT":"At present, StrictDoc lacks a documented public Python API. Nevertheless, users can leverage StrictDoc's internal API to enhance existing functions or create custom import, export, and analysis tools. The architecture of StrictDoc is highly modular, so for each functional block there shall always be a dedicated Python class with a public interface, see [LINK: SECTION-DD-High-level-architecture].\n\nOne good example is the ``SDWriter`` class, which exercises the complete export of the Python data objects to the SDoc format. Since, the SDoc format is the primary data format of StrictDoc, the SDWriter is quite feature-rich in what it does and covers. The ``RSTWriter`` is less powerful because it does not reflect the full data model, but is probably worth a look as well.\n\nThe ``strictdoc/backend/reqif`` folder contains exporter/importer routines for the ReqIF format. There, the core classes from the Python data model, e.g. SDocNode, Section, Document, Grammar, etc. are created or read from and to the ReqIF format.\n\nThe ``ManageAutoUIDCommand`` class features a good use of all APIs that one may need to read/update/write back a SDoc document tree:\n\n- The ``TraceabilityIndex`` is created from a project config. The traceability index is the main class for storing the whole traceability graph in Python objects. It has plenty of methods for reading and writing things from the graph.\n- The ``DocumentUIDAnalyzer`` is an example of how the objects are manipulated in memory.\n- And finally the final sequence writes the mutated traceability graph back to files using ``SDWriter``.\n\nFor any custom Python API request, for example, a need to do a more advanced data analysis on SDoc data, open a GitHub issue and your specific issue will be handled.\n","_LINK":"4504bffd6ced4aa78848ee9e03fdd4b7"},"217":{"MID":"cb5115ac9a6d47a198ceac81c9d49b60","UID":"UG_PORTABILITY_CONSIDERATIONS","TITLE":"Portability considerations","_LINK":"UG_PORTABILITY_CONSIDERATIONS"},"218":{"MID":"e15260727be84ce394386a4f95c627ae","STATEMENT":".. note::\n\n    **TL;DR**: The following topic of portability becomes relevant if documentation created with StrictDoc has to be exported to another tool and especially if the other tool has to export the content back to StrictDoc. Writing custom export/import generators may be needed to enable a full interoperability when the less portable features are used.\n\nThe portability of documentation, particularly when it involves requirements, shares similarities to the portability of programming languages. StrictDoc has several features that are useful but they can also limit the interoperability of the documentation/requirements when the content is exchanged with other tools.\n\nThe following is a list of features that are considered less portable when it comes to interfacing with other tools through the existing export/import interfaces:\n\n- [LINK: UG_COMPOSABLE_DOCUMENTS]. Composing documents from other documents is a useful feature but it may not be directly supported by other tools. When exporting to JSON or ReqIF, StrictDoc by default does not export included documents but only the including documents.\n- [LINK: UG_COMPOSITE_NODE]. A Composite Requirement is a useful concept which is natively supported by StrictDoc but it may be supported less by other tools.\n- [LINK: UG_NODE_WITHOUT_A_LEVEL]. Table of contents hierarchy where some nodes do not have TOC levels (or have custom TOC levels) can cause problems when exporting/importing documentation content if an interfacing tool does not support custom TOC nodes.\n\n.. note::\n\n    It is easier to extend StrictDoc to produce a format supported by a given tool than it is to make the other tool export a 100%-identical content back to StrictDoc. If there is a need to interface with a tool X and something is missing in StrictDoc, please reach out to the developers (see [LINK: SDOC_UG_CONTACT]).\n","_LINK":"e15260727be84ce394386a4f95c627ae"},"219":{"MID":"d49d64a25f654d0c9b39023e87e5fa19","TITLE":"Interoperability with other tools","_LINK":"16-Interoperability-with-other-tools"},"220":{"MID":"dc83f93c820944b6b04c0923a7ad7e69","UID":"SECTION-UG-Doxygen","TITLE":"Doxygen","_LINK":"SECTION-UG-Doxygen"},"221":{"MID":"a8664547ac7e41399d7d8d263869abc6","STATEMENT":"HTML documentation generated by StrictDoc can be integrated with Doxygen documentation.\n\nDoxygen includes a ``TAGFILE`` feature that allows linking to external documentation. This tagfile is in XML format and looks like this:\n\n.. code::\n\n    <?xml version='1.0' encoding='UTF-8' standalone='yes' ?>\n    <tagfile doxygen_version=\"1.9.8\">\n      <compound kind=\"file\">\n        <name>REQ-1</name>\n        <filename>strictdocfolder/mystrictdocreq.html#REQ-1</filename>\n      </compound>\n    </tagfile>\n\nStrictDoc automatically generates a Doxygen tagfile containing the requirements using the export command:\n\n.. code::\n\n    strictdoc export . --formats=html,doxygen\n\nWhen a requirement is referenced in a source code comment block with the command ``\\ref REQ-1``, Doxygen includes a link to the corresponding ``<filename/>`` in the output.\n\nThe location of the StrictDoc export can be specified in the TAGFILE field, either as a relative path, e.g., ``TAGFILES = strictdoc.tag=../../strictdoc``, or as an absolute URL, e.g., ``TAGFILES = strictdoc.tag=http://example.com/strictdoc``.\n\nTo make the StrictDoc @relation keyword work with Doxygen, an alias has to be created:\n\n.. code::\n\n    ALIASES  += relation{2}=\"\\ref \\1\"\n\nresulting in the following syntax to be recognized by Doxygen: ``@relation{REQ-1, scope=function}``.\n\nRelevant Doxygen documentation:\n\n- `Linking to external documentation <https://www.doxygen.nl/manual/external.html>`_\n- `TAGFILES <https://www.doxygen.nl/manual/config.html#cfg_tagfiles>`_\n","_LINK":"a8664547ac7e41399d7d8d263869abc6"},"222":{"MID":"1296f265cdd948d8a5c02fbfc1cc4065","TITLE":"Valispace","_LINK":"16.2-Valispace"},"223":{"MID":"5fe39dedfa4640d2bd7127ff23b0e3de","STATEMENT":"Valispace provides a Python API, including an example script for exporting all project requirements in JSON format. See `Examples: Get a complete project requirements tree <https://github.com/valispace/ValispacePythonAPI/pull/22>`_.\n\nThe ``GetAllProjectRequirementsTree.py`` script can be used to create a converter that generates SDoc text files customized to the specifics of the project.\n","_LINK":"5fe39dedfa4640d2bd7127ff23b0e3de"},"224":{"MID":"e3596b4fb0804ac28a8bb3d06bd81953","UID":"SDOC_UG_EXPERIMENTAL_FEATURES","TITLE":"Experimental features","_LINK":"SDOC_UG_EXPERIMENTAL_FEATURES"},"225":{"MID":"5b400736aec54789b2ed3ebcffcf961e","STATEMENT":"At any point in time, StrictDoc supports features that are still experimental. These features are either not fully developed or their testing has not been completed yet.\n\nA feature is considered stable when all its known edge cases have been covered and enough users report that they have used and tested this feature.\n\nSee also [LINK: SDOC_UG_CONFIG_FEATURES] for general instructions.\n","_LINK":"5b400736aec54789b2ed3ebcffcf961e"},"226":{"MID":"72fdb23051184714ab32e22859504a77","UID":"SECTION-UG-Search-and-filtering","TITLE":"Search and filtering","_LINK":"SECTION-UG-Search-and-filtering"},"227":{"MID":"de584af947a445e5bcc782bab6a93baf","STATEMENT":"StrictDoc supports search and filtering of document content. However, this feature has not been extensively tested and is hidden behind a feature flag. To activate it, enable the corresponding setting in the ``strictdoc.toml`` configuration file:\n\n.. code-block::\n\n    [project]\n\n    features = [\n      \"SEARCH\"\n    ]\n\nThe web interface includes the Search screen, designed for conducting queries against a document tree. The command-line interface supports filtering of requirements and sections through the ``export`` commands.\n","_LINK":"de584af947a445e5bcc782bab6a93baf"},"228":{"MID":"f2d766a310ef41959b0c6d581d042420","TITLE":"Query engine","_LINK":"17.1.1-Query-engine"},"229":{"MID":"29ffc3e91d8045589b0837f647286128","STATEMENT":"The syntax of the search query is inspired by Python, utilizing a fixed grammar that converts search queries into corresponding Python expressions.\n\nImportant rules:\n\n- Every query component shall start with ``node.``.\n- ``and`` and ``or`` expressions must be grouped using round brackets.\n- Only double quotes are accepted for strings.\n\n.. list-table:: Query examples\n   :widths: 50 50\n   :header-rows: 1\n\n   * - **Query**\n     - **Description**\n\n   * - ``node.is_requirement``\n     - Find all requirements.\n\n   * - ``node.is_section``\n     - Find all sections.\n\n   * - ``node.is_root``\n     - Find all requirements or sections from documents with ``ROOT: True``. See [LINK: SECTION-UG-Document] for the description of the ``ROOT`` option.\n\n   * - ``(node.is_requirement and \"System\" in node[\"TITLE\"])``\n     - Find all requirements with a TITLE that equals to \"System\".\n\n   * - ``(node.is_requirement and node.has_parent_requirements)``\n     - Find all requirements which have parent requirements.\n\n   * - ``(node.is_requirement and node.has_child_requirements)``\n     - Find all requirements which have child requirements.\n","_LINK":"29ffc3e91d8045589b0837f647286128"},"230":{"MID":"2da071ad45054d168a5ae2982266fb77","TITLE":"Filtering content","_LINK":"17.1.2-Filtering-content"},"231":{"MID":"d52d86750ad54ce1b3263ebb092451c0","STATEMENT":"Both ``export`` command-line interface commands support filtering documentation content with ``--filter-requirements`` and ``--filter-sections`` options.\n\nBoth options are based on the Query Engine, so the same rules that are valid for Search also apply for filtering. When a filter is applied, only the whitelisted requirements/sections will be exported.\n\nExample:\n\n.. code-block::\n\n    strictdoc export . --filter-requirements '\"System\" in node[\"TITLE\"]'\n","_LINK":"d52d86750ad54ce1b3263ebb092451c0"},"232":{"MID":"241afbf6b7af40189eec8054d0d0201c","UID":"SECTION-UG-Project-statistics-screen","TITLE":"Project statistics screen","_LINK":"SECTION-UG-Project-statistics-screen"},"233":{"MID":"2fefc893de83432fa852886cc3a05fea","STATEMENT":"The project statistics screen displays useful information about a documentation project as well as some requirements-based statistics.\n\nTo activate the project statistics screen, add/edit the ``strictdoc.toml`` config file in the root of your repository with documentation content.\n\n.. code::\n\n    [project]\n    title = \"My project\"\n\n    features = [\n      \"PROJECT_STATISTICS_SCREEN\"\n    ]\n\nThis feature is not enabled by default because it has not undergone sufficient testing by users. The particular aspect requiring extensive testing is related to StrictDoc's interaction with Git to retrieve git commit information. There remain certain unexamined edge cases and portability concerns, e.g., testing on Windows, testing projects that have no Git version control, calling StrictDoc outside of a project's root folder.\n","_LINK":"2fefc893de83432fa852886cc3a05fea"},"234":{"MID":"aa84a8c59a904c9dbb1052b1bff169bf","TITLE":"User-provided custom statistics generator (experimental)","_LINK":"17.2.1-User-provided-custom-statistics-generator-experimental"},"235":{"MID":"7cf15de69efc46a5abe6b6fc786e4b71","STATEMENT":"StrictDoc allows users to write their own custom statistics generators.\n\nTo connect a custom generator, add it to the ``strictdoc.toml`` configuration file as follows:\n\n.. code-block::\n\n    [project]\n    title = \"StrictDoc Documentation\"\n\n    statistics_generator = \"custom_statistics.CustomStatisticsGenerator\"\n\nThe path specified by the config variable must be a valid path to a Python file, and the last component must reference an existing statistics generator class. StrictDoc automatically adds the document input path to its Python search paths, so the specified path must be discoverable relative to the location where the SDoc documents are read.\n\nA statistics generator is a class that iterates over the traceability index, collects and calculates relevant statistics about the traceability graph, and stores the results as a list of ``Metric`` and ``MetricSection`` objects.\n\n.. note::\n\n    StrictDoc’s built-in statistics generator is a good example of how to implement a custom one. See `SDocStatisticsGenerator <https://github.com/strictdoc-project/strictdoc/blob/6f57747e6a1b5b3cb29c0047f9df5959da64ebb1/docs/sdoc_project_statistics.py>`_.\n","_LINK":"7cf15de69efc46a5abe6b6fc786e4b71"},"236":{"MID":"aa7ebc36cd2947ac9aa293d6c76d8848","UID":"SECTION-UG-Diff-changelog-screen","TITLE":"Diff/changelog screen","_LINK":"SECTION-UG-Diff-changelog-screen"},"237":{"MID":"131a7392a33f4225a62539dd173a920b","STATEMENT":"The \"Git Diff/Changelog\" experimental feature in StrictDoc allows users to track changes between different versions of requirement documents. This feature provides a visual diff by highlighting what content has been added, removed, or modified within the SDoc files, using a style similar to Git diffs. It helps in maintaining version history, ensuring that changes are traceable, and supports auditing by showing how requirements evolve over time.\n\nTo activate the Diff/Changelog screen, add/edit the strictdoc.toml config file in the root of your repository with documentation content.\n\n.. code:: toml\n\n    [project]\n    title = \"My project\"\n\n    features = [\n      \"DIFF\"\n    ]\n\n.. admonition:: Robust MID-based change tracking\n    :class: note\n\n    For optimal results when using the Diff/Changelog feature in a StrictDoc-based project, it is strongly recommended to enable Machine Identifiers (MIDs) for all project artifacts, such as TEXT, REQUIREMENT, etc.\n    Without MIDs, StrictDoc cannot ensure accurate change tracking. If a node lacks an MID, StrictDoc is unable to reliably detect whether it has been modified or relocated in subsequent versions of the documentation tree. For further details, refer to [LINK: SECTION-UG-Machine-identifiers-MID].\n","_LINK":"131a7392a33f4225a62539dd173a920b"},"238":{"MID":"0a4573d025f14e61b84aad14349d42f4","UID":"SECTION-UG-HTML2PDF-document-generator","TITLE":"HTML2PDF document generator","_LINK":"SECTION-UG-HTML2PDF-document-generator"},"239":{"MID":"6e610b9a381f4b5d9d26004dd286e001","STATEMENT":"StrictDoc offers an experimental feature for converting HTML documents into PDF files. This feature aims to deliver a good PDF printing experience without the necessity of installing more sophisticated printing systems like LaTeX.\n\nThere are three methods of PDF printing available:\n\n1. Through the command-line interface with the ``strictdoc export --formats=html2pdf ...`` command.\n\n2. Within the web interface by clicking the 'Export to PDF' button.\n\n3. Also in the web interface, by navigating to a 'PDF' view of a document and using the browser's built-in Print function.\n\nThe first two methods require the Chrome browser and chromedriver to be installed on the user's computer.\nStrictDoc downloads chromedriver on demand by default, or uses a pre installed executable if\n``strictdoc export --chromedriver=/path/to/chromedriver`` or the equivalent ``strictdoc.toml`` option is given.\n\nWhen printing from the command line (the first method), you can use the ``--generate-bundle-document`` option to have StrictDoc generate a single PDF document that bundles together all individual PDFs. The bundle document gets the document version/date information from Git by default which can be controlled in the ``strictdoc.toml`` config (the default values are shown):\n\n.. code-block:: text\n\n    bundle_document_version = \"@GIT_VERSION (Git branch: @GIT_BRANCH)\"\n    bundle_document_date = \"@GIT_COMMIT_DATETIME\"\n\nTo disable bundle document version/date automatic generation, set ``bundle_document_version``/``bundle_document_date`` to empty strings or use any custom values.\n\nThe third method, the PDF screen, presents a version of the document that is optimized for browser printing. This approach allows for the creation of neatly formatted PDF documents or directly printed documents. Although this method is compatible with any browser, Chrome is recommended for the best printing results. Unlike Firefox and Safari, Chrome maintains the document's internal hyperlinks in the printed PDF.\n\nTo activate the HTML2PDF screen in the web interface, add/edit the ``strictdoc.toml`` config file in the root of your repository with documentation content.\n\n.. code::\n\n    [project]\n    title = \"My project\"\n\n    features = [\n      \"HTML2PDF\"\n    ]\n\nThis feature is not enabled by default because the implementation has not been completed yet. The underlying JavaScript library is being improved with respect to how the SDoc HTML content is split between pages, in particular the splitting of HTML ``<table>`` tags is being worked out.\n","_LINK":"6e610b9a381f4b5d9d26004dd286e001"},"240":{"MID":"61b3fa2fc31140ae95ae1a651cb18355","TITLE":"Mermaid diagramming and charting tool","_LINK":"17.5-Mermaid-diagramming-and-charting-tool"},"241":{"MID":"6a4e4467a5c0451ea8291fd94309d525","STATEMENT":"The Mermaid tool allows to create diagrams inside of StrictDoc/RST markup as follows:\n\n.. code::\n\n    [TEXT]\n    STATEMENT: >>>\n    .. raw:: html\n\n        <pre class=\"mermaid\">\n        graph TD\n        A[Enter Chart Definition] --> B(Preview)\n        B --> C{decide}\n        C --> D[Keep]\n        C --> E[Edit Definition]\n        E --> B\n        D --> F[Save Image and Code]\n        F --> B\n        </pre>\n    <<<\n\nTo activate Mermaid, add/edit the ``strictdoc.toml`` config file in the root of your repository with documentation content.\n\n.. code::\n\n    [project]\n    title = \"My project\"\n\n    features = [\n      \"MERMAID\"\n    ]\n\nThis feature is not enabled by default because it has not received enough testing.\n","_LINK":"6a4e4467a5c0451ea8291fd94309d525"},"242":{"MID":"74291dc6cfae47d2bae33066024f3807","TITLE":"Test report integration","_LINK":"17.6-Test-report-integration"},"243":{"MID":"07e78a4847554fbd87c44d7b11133f68","STATEMENT":"StrictDoc can read test report files from several testing tools as SDoc content which allows establishing traceability between requirements, test cases, and test results.\n\nThe project must have the following features activated for StrictDoc to provide language-aware parsing of C/C++, Python or Robot Framework. It is recommended to provide a dedicated folder for test report XML files to not mix human-written SDoc content and auto-generated test reports.\n\n.. code-block::\n\n    [project]\n\n    features = [\n      \"REQUIREMENT_TO_SOURCE_TRACEABILITY\",\n      \"SOURCE_FILE_LANGUAGE_PARSERS\",\n    ]\n\n    include_doc_paths = [\n      \"docs/**\",\n      # A dedicated folder where StrictDoc could find JUnit XML.\n      \"reports/**\",\n    ]\n","_LINK":"07e78a4847554fbd87c44d7b11133f68"},"244":{"MID":"e9c94abacb12425980aec8ed7ee752cb","TITLE":"JUnit XML","_LINK":"17.6.1-JUnit-XML"},"245":{"MID":"eba63ebd45624139a8773cf42fe7d670","STATEMENT":"JUnit XML format is mostly identical between different tools that produce it but there are subtle differences that must be handled case by case. StrictDoc supports several JUnit XML flavors. To be discovered by StrictDoc, the XML files must have one of the following extensions:\n\n.. list-table:: Supported JUnit XML formats\n   :widths: 60 40\n   :header-rows: 1\n\n   * - Tool\n     - Extension\n\n   * - Pytest\n     - ``.pytest.junit.xml``\n   * - CTest\n     - ``.ctest.junit.xml``\n   * - Google Test\n     - ``.gtest.junit.xml``\n   * - LLVM Integrated Tester (LIT)\n     - ``.lit.junit.xml``\n\n.. note::\n\n    After the existing JUnit XML flavors have been implemented, it should be easy to add more tools in case their output differs.\n\n.. warning::\n\n    The JUnit XML feature's status is experimental. The functionality has been implemented and passes basic integration tests but it has not received enough testing by the users. StrictDoc's own documentation is already using this feature and the JUnit XML traceability will be part of StrictDoc's own qualification package. It is expected that the JUnit XML will become a stable feature by no late than 2025 Q4.\n","_LINK":"eba63ebd45624139a8773cf42fe7d670"},"246":{"MID":"06d9dbbeca204f5e8d0042e142b615bd","TITLE":"LLVM Integrated Tester JUnit XML specifics","_LINK":"17.6.2-LLVM-Integrated-Tester-JUnit-XML-specifics"},"247":{"MID":"fab24f53f02f46e7a4cb49e333dfdc54","STATEMENT":"Specifically for LLVM Integrated Tester-produced JUnit XML, an extra config option must be provided because its output XML does not contain precise information about the test root folder.\n\n.. code-block::\n\n    [project]\n\n    features = [\n      \"REQUIREMENT_TO_SOURCE_TRACEABILITY\",\n      \"SOURCE_FILE_LANGUAGE_PARSERS\",\n    ]\n\n    test_report_root_dict = [\n      { \"reports/tests_integration.lit.junit.xml\" = \"tests/integration\" },\n    ]\n\nIn this example, the expectation is that a user has generated a JUnit XML with LLVM LIT and the output XML is at ``reports/tests_integration.lit.junit.xml``. The config line tells StrictDoc that this JUnit XML was produced by LIT from the ``tests/integration`` root folder.\n","_LINK":"fab24f53f02f46e7a4cb49e333dfdc54"},"248":{"MID":"c7f5451905bf4fdb9a3a7dc97bb0e853","TITLE":"Robot Framework XML","_LINK":"17.6.3-Robot-Framework-XML"},"249":{"MID":"6c3d98ca65cc40d585953237693ff2c6","STATEMENT":"Robot Framework has its own native XML test report schema, sometimes referred to as ``output.xml``. Files must end with ``.robot.xml`` to be recognized as such.\n\n.. warning::\n\n    The Robot Framework test report feature's status is experimental.\n","_LINK":"6c3d98ca65cc40d585953237693ff2c6"},"250":{"MID":"66e608bfa6b8448598c0a732a27ddaad","TITLE":"Shadow features","_LINK":"17.7-Shadow-features"},"251":{"MID":"38fa0af0d01e479ba7f5be046bae02eb","STATEMENT":"At any given moment, StrictDoc may contain one or more features that have been implemented and are supported in the codebase, yet lack documentation.\n\nIn most cases, these features are still in their early stages and may not even be documented as experimental features.\n\nThe testing of these experimental features is typically done by developers or by selected users who have either requested or expressed interest in a specific feature.\n\nIf you happen to stumble upon such a hidden feature, we encourage you to use it and provide bug reports or share your experiences with it. However, please be prepared to encounter various unknown or undefined behaviors in the process.\n","_LINK":"38fa0af0d01e479ba7f5be046bae02eb"},"252":{"MID":"c3c6d6fe6e8140ca905d26dbbaae22b3","UID":"SDOC_UG_LIMIT","TITLE":"StrictDoc's limitations","_LINK":"SDOC_UG_LIMIT"},"253":{"MID":"4fb2645146eb42c1be2152d480b61cfc","UID":"SDOC_UG_LIMIT_RST","TITLE":"Limitations of RST support by StrictDoc","_LINK":"SDOC_UG_LIMIT_RST"},"254":{"MID":"f7b039831f4e4c1ea19b45efe71c5365","STATEMENT":"StrictDoc uses Docutils for rendering RST to HTML, not Sphinx. The implication is that no Sphinx-specific RST directives are supported. Refer to this issue for the related discussion of the limitations: `Unexpected restriction on specific RST directives / compatibility with Breathe Sphinx Plugin #1093 <https://github.com/strictdoc-project/strictdoc/issues/1093>`_.\n","_LINK":"f7b039831f4e4c1ea19b45efe71c5365"},"255":{"MID":"076c2ae8d627491a85ddcacc132a4bc5","UID":"SDOC_UG_LIMIT_WEB","TITLE":"Limitations of web user interface","_LINK":"SDOC_UG_LIMIT_WEB"},"256":{"MID":"911c454331634018b8de24186ae8e742","STATEMENT":"The existing implementation of the web user interface is alpha-quality and incomplete. The user interface and the underlying backend implementation are not yet autonomous from the command-line workflow. A user still has to access the command line to run the server and commit the documents to Git manually.\n\nThe currently supported workflow for the ``server`` command must be hybrid:\n\n- In one terminal window: run server.\n- In another window: check the changes made by the server in the .sdoc files. Commit the .sdoc files to Git.\n\nNote that currently, StrictDoc server maintains an in-memory state of a documentation tree, and it does not watch over the changes made in the .sdoc files. If you make a change in an ``.sdoc`` file manually, you have to restart the server in order for your changes to show up in the web user interface.\n\nThe following essential features are still missing and will be worked on in the future:\n\n- Adding images to the multiline fields like such requirements and text nodes ``STATEMENT``.\n- Adding/editing sections with ``LEVEL: None``.\n- Deleting a document.\n- Deleting a section recursively with a correct cleanup of all traceability information.\n- A separate screen for editing project settings.\n- Editing File-based relations.\n- Moving the TOC nodes of a document when it has one or more included documents.\n- Editing ``.sgra`` grammar files.\n","_LINK":"911c454331634018b8de24186ae8e742"},"257":{"MID":"2a49392c11d246ea8c69375764fc5362","TITLE":"Concurrent use of web user interface","_LINK":"18.2.1-Concurrent-use-of-web-user-interface"},"258":{"MID":"bdee3bde500a40878b70be44f113cf2c","STATEMENT":"StrictDoc's web user interface does not handle concurrency. If the same requirement/section is edited by two users at the same time, the last write wins.\n\nThe measures for handling concurrent use are planned but have been not implemented yet.\n","_LINK":"bdee3bde500a40878b70be44f113cf2c"},"259":{"MID":"c5cfb2c7892f4137a3bc0c3136a55a89","TITLE":"Known issues","_LINK":"19-Known-issues"},"260":{"MID":"9282f2d7218a4f2e967b6df45b0347ab","STATEMENT":"This section documents some known issues and non-obvious implementation details.\n","_LINK":"9282f2d7218a4f2e967b6df45b0347ab"},"261":{"MID":"7e4c91401d244149a1aa502d990f0052","UID":"SDOC_IMPL_2","TITLE":"Running out of semaphores on macOS","_LINK":"SDOC_IMPL_2"},"262":{"MID":"ec83d51626ee4e0cbb75c500ee306b06","STATEMENT":"This an edge case on macOS: Python crashes in the Parallelizer class when\ncreating an output queue:\n\n.. code-block:: py\n\n    self.output_queue = multiprocessing.Queue()\n\nThe fragment of the crash:\n\n.. code-block:: text\n\n    sl = self._semlock = _multiprocessing.SemLock(\n    OSError: [Errno 28] No space left on device\n\nThe existing workaround for this problem is to increase a number of semaphores in the macOS config:\n\n.. code-block:: text\n\n    sudo sysctl -w kern.posix.sem.max=20000\n","_LINK":"ec83d51626ee4e0cbb75c500ee306b06"},"263":{"MID":"b55c23b113d54802b5717f7a82a45bd2","TITLE":"Appendices","_LINK":"20-Appendices"},"264":{"MID":"a72ae310493a42ba8ecdc7de2c42d4f2","UID":"SECTION-UG-FREETEXT-TEXT","TITLE":"FREETEXT-TEXT migration (June 2024)","_LINK":"SECTION-UG-FREETEXT-TEXT"},"265":{"MID":"2509cce7ee634c7a8878c5e1094b83f2","STATEMENT":"A new grammar node called ``TEXT`` has been introduced in the SDoc grammar, replacing the ``FREETEXT`` node as a more powerful feature.\n\nThe reasons for the migration:\n\n- The ``[FREETEXT]..[/FREETEXT]`` markup element is limited. Unlike ``REQUIREMENT`` it is not possible to attach fields like MID or UID, which can be important for change tracking and importing/exporting from formats like ReqIF and SPDX, which assign unique identifiers to all nodes of the document / requirements graph, not just the requirements nodes.\n- Historically, the ``[FREETEXT]`` node was implemented differently compared to the ``REQUIREMENT`` node, creating a lot of branching and requiring two separate sets of code to handle free text and requirements slightly differently.\n- 15000 lines of code are removed, eliminating numerous branches, such as ``if node.is_requirement ... elif node.is_free_text``.\n\n.. image:: _assets/StrictDoc_Workspace-FREETEXT-TEXT.drawio.png\n   :alt: The FREE-TEXT migration\n   :class: image\n   :width: 100%\n\nThere are three important consequences of this migration.\n\n**Consequence #1:** The ``TEXT`` nodes can now have ``UID`` (if declared in a grammar) and ``MID`` (if the ``ENABLE_MID: True`` option is enabled), but the automatic generation of UIDs is disabled for ``TEXT`` nodes in the first version after the migration. User feedback regarding the potential use cases for ``TEXT`` node's UID/MID identifiers would be nice to have.\n\n**Consequence #2:** Now it is possible to create a ``[LINK]`` to any custom elements, not only ``FREETEXT`` elements like it was before.\n\n**Consequence #3**: It is now possible to place ``[TEXT]`` nodes anywhere within a document or a section. Previously, ``[FREETEXT]`` nodes could only be placed directly after the Document or Section titles. This limitation originated from the original implementation of ``FREETEXT`` but has now been removed. This should improve the experience for users whose documents contain a mix of requirements and text nodes.\n\n**Consequence #4**: Previously, it was not possible to reference FREETEXT nodes from source files because FREETEXT lacked a UID field. Now, TEXT nodes can be referenced by a UID, just like any other REQUIREMENT-like node.\n","_LINK":"2509cce7ee634c7a8878c5e1094b83f2"},"266":{"MID":"bbe50de9a4d845a7aa91e32dd9335abe","TITLE":"How to migrate from FREETEXT to TEXT","_LINK":"20.1.1-How-to-migrate-from-FREETEXT-to-TEXT"},"267":{"MID":"5d2f033604824264b1cc05840997c6b8","STATEMENT":"The backward compatibility is preserved. The users can still create SDoc documents with ``FREETEXT`` but internally the free text nodes will be anyway converted to ``TEXT`` nodes, and the FREETEXT node no longer exist in the SDoc document model.\n\nThe users are encouraged to perform the migration as follows.\n\nThe free text node:\n\n.. code-block::\n\n    [FREETEXT]\n    This is a free text node.\n    [/FREETEXT]\n\nbecomes\n\n.. code-block::\n\n    [TEXT]\n    STATEMENT: >>>\n    This is a free text node.\n    <<<\n\nThe ``TEXT`` node is now included to a default StrictDoc grammar by default. If a custom grammar is used, the default grammar definition for the ``TEXT`` node is as follows:\n\n.. code-block::\n\n    [GRAMMAR]\n    ELEMENTS:\n    - TAG: TEXT\n      FIELDS:\n      - TITLE: UID\n        TYPE: String\n        REQUIRED: False\n      - TITLE: STATEMENT\n        TYPE: String\n        REQUIRED: True\n    - TAG: REQUIREMENT\n    ... REQUIREMENT fields\n    ... Optionally other elements definitions.\n\nThe ``strictdoc export --formats sdoc --free-text-to-text ...`` command can be used for converting all FREETEXT nodes to TEXT nodes automatically. See ``strictdoc export --help`` for more details.\n","_LINK":"5d2f033604824264b1cc05840997c6b8"},"268":{"MID":"2ed20461aeb4462b812432c08aa006be","UID":"SECTION-UG-NODE-MIGRATION","TITLE":"[[NODE]] migration (2025 Q2-Q3)","_LINK":"SECTION-UG-NODE-MIGRATION"},"269":{"MID":"9d55b69bf789487e814210da06fc4164","STATEMENT":"As of 2025 Q2, the following changes are made to StrictDoc's grammar in a partially backward-incompatible manner. The relevant GitHub issue related to the migration:\n\n`Migration: SDoc model: Merge Section, Node, Composite Node into just Node #2193 <https://github.com/strictdoc-project/strictdoc/issues/2193>`_\n\n1\\) The ``[[CUSTOM_NODE]]`` syntax with two square brackets around the element name has been introduced for composite nodes.\n\nExample of declaring a composite node in a grammar and using it in a document:\n\n.. code-block::\n\n    [GRAMMAR]\n    ELEMENTS:\n    - TAG: SECTION\n      PROPERTIES:\n        IS_COMPOSITE: True\n        PREFIX: None\n        VIEW_STYLE: Narrative\n      FIELDS:\n      - TITLE: MID\n        TYPE: String\n        REQUIRED: False\n      - TITLE: UID\n        TYPE: String\n        REQUIRED: False\n      - TITLE: TITLE\n        TYPE: String\n        REQUIRED: True\n\n     [[SECTION]]\n     TITLE: Section #1\n\n     [[/SECTION]]\n\nUsing the new syntax, it is now possible to declare any custom composite element, such as what ``[COMPOSITE_REQUIREMENT]`` used to provide before.\n\n2\\) The previously used ``[SECTION]`` syntax with one square bracket around the SECTION is now DEPRECATED, but the old behavior is still supported. The users are encouraged to migrate all ``[SECTION]`` elements to the new ``[[SECTION]]`` syntax. To support the new behavior, the grammar must include a declaration for a composite SECTION element similar to the example provided above.\n\n3\\) The ``[COMPOSITE_REQUIREMENT]`` node has been removed from the codebase. This is a backward-incompatible change, but it is assumed that no users should be affected since this feature has never been developed enough to be useful.\n\n4\\) The document-level ``REQ_PREFIX`` has been renamed/aliased to ``PREFIX``. The REQ_PREFIX form will still be recognized but writing SDoc files back to disk will result in the new PREFIX field to be written.\n","_LINK":"9d55b69bf789487e814210da06fc4164"},"270":{"MID":"6f15ef6876ba48598d5560aaf4664ec9","TITLE":"How to migrate from [SECTION] to [[SECTION]]","_LINK":"20.2.1-How-to-migrate-from-SECTION-to-SECTION"},"271":{"MID":"19fe5099aa034eddb960cc88953ace0e","STATEMENT":"The migration from ``[SECTION]`` to the new composite ``[[SECTION]]`` syntax is mostly straightforward and can be done manually. However, StrictDoc also provides a dedicated configuration option to assist with this migration.\n\n1\\) **Manual approach**\n\nUpdate all instances of ``[SECTION]`` to ``[[SECTION]]`` manually, or use a combination of ``find`` and ``sed``. Additionally, make sure to update all document grammar declarations to include the new composite ``[[SECTION]]`` element like described in the previous section.\n\n.. note::\n\n    StrictDoc can automatically create the ``[[SECTION]]`` element even if it is not explicitly defined in the document grammar. However, as of 2025 Q2, it is recommended that users always define explicit grammars with the SECTION element included.\n\nExamples of a sed command for Linux and macOS:\n\n.. code-block::\n\n    # Linux\n    find . -type f -name '*.sdoc' -exec sed -i -e 's/^\\[SECTION\\]/[[SECTION]]/g' -e 's/^\\[\\/SECTION\\]/[[\\/SECTION]]/g' {} +\n\n    # macOS\n    find . -type f -name '*.sdoc' -exec sed -i '' -e 's/^\\[SECTION\\]/[[SECTION]]/g' -e 's/^\\[\\/SECTION\\]/[[\\/SECTION]]/g' {} +\n\n2\\) **Semi-automated approach (experimental)**\n\nStrictDoc can automatically migrate SDoc files if the project configuration option ``section_behavior`` is set as follows:\n\n.. code-block::\n\n    [project]\n    section_behavior = \"[[SECTION]]\"\n\nWith this option enabled, StrictDoc's ``export`` command will convert all ``[SECTION]`` nodes to ``[[SECTION]]`` when writing SDoc files.\n\nTo perform the migration, run the export command:\n\n.. code-block::\n\n    strictdoc export . --formats=sdoc\n\nThe resulting files will have all ``[SECTION]`` nodes replaced with ``[[SECTION]]``.\n\nAdditionally, when the section behavior is specified to ``[[SECTION]]``, the UI will mark the old section node as Deprecated.\n\n.. image:: _assets/StrictDoc_NodeMigration_DeprecatedSection.png\n   :alt: UI: The deprecated SECTION\n   :class: image\n   :width: 100%\n","_LINK":"19fe5099aa034eddb960cc88953ace0e"},"272":{"MID":"f405431dc66e4d6786be020a62a4e5a3","STATEMENT":"This document provides a comprehensive overview of all available features in StrictDoc from the user's perspective. It includes descriptions and relevant screenshots to illustrate each feature's functionality. Each entry is linked to additional documentation, such as the [LINK: SDOC_UG], offering further details, usage instructions, and examples to help users understand and effectively utilize StrictDoc’s capabilities.\n","_LINK":"f405431dc66e4d6786be020a62a4e5a3"},"273":{"MID":"01c07ca347a24181a92a5be6c8431094","UID":"SECTION-FM-SDoc-text-markup","TITLE":"SDoc text markup","_LINK":"SECTION-FM-SDoc-text-markup"},"274":{"MID":"dfd4d2d77c7247819e476f360ffff639","TITLE":"Definition","_LINK":"1.1-Definition"},"275":{"MID":"4c40803dd0f04af88fd722ba6b732270","UID":"SDOC-FEAT-1","STATUS":"Stable","TITLE":"SDoc text markup","STATEMENT":"The SDoc markup language is a hybrid format inspired by TOML, YAML, ASN.1, and HTML/XML, designed specifically for structuring technical documents with large volumes of requirements. It aims to encode documents that span up to several hundred or even a few thousand A4-printed pages, while keeping the markup noise minimal to maintain readability. The format supports both shallow and deeply nested document structures, accommodating up to 9-10 levels of chapter nesting, and allows for multiple meta-information fields around each requirement.\n","DOCUMENTATION":"- [LINK: SECTION-UG-SDoc-syntax]\n","_LINK":"SDOC-FEAT-1"},"276":{"MID":"3f422abd9abe4717a995ae4150df12e3","TITLE":"Use case","_LINK":"1.2-Use-case"},"277":{"MID":"8ea5b080819e47afa78bc346d671cf30","STATEMENT":"The main use case for SDoc is to model a structure of a technical document that consists of tens and hundreds of technical requirements. The following high-level requirements for the markup are therefore relevant:\n\n- Encode documents of reasonable size (up to several hundreds or few thousands of A4-printed pages).\n- Visualize large blocks of requirements text without too much markup noise.\n- Support documents with nested (2-4 levels) or deeply nested structure (detailed technical specifications with up to 9-10 levels of chapter nesting).\n- Support multiple fields for requirement meta information which makes a requirement look like \"a text with some meta information around it\".\n\nThe SDoc markup has been pretty stable since its inception but the flexibility of the TextX parser allows easy modifications of the language in case of future evolutions. Any feedback to the current design of the markup language is appreciated.\n","_LINK":"8ea5b080819e47afa78bc346d671cf30"},"278":{"MID":"fa7b37153def4eb4a6e9dcee079cba2a","TITLE":"Inspirations","_LINK":"1.3-Inspirations"},"279":{"MID":"104b6ff4623f4ac9a965aa789c4cf001","STATEMENT":"The SDoc markup is a hybrid of TOML and YAML with some influence from HTML/XML and `ASN.1 <https://en.wikipedia.org/wiki/ASN.1>`_. Using each of these formats as-is, and also the JSON format, was considered but discarded during the design.\n\n**TOML: Square bracket syntax**\n\nFrom TOML, StrictDoc borrowed the ``[]`` bracket syntax to create the ``[REQUIREMENT]``, ``[SECTION]`` and other blocks but uses the YAML-like syntax for these blocks' fields, for example:\n\n.. code-block::\n\n    [REQUIREMENT]\n    TITLE: Requirement ABC\n    STATEMENT: The system A shall do B when C.\n\n**TOML/YAML: Arrays/dictionaries**\n\nStrictDoc has a rudimentary support of arrays and dictionaries. For example, the syntax for defining the document's ``[GRAMMAR]`` resembles what would look like an array of records in YAML:\n\n.. code-block::\n\n    [GRAMMAR]\n    ELEMENTS:\n    - TAG: REQUIREMENT\n      FIELDS:\n      - TITLE: UID\n        TYPE: String\n        REQUIRED: True\n      - TITLE: LEVEL\n        TYPE: String\n        REQUIRED: False\n\n**Capitalization of reserved keywords from ASN.1**\n\nFrom ASN.1, StrictDoc borrows the idea of having all reserved fields capitalized. This helps to visually distinguish between the grammar content and user content.\n\n**Nested sections**\n\nFrom HTML, the idea of opening and closing tags is taken to avoid any nesting that would otherwise be required to support the deeply nested documents with up to 6 or 8 levels, e.g., 1.1.1.1.1.1.1...\n\n.. code-block::\n\n    [[SECTION]]\n    TITLE: Section 1\n\n    [[SECTION]]\n    TITLE: Section 1.1\n\n    ...\n\n    [[/SECTION]]\n\n    [[/SECTION]]\n\nTaking HTML or XML as-is didn't seem like a good option because of the heavy visual noise that is produced around the actual content by the surrounding tags.\n\n**Multiline strings**\n\nThe support of multiline strings is arranged by a custom solution which helps to avoid any nesting of multiline text as well as to visually indicate the start and end parts of the multiline string in a visually unambiguous way. This is how the multiline string is declared:\n\n.. code-block::\n\n    [REQUIREMENT]\n    TITLE: Requirement ABC\n    STATEMENT: >>>\n    The multiline requirement statement\n    without any nesting.\n    >>>\n\n**Discarded options**\n\nTaking TOML or YAML as-is didn't seem like a good option because these formats are designed to be used for configuration files or data serialization and not for large documents with hundreds of requirements. The most obvious problems for reusing either of TOML or YAML directly would have been with encoding the deeply nested documents and supporting readable and non-nested multiline strings.\n","_LINK":"104b6ff4623f4ac9a965aa789c4cf001"},"280":{"MID":"87b1538be72a4ff7945b5bb95f856471","TITLE":"Screenshots","_LINK":"1.4-Screenshots"},"281":{"MID":"f48ae881c5134f77885202b019e124d4","STATEMENT":".. image:: _assets/Feature_Screenshot_SDoc.png\n   :alt: SDoc markup\n   :class: image\n   :width: 100%\n","_LINK":"f48ae881c5134f77885202b019e124d4"},"282":{"MID":"27bb9f0875d84d79bb882f6ca98ee1fa","TITLE":"HTML export","_LINK":"2-HTML-export"},"283":{"MID":"4a0844b5938a488a89ac4b379fc7d956","TITLE":"Definition","_LINK":"2.1-Definition"},"284":{"MID":"8e6604c8b27b450cbd21c12dc8572291","UID":"SDOC-FEAT-2","TITLE":"StrictDoc HTML export","STATEMENT":"StrictDoc's static HTML export feature allows users to generate comprehensive documentation from .sdoc files into a well-structured HTML format. It leverages an efficient in-memory representation of document trees, supporting large-scale documents with thousands of requirements while maintaining decent performance.\n\nThe HTML output preserves the hierarchy of requirements, including parent-child relationships, to facilitate traceability and coverage analysis.\n\nAdditionally, StrictDoc's incremental generation mechanism ensures quick updates by only regenerating modified documents, enabling efficient handling of extensive requirements specifications.\n","DOCUMENTATION":"- [LINK: SECTION-UG-Static-HTML-export]\n","_LINK":"SDOC-FEAT-2"},"285":{"MID":"4e46063e2031418298b55a1861179900","TITLE":"Screenshots","_LINK":"2.2-Screenshots"},"286":{"MID":"586f8745588b483b8e027021d90931ac","STATEMENT":".. image:: _assets/Feature_Screenshot_HTMLExport_01_Index.png\n   :alt: StrictDoc HTML export – Project tree\n   :class: image\n   :width: 100%\n","_LINK":"586f8745588b483b8e027021d90931ac"},"287":{"MID":"3ef4254efd8547a8adaf37e100f22724","TITLE":"Web-based graphical user interface","_LINK":"3-Web-based-graphical-user-interface"},"288":{"MID":"bd3e1273cb244616956bddfc22c05638","TITLE":"Definition","_LINK":"3.1-Definition"},"289":{"MID":"2c1cde585d5944b5b7b5a0d5f72a98ed","UID":"SDOC-FEAT-3","STATUS":"Stable","TITLE":"StrictDoc web-based graphical user interface","STATEMENT":"StrictDoc features an editable web interface that enables users to view and modify requirements directly within their browser. This interface provides a user-friendly way to interact with .sdoc files, allowing real-time editing of documents and requirements. Changes made through the web interface are automatically saved back to the original text files, ensuring synchronization between the user interface and the underlying document structure. The web interface also supports visualization of requirement hierarchies and relationships, making it easier to manage complex documents with multiple nested levels and linked requirements.\n","DOCUMENTATION":"- [LINK: SECTION-UG-Web-server]\n- [LINK: SDOC_UG_LIMIT_WEB]\n","_LINK":"SDOC-FEAT-3"},"290":{"MID":"6b5989db0e984c42b12440993c885987","TITLE":"Screenshots","_LINK":"3.2-Screenshots"},"291":{"MID":"28ce32fe182c45ce882b65c835620339","STATEMENT":".. image:: _assets/Feature_Screenshot_WebUI.png\n   :alt: StrictDoc web interface\n   :class: image\n   :width: 100%\n\n.. image:: _assets/Feature_Screenshot_WebUI_2.png\n   :alt: StrictDoc web interface\n   :class: image\n   :width: 100%\n","_LINK":"28ce32fe182c45ce882b65c835620339"},"292":{"MID":"5ac3e3c690494371bd9de04be5eae0b0","TITLE":"Traceability between requirements and source code","_LINK":"4-Traceability-between-requirements-and-source-code"},"293":{"MID":"538d26fae4644debbc8f244709b8be7b","TITLE":"Definition","_LINK":"4.1-Definition"},"294":{"MID":"e14eee106ea443e598378e55401914dc","UID":"SDOC-FEAT-4","TITLE":"Traceability between requirements and source code","STATEMENT":"StrictDoc supports traceability between requirements and source code, enabling the creation of links from requirements specified in .sdoc files to relevant source code files. This feature ensures that each requirement is adequately addressed in the implementation by associating it with corresponding segments of the codebase. Traceability links are defined using custom references, allowing teams to track which parts of the code fulfill specific requirements. This capability is essential for compliance, validation, and maintaining consistency between documentation and actual implementation. These connections can be visualized in the generated HTML exports, providing a clear and navigable overview of the relationship between requirements and the codebase​.\n","DOCUMENTATION":"- [LINK: SECTION-TRACEABILITY-REQS-TO-SOURCE-CODE]\n","_LINK":"SDOC-FEAT-4"},"295":{"MID":"ceec313d9ec040b9bcaaf64967ed6af8","TITLE":"Screenshots","_LINK":"4.2-Screenshots"},"296":{"MID":"363aae23cbb44f30aff42ef6a430ffdf","STATEMENT":".. image:: _assets/Feature_Screenshot_TraceabilityToSource_1.png\n   :alt: Traceability to source 1\n   :class: image\n   :width: 100%\n\n.. image:: _assets/Feature_Screenshot_TraceabilityToSource_2.png\n   :alt: Traceability to source 2\n   :class: image\n   :width: 100%\n","_LINK":"363aae23cbb44f30aff42ef6a430ffdf"},"297":{"MID":"a436d31c5f324eb0bb6b35f0a6ce598d","TITLE":"Document grammar","_LINK":"5-Document-grammar"},"298":{"MID":"f20223cddcb14e40b45f99045e2d3a3a","TITLE":"Definition","_LINK":"5.1-Definition"},"299":{"MID":"0bfcb6144dde487791d4f01164dd7e7c","UID":"SDOC-FEAT-5","TITLE":"Custom document grammars","STATEMENT":"The \"Document grammar\" feature allows users to extend the default grammar to fit specific project needs, particularly useful for industries with specialized requirements documentation, such as automotive or aerospace. This feature supports defining custom fields like \"PRIORITY,\" \"VERIFICATION,\" or domain-specific tags like \"ASIL\" for automotive safety standards. Custom grammars are declared at the document level using the ``[GRAMMAR]`` directive, enabling users to specify custom fields and their data types, such as ``String``, ``SingleChoice``, ``MultipleChoice``. These fields can be marked as mandatory, ensuring consistency across requirements documents.\n","DOCUMENTATION":"- [LINK: SECTION-UG-DOCUMENT-GRAMMAR]\n","_LINK":"SDOC-FEAT-5"},"300":{"MID":"f4763b00f9624cfd8b44f8e571f2aec6","TITLE":"Screenshots","_LINK":"5.2-Screenshots"},"301":{"MID":"3d3d3e2c1c974ed4a2382770225212d7","STATEMENT":".. image:: _assets/Feature_Screenshot_Grammar.png\n   :alt: Document grammar\n   :class: image\n   :width: 100%\n","_LINK":"3d3d3e2c1c974ed4a2382770225212d7"},"302":{"MID":"5b511eac439c4e0a8aa2c60499be88d0","TITLE":"Composable documents","_LINK":"6-Composable-documents"},"303":{"MID":"ab4bc7b948154dbfbd4956d41cda8b75","TITLE":"Definition","_LINK":"6.1-Definition"},"304":{"MID":"e7b2d61545eb414f97345ecac25c52cc","UID":"SDOC-FEAT-6","TITLE":"Composable documents","STATEMENT":"The \"Composable Documents\" feature in StrictDoc enables users to create composite documents made up of smaller, independent SDoc documents. This modular approach allows each document fragment to be managed separately, which is particularly useful when dealing with large, complex requirements documents.\n","DOCUMENTATION":"- [LINK: UG_COMPOSABLE_DOCUMENTS]\n","_LINK":"SDOC-FEAT-6"},"305":{"MID":"dd4d9c0d593b46f8a0abfb3fd91356ae","TITLE":"Export to RST","_LINK":"7-Export-to-RST"},"306":{"MID":"ab0e4d27b6334b44bd4b46425842cdbe","TITLE":"Definition","_LINK":"7.1-Definition"},"307":{"MID":"dd686a557c3e4e50ba89538a74d39383","UID":"SDOC-FEAT-8","STATUS":"Stable","TITLE":"Export to RST","STATEMENT":"The \"Export to RST\" feature in StrictDoc allows users to convert their SDoc documentation into reStructuredText (RST) format, which is compatible with Sphinx documentation generator. This process enables a two-stage conversion workflow where SDoc documents can first be exported to RST and then further processed by Sphinx to generate HTML websites, PDF documents, or other formats. This feature is particularly useful for users who already have a Sphinx-based documentation pipeline, as it integrates StrictDoc’s requirements management capabilities with Sphinx.\n","DOCUMENTATION":"- [LINK: SECTION-UG-HTML-export-via-Sphinx]\n- [LINK: SECTION-UG-PDF-export-via-Sphinx-LaTeX]\n- [LINK: SDOC_UG_LIMIT_RST]\n","_LINK":"SDOC-FEAT-8"},"308":{"MID":"f0a7041347444f3a822129120faf0fcd","TITLE":"Screenshots","_LINK":"7.2-Screenshots"},"309":{"MID":"45be72764a73440b8abf313bb84420aa","STATEMENT":"**Export to RST and PDF using Sphinx/LaTeX**\n\n.. image:: _assets/Feature_Screenshot_RSTExport_01_SphinxPDF.png\n    :alt: StrictDoc HTML export – Project tree\n    :class: image\n    :width: 100%\n","_LINK":"45be72764a73440b8abf313bb84420aa"},"310":{"MID":"2e8e39a2198e4f8aa18a470a892e4d25","TITLE":"Export to PDF","_LINK":"8-Export-to-PDF"},"311":{"MID":"381ebcd10ee241aaaa9fe3654870961c","TITLE":"Definition","_LINK":"8.1-Definition"},"312":{"MID":"5be4f35be2eb49faae7c33b5a2d83251","UID":"SDOC-FEAT-10","STATUS":"Experimental","TITLE":"Export to PDF","STATEMENT":"The HTML2PDF feature in StrictDoc enables web-based printing to PDF by leveraging ChromeDriver and Google Chrome. This approach uses the Selenium Python library to automate the printing of HTML content directly to PDF format, ensuring that the final document mirrors the exact HTML content rendered in the browser.\n\nThe feature allows the user to export content to PDF via a web interface or through a command-line interface. This ensures that the output closely resembles the web page, with no need for additional formatting or adjustments to the content.\n","DOCUMENTATION":"- [LINK: SECTION-UG-HTML2PDF-document-generator]\n","_LINK":"SDOC-FEAT-10"},"313":{"MID":"2d8b04efe57d4c0aa543ed974ace868e","TITLE":"Screenshots","_LINK":"8.2-Screenshots"},"314":{"MID":"15d6e791674c4c0ab54afb6a781f35c9","TITLE":"Query engine and search screen","_LINK":"9-Query-engine-and-search-screen"},"315":{"MID":"91177d3444d9437e87032875ac8fcd7d","TITLE":"Definition","_LINK":"9.1-Definition"},"316":{"MID":"9c1e6cb601294891bcaae2b8c9042c59","UID":"SDOC-FEAT-7","STATUS":"Experimental","TITLE":"Query engine and search screen","STATEMENT":"The \"Query Engine and Search Screen\" feature in StrictDoc offers tools for searching and filtering requirements within documents. It uses a Python-inspired syntax to perform complex queries on the document tree, allowing users to find specific sections or requirements based on attributes like titles, parent-child relationships, or custom fields. The search screen is integrated into the web interface, where users can craft queries with logical operators (e.g., AND, OR) and attribute filters (e.g., ``node.is_requirement``).\n","DOCUMENTATION":"- [LINK: SECTION-UG-Search-and-filtering]\n","_LINK":"SDOC-FEAT-7"},"317":{"MID":"631f1620053342c8a398a1a5d458f873","TITLE":"Screenshots","_LINK":"9.2-Screenshots"},"318":{"MID":"64afc2abdab847439c0c18420db7ba47","STATEMENT":".. image:: _assets/Feature_Screenshot_SearchScreen_01.png\n   :alt: StrictDoc Search Screen\n   :class: image\n   :width: 100%\n","_LINK":"64afc2abdab847439c0c18420db7ba47"},"319":{"MID":"3475f60f31b5488aab981fd2b7b12d4c","TITLE":"Project statistics","_LINK":"10-Project-statistics"},"320":{"MID":"9bbcc02a46194852b9616ea4437ce976","TITLE":"Definition","_LINK":"10.1-Definition"},"321":{"MID":"2dd0b514a24f43a287a4096d0be0af58","UID":"SDOC-FEAT-11","STATUS":"Experimental","TITLE":"Project Statistics","STATEMENT":"The \"Project Statistics\" feature in StrictDoc provides insights into the overall status and details of a documentation project. It offers statistical data that can include information about requirements, document structure, and coverage.\n","DOCUMENTATION":"- [LINK: SECTION-UG-Project-statistics-screen]\n","_LINK":"SDOC-FEAT-11"},"322":{"MID":"7d215ba517fc4aee9dfb381279297cc7","TITLE":"Screenshots","_LINK":"10.2-Screenshots"},"323":{"MID":"bd5a4763e2ca4df497dbaeeff9ffbd71","STATEMENT":".. image:: _assets/Feature_Screenshot_StatisticsScreen_01.png\n   :alt: Project statistics\n   :class: image\n   :width: 100%\n\n\n.. image:: _assets/Feature_Screenshot_StatisticsScreen_02.png\n   :alt: Project statistics\n   :class: image\n   :width: 100%\n","_LINK":"bd5a4763e2ca4df497dbaeeff9ffbd71"},"324":{"MID":"0b3d7fad0ee643ef83617745c51e8e72","TITLE":"Documentation diff/changelog","_LINK":"11-Documentation-diff-changelog"},"325":{"MID":"9cdf4d3af1014aea923f77b112e6b1e3","TITLE":"Definition","_LINK":"11.1-Definition"},"326":{"MID":"e9da42f8e39b438a8e8eada16b280706","UID":"SDOC-FEAT-12","STATUS":"Experimental","TITLE":"Documentation diff/changelog","STATEMENT":"The \"Documentation diff/changelog\" feature in StrictDoc allows users to track and compare changes made between different versions of project documentation. This feature can highlight modifications at a granular level, such as added, deleted, or altered content within the document.\n","DOCUMENTATION":"- [LINK: SECTION-UG-Diff-changelog-screen]\n","_LINK":"SDOC-FEAT-12"},"327":{"MID":"c60c6fab5740469aa251bfa3a805f21f","TITLE":"Screenshots","_LINK":"11.2-Screenshots"},"328":{"MID":"1fad67b63724450bb63738cf7e29d051","STATEMENT":".. image:: _assets/Feature_Screenshot_DiffChangelog_1.png\n   :alt: StrictDoc Diff/Changelog 1\n   :class: image\n   :width: 100%\n\n.. image:: _assets/Feature_Screenshot_DiffChangelog_2.png\n   :alt: StrictDoc Diff/Changelog 2\n   :class: image\n   :width: 100%\n","_LINK":"1fad67b63724450bb63738cf7e29d051"},"329":{"MID":"f655f9a2bde044489233fa03d2891de1","TITLE":"ReqIF support","_LINK":"12-ReqIF-support"},"330":{"MID":"1627a126e1184c5e9050206f2f1ab725","TITLE":"Definition","_LINK":"12.1-Definition"},"331":{"MID":"2845463f977d4b51ac788c2fc9cbd894","UID":"SDOC-FEAT-13","STATUS":"Experimental","TITLE":"ReqIF support","STATEMENT":"The ReqIF support feature in StrictDoc allows for both importing and exporting to the ReqIF format, facilitating interoperability with other requirements management tools.\n\nReqIF is a widely used XML-based standard for requirements data exchange. The import flow allows ReqIF files to be converted into SDoc documents, while the export flow enables SDoc content to be converted back into ReqIF format.\n\nThe implementation of ReqIF support is tool-specific due to the flexibility of the ReqIF standard. Different tools may structure and name their fields differently, which means the export/import workflows may require adjustments depending on the tools involved. StrictDoc provides its own model for converting between ReqIF and SDoc, making it adaptable for specific use cases while striving for compatibility with the ReqIF format recommended by the ReqIF Implementation Guide​.\n","DOCUMENTATION":"- [LINK: SECTION-UG-ReqIF-support]\n","_LINK":"SDOC-FEAT-13"},"332":{"MID":"e1109c5b3b1c4068a0eace811684f0c0","TITLE":"Project configuration","_LINK":"13-Project-configuration"},"333":{"MID":"3c2a1a37e11c425184042d6dab3f050a","TITLE":"Definition","_LINK":"13.1-Definition"},"334":{"MID":"8fc72d79bfe940aba2cf041e263b92df","UID":"SDOC-FEAT-9","TITLE":"Project configuration","STATEMENT":"The \"strictdoc.toml\" file is a project-level configuration file used in StrictDoc to manage various project settings. This configuration file allows customization for features such as selected functionalities, document paths, source file paths, etc.\n\nKey options in the \"strictdoc.toml\" file include:\n\n- Project title: Defines a project title.\n- Feature selection: Selects additional features to activate or deactivate, such as traceability features or experimental tools.\n- Paths customization: cache dir, asset dir, document include/exclude paths, source file include/exclude paths, etc.\n\nThis configuration ensures that StrictDoc works according to the specific needs of a given project, making it more flexible and adaptable​.\n","DOCUMENTATION":"- [LINK: SDOC_UG_OPTIONS_PROJECT_LEVEL]\n","_LINK":"SDOC-FEAT-9"},"335":{"MID":"275658296e5342acab72102589096f15","TITLE":"Screenshots","_LINK":"13.2-Screenshots"},"336":{"MID":"100daefc4121415989324de1978d1f59","STATEMENT":".. image:: _assets/Feature_Screenshot_StrictDocTOML.png\n   :alt: StrictDoc config file strictdoc.toml\n   :class: image\n   :width: 100%\n","_LINK":"100daefc4121415989324de1978d1f59"},"337":{"MID":"5acdfccd5771492f95b70328bd599cf7","STATEMENT":"This document is a list of questions that people ask about StrictDoc.\n\nMissing a question or an answer? Ask it here: [LINK: SDOC_UG_CONTACT].\n","_LINK":"5acdfccd5771492f95b70328bd599cf7"},"338":{"MID":"e972c79015524961863e095280a81aab","TITLE":"What is StrictDoc?","_LINK":"1-What-is-StrictDoc"},"339":{"MID":"d8d92e4eb8254cbda8dcb37709a9df45","STATEMENT":"StrictDoc is software for writing technical requirements specifications.\n\nStrictDoc is a spare-time open-source project developed by Stanislav Pankevich (@stanislaw) and Maryna Balioura (@mettta) with contributions from the Open Source community.\n\nThe project exists since mid-2019.\n\nFor a quick overview of the project, check out the `StrictDoc project <https://github.com/strictdoc-project/strictdoc/blob/main/about/StrictDoc_SlideDeck.pdf>`_ slide deck.\n","_LINK":"d8d92e4eb8254cbda8dcb37709a9df45"},"340":{"MID":"86827c92ec3a493d8a2382b75b5277a8","TITLE":"Resources about StrictDoc","_LINK":"2-Resources-about-StrictDoc"},"341":{"MID":"f7083cf6a84e4b858b5e551f8c8a555a","TITLE":"Presentations","_LINK":"2.1-Presentations"},"342":{"MID":"52342105083e4f80884959d4ca7f4dba","STATEMENT":"1\\) `StrictDoc project <https://github.com/strictdoc-project/strictdoc/blob/main/about/StrictDoc_SlideDeck.pdf>`_\n\nThis slide deck provides a concise overview of the project, including its goals, real-world case studies, the motivation behind its creation, implementation details, and the development roadmap.\n\n2\\) `Application of the SPDX Safety Profile in the Safety Scope of the Zephyr Project <https://ftp.fau.de/fosdem/2024/k4401/fosdem-2024-3211-application-of-the-spdx-safety-profile-in-the-safety-scope-of-the-zephyr-project.mp4>`_\n\nThis presentation introduces the SPDX Safety Profile and details its application within the context of the Zephyr Project. There is also a presentation of the Zephyr project's methodology for capturing requirements using StrictDoc and a discussion of the upcoming plans for the integration of SPDX into StrictDoc.\n","_LINK":"52342105083e4f80884959d4ca7f4dba"},"343":{"MID":"d22b63a405264a6a80d4ab3f9b2bf9c5","TITLE":"Blog posts","_LINK":"2.2-Blog-posts"},"344":{"MID":"b2f5aea77e504ee1b64a67be24bd3c58","STATEMENT":"1\\) `From Code to Compliance – Part1: IEC 62443 Certification with Industrial Grade Linux Operating System by Linutronix <https://www.linutronix.de/blog/From-Code-to-Compliance-Part1-IEC-62443-Certification-with>`_\n\nThe blog post outlines how Linutronix achieved security certification for Linux-based industrial software, with StrictDoc serving as an important building block in their development workflow.\n\n2\\) `Requirement Traceability with All Substance and No Fuss <https://www.bugseng.com/requirement-traceability-with-all-substance-and-no-fuss/>`_ by BUGSENG.\n","_LINK":"b2f5aea77e504ee1b64a67be24bd3c58"},"345":{"MID":"d75bd4d35b4b425b90ec8667ffffe191","TITLE":"Screencasts / tutorials","_LINK":"2.3-Screencasts-tutorials"},"346":{"MID":"9d23e77aa7f848cb8efca49f5cf41f77","STATEMENT":"`Automotive SPICE in opensource StrictDoc tool, with System Architecure ideas <https://www.youtube.com/watch?v=k2MCFWvCs7E>`_ by Lukasz Juranek.\n","_LINK":"9d23e77aa7f848cb8efca49f5cf41f77"},"347":{"MID":"74235945ec4a4116aecbc883ffba54b7","TITLE":"Which web server is recommended for StrictDoc documentation?","_LINK":"3-Which-web-server-is-recommended-for-StrictDoc-documentation"},"348":{"MID":"966a5c3babf84fc7a1454b2799d13470","STATEMENT":"This question can be answered in two ways. First of all, StrictDoc has its own web server that can be run with ``strictdoc server ...``. Refer to the User Guide for further information.\n\nThe following suggestions assume that you are looking to using a web server to host the StrictDoc's static HTML export, without using StrictDoc's own web server.\n\nIs your project public or private? If it is public, you could simply use `GitHub pages <https://pages.github.com>`_. See how one user of StrictDoc is doing it here: `nmfta-repo/vcr-experiment <https://github.com/nmfta-repo/vcr-experiment>`_ and the resulting static website: `nmfta-repo.github.io/vcr-experiment <https://nmfta-repo.github.io/vcr-experiment>`_.\n\nA very good alternative to GitHub pages is `Read the Docs <https://readthedocs.org>`_.\n\nIf the project is private, you could use any server that reads HTML files from a folder. For example, Python has an embedded Web Server, see `this for example <https://pythonbasics.org/webserver>`_. Also you could try any web server based on Node.JS.\n","_LINK":"966a5c3babf84fc7a1454b2799d13470"},"349":{"MID":"2e911dedb13348bf827f078bbbca44f4","TITLE":"Is StrictDoc compatible with Sphinx?","_LINK":"4-Is-StrictDoc-compatible-with-Sphinx"},"350":{"MID":"ac35a712b4a84f4ab2b61feb15c1550d","STATEMENT":"StrictDoc is only partially compatible with Sphinx.\n\nStrictDoc does not have Sphinx in its dependency tree, and it does not use any of Sphinx API. Instead, StrictDoc uses Docutils for RST markup support. Using Docutils, StrictDoc can generate SDoc files to RST files.\n\nThere are users of StrictDoc who use both StrictDoc and Sphinx. The following workflow is known to work:\n\n- Write some documentation in SDoc files.\n- Export an SDoc documentation tree to an RST documentation tree.\n- Connect RST documentation tree with a Sphinx setup.\n- Run Sphinx against an RST documentation tree, obtain a Sphinx documentation website or LaTex PDF.\n\nThere is a GitHub issue `Unexpected restriction on specific RST directives / compatibility with Breathe Sphinx Plugin #1093 <https://github.com/strictdoc-project/strictdoc/issues/1093>`_ where a closer bridging between StrictDoc and Sphinx was discussed with no specific and actionable outcome. This comment is `especially relevant <https://github.com/strictdoc-project/strictdoc/issues/1093#issuecomment-1505108384>`_ as well as the one about `possible implementation <https://github.com/strictdoc-project/strictdoc/issues/1093#issuecomment-1545599711>`_.\n","_LINK":"ac35a712b4a84f4ab2b61feb15c1550d"},"351":{"MID":"235122d2c10748918c7c6ff736e39d18","UID":"SECTION-FAQ-How-did-the-SDoc-text-language-become-what-it-is","TITLE":"How did the SDoc text language become what it is?","_LINK":"SECTION-FAQ-How-did-the-SDoc-text-language-become-what-it-is"},"352":{"MID":"b3561dd4f8e64f11a251c3471022aece","STATEMENT":"See [LINK: SECTION-FM-SDoc-text-markup] for a description of the SDoc feature.\n","_LINK":"b3561dd4f8e64f11a251c3471022aece"},"353":{"MID":"1d4220cc9a5444a5bdbaee91c8c50670","TITLE":"How StrictDoc compares to other tools?","_LINK":"6-How-StrictDoc-compares-to-other-tools"},"354":{"MID":"45093addf6ec4772a0289fd958ae61dc","STATEMENT":"This section offers a comparison of several requirements tools similar to StrictDoc.\n","_LINK":"45093addf6ec4772a0289fd958ae61dc"},"355":{"MID":"a4533ae81bfe446295242add9156198e","TITLE":"Doorstop","_LINK":"6.1-Doorstop"},"356":{"MID":"d0c305180d8747a1b70254eaf2c4f201","STATEMENT":"The StrictDoc project is a close successor of another project called\n`Doorstop <https://github.com/doorstop-dev/doorstop>`_.\n\n    Doorstop is a requirements management tool that facilitates the storage of\n    textual requirements alongside source code in version control.\n\nThe author of Doorstop has published a `paper about Doorstop <http://www.scirp.org/journal/PaperInformation.aspx?PaperID=44268#.UzYtfWRdXEZ>`_\nwhere the rationale behind text-based requirements management is provided.\n\nThe first version of StrictDoc had started as a fork of the Doorstop project.\nHowever, after a while, the StrictDoc was started from scratch as a separate\nproject. At this point, StrictDoc and Doorstop do not share any code but\nStrictDoc still shares with Doorstop their common underlying design principles:\n\n- Both Doorstop and StrictDoc are written using Python. Both are pip packages which are easy-to-install.\n- Both Doorstop and StrictDoc provide a command-line interface.\n- Both Doorstop and StrictDoc use text files for requirements management.\n- Both Doorstop and StrictDoc encourage collocation of code and documentation.\n  When documentation is hosted close to code it has less chances of diverging\n  from the actual implementation or becoming outdated.\n- As the free and open source projects, both Doorstop and StrictDoc seem to\n  struggle to find resources for development of specialized GUI interfaces this\n  is why both tools give a preference to supporting exporting documentation\n  pages to HTML format as the primary export feature.\n\nStrictDoc differs from Doorstop in a number of aspects:\n\n- Doorstop stores requirements in YAML files, one separate file per requirement\n  (`example <https://github.com/doorstop-dev/doorstop/blob/804153c67c7c5466ee94e9553118cc3df03a56f9/reqs/REQ001.yml>`_).\n  The document in Doorstop is assembled from the requirements files into a\n  single logical document during the document generation process.\n  StrictDoc's documentation unit is one document stored in an .sdoc file. Such a\n  document can have multiple requirements grouped by sections.\n- In YAML files, Doorstop stores requirements properties such as\n  ``normative: true`` or ``level: 2.3`` for which Doorstop provides validations.\n  Such a design decision, in fact, assumes an existence of implicitly-defined\n  grammar which is encoded \"ad-hoc\" in the parsing and validation rules of\n  Doorstop.\n  StrictDoc takes a different approach and defines its grammar explicitly using\n  a tool for creating Domain-Specific Languages called `textX <https://github.com/textX/textX>`_.\n  TextX support allows StrictDoc to encode a strict type-safe grammar in a\n  `single grammar file <https://github.com/strictdoc-project/strictdoc/blob/93486a0e9fb30b141187587eae9e995cd86c6cbf/strictdoc/backend/dsl/grammar.py>`_\n  that StrictDoc uses to parse the documentation files\n  using the parsing capabilities provided by textX out of the box.\n\nThe roadmap of StrictDoc contains a work item for supporting the export/import\nto/from Doorstop format.\n","_LINK":"d0c305180d8747a1b70254eaf2c4f201"},"357":{"MID":"5012af516d18447caa3a2dbce97d3e4a","TITLE":"Sphinx","_LINK":"6.2-Sphinx"},"358":{"MID":"74b6be0dc2bb485987d8731348cdf5ce","STATEMENT":"Both Sphinx and StrictDoc are both documentation generators but StrictDoc is at\na higher level of abstraction: StrictDoc's specialization is requirements and\nspecifications documents. StrictDoc can generate documentation to a number of\nformats including HTML format as well as the RST format which is a default\ninput format for Sphinx. A two-stage generation is therefore possible:\nStrictDoc generates RST documentation which then can be generated to HTML, PDF,\nand other formats using Sphinx.\n\nIf you are reading this documentation at\nhttps://strictdoc.readthedocs.io/en/latest,\nyou are very close to a `StrictDoc-Sphinx example <https://strictdoc.readthedocs.io/en/latest/sphinx/>`_.\n\nThis documentation is first converted to RST format by StrictDoc, which is then processed by Read the Docs using Sphinx to generate the HTML website.\n\nThe\n``StrictDoc -> RST -> Sphinx -> PDF`` example is also generated using readthedocs:\n`StrictDoc <https://strictdoc.readthedocs.io/_/downloads/en/latest/pdf/>`_.\n","_LINK":"74b6be0dc2bb485987d8731348cdf5ce"},"359":{"MID":"515bcae39d1f48eda0b72562871ab15a","TITLE":"Sphinx-Needs","_LINK":"6.3-Sphinx-Needs"},"360":{"MID":"602327a9b8654e1eab4bc265e172a63d","STATEMENT":"`Sphinx-Needs <https://sphinxcontrib-needs.readthedocs.io/en/latest/>`_ is a\ntext-based requirements management system based on Sphinx. It is implemented\nas a Sphinx extension which extends the\n`reStructuredText (RST)\n<https://docutils.sourceforge.io/docs/user/rst/quickref.html>`_\nmarkup language with an additional syntax for writing requirements documents.\n\nSphinx-Needs was a great source of inspiration for the second version of\nStrictDoc which was first implemented as a Sphinx extension and then as a more\nindependent library on top of `docutils <https://docutils.sourceforge.io/>`_\nthat Sphinx uses for the underlying RST syntax processing work.\n\nThe similarities between Sphinx-Needs and StrictDoc:\n\n- In contrast to Doorstop, both Sphinx-Needs and StrictDoc do not split a\n  document into many small files, one file per single requirement (see\n  discussion\n  `doorstop#401 <https://github.com/doorstop-dev/doorstop/issues/401>`_). Both\n  tools follow the \"file per document\" approach.\n- Sphinx-Needs has a\n  `well-developed language\n  <https://sphinxcontrib-needs.readthedocs.io/en/latest/directives/index.html>`_\n  based on custom RST directives, such\n  as ``req::``, ``spec::``, ``needtable::``, etc. The RST document is parsed\n  by Sphinx/docutils into RST abstract syntax tree (AST) which allows creating\n  an object graph out for the documents and their requirements from the RST\n  document. StrictDoc uses textX for building an AST from a SDoc document.\n  Essentially, both Sphinx-Needs and StrictDoc work in a similar way but use\n  different markup languages and tooling for the job.\n\nThe difference between Sphinx-Needs and StrictDoc:\n\n- RST tooling provided by Sphinx/docutils is very powerful, yet it can also be\n  rather limiting. The RST syntax and underlying docutils tooling do not allow\n  much flexibility needed for creating a language for defining requirements\n  using a custom and explicit grammar, a feature that became a cornerstone of\n  StrictDoc. This was a major reason why the third generation of\n  StrictDoc started with a migration from docutils to\n  `textX <https://github.com/textX/textX>`_ which is a\n  dedicated tool for creating custom Domain-Specific Languages. After the\n  migration to textX, StrictDoc is no longer restricted to the limitations of\n  the RST document but it is still possible to generate SDoc files to RST\n  using StrictDoc and then further generate RST to HTML/PDF and other formats\n  using Sphinx.\n- Sphinx-Needs has an impressive list of config options and features that\n  StrictDoc is missing. Examples: Customizing the look of the requirements,\n  `Roles <https://sphinxcontrib-needs.readthedocs.io/en/latest/roles.html>`_,\n  `Services\n  <https://sphinxcontrib-needs.readthedocs.io/en/latest/services/index.html>`_\n  and\n  `others\n  <https://sphinxcontrib-needs.readthedocs.io/en/latest/index.html>`_.\n","_LINK":"602327a9b8654e1eab4bc265e172a63d"},"361":{"MID":"4a77366154d74cf7ab34044bed1cd542","TITLE":"FRET","_LINK":"6.4-FRET"},"362":{"MID":"e3eb1be604c6499292339ecbe7620c60","STATEMENT":"`FRET <https://github.com/NASA-SW-VnV/fret>`_ is a framework for the\nelicitation, specification, formalization and understanding of requirements.\n\n    - Users enter system requirements in a specialized natural language.\n    - FRET helps understanding and review of semantics by utilizing a variety of forms\n      for each requirement: natural language description, formal mathematical logics,\n      and diagrams.\n    - Requirements can be defined in a hierarchical fashion and can be exported\n      in a variety of forms to be used by analysis tools.\n\nFRET has an impressive list of\n`Publications <https://github.com/NASA-SW-VnV/fret/blob/master/PUBLICATIONS.md>`_.\n\nFRET's user interface is built with Electron.\n","_LINK":"e3eb1be604c6499292339ecbe7620c60"},"363":{"MID":"723731c256fc43dfb315a300f6429945","TITLE":"Other tools","_LINK":"6.5-Other-tools"},"364":{"MID":"ad24dca8ed9c449ab76c1798f38eb37c","STATEMENT":"See also this GitHub gist for an overview of more tools available on GitHub: https://gist.github.com/stanislaw/aa40eb7de9f522ad482e5d239c435ff8.\n","_LINK":"ad24dca8ed9c449ab76c1798f38eb37c"},"365":{"MID":"ff143a18e98144bd86e10e29616c187b","TITLE":"How long has the StrictDoc project been around?","_LINK":"7-How-long-has-the-StrictDoc-project-been-around"},"366":{"MID":"47d60404cf574aebb8c83795589c4137","STATEMENT":"The first StrictDoc commit dates back to ``2019-08-10``. A short development chronology of StrictDoc is as follows:\n\n**2019 – July – August**\n\nStrictDoc is a result of several attempts to find a solution for working with\ntext-based requirements. The first version of StrictDoc had started as a fork of the Doorstop project. However, after a while, StrictDoc was started from scratch as a separate project.\n\n**2019 – August**\n\nStrictDoc, first generation, the first commit dates to ``2019-08-10``. Markdown-based C++ program. Custom requirements metadata in YAML.\n\n**2020 – January**\n\nStrictDoc, second generation: RST/Sphinx-based Python program. Using Sphinx extensions to manage meta information.\n\n**2020 – May**\n\nThe current StrictDoc repository was created on GitHub: the first commit dates back ``2020-05-14``. The code still uses RST for parsing requirements meta information and PySide for GUI.\n\nThe result of these efforts was the realization that a text-based requirements and specifications management tool could be built on top of a domain-specific language (DSL) created specifically for the purpose of writing requirements and specifications documents. Such a language allows explicit definition of a document data model which is called \"grammar\".\n\n**2020 – July**\n\nThe custom RST parser was replaced with a TextX-based DSL. Since then, StrictDoc has been using TextX for parsing SDoc files.\n\n**2022 – November**\n\nThe FastAPI/Turbo/Stimulus-based Web interface prototype was created to complement the text-based interface with a graphical user interface (GUI). When the Web-based GUI is stable, StrictDoc may become useable by non-programmers too.\n\nSee also: [LINK: SECTION-DP-Project-milestones].\n","_LINK":"47d60404cf574aebb8c83795589c4137"},"367":{"MID":"6e5ed6bb36634220a0c583d21c96295f","TITLE":"Which StrictDoc statistics are available?","_LINK":"8-Which-StrictDoc-statistics-are-available"},"368":{"MID":"730bfedff6b24c34a6d6331051fd76d3","STATEMENT":"Most relevant GitHub statistics:\n\n- `Contributors <https://github.com/strictdoc-project/strictdoc/graphs/contributors>`_\n\nThe `pip trends <https://piptrends.com>`_ helps to visualize the Pip package download stats. The ``reqif`` satellite project is included for comparison as well:\n`strictdoc vs reqif <https://piptrends.com/compare/strictdoc-vs-reqif>`_.\n","_LINK":"730bfedff6b24c34a6d6331051fd76d3"},"369":{"MID":"0dd2649ec4784c9480eac6f4aef3158b","STATEMENT":"This document maintains a record of all changes to StrictDoc since November 2023. It serves as a user-friendly version of the changelog, complementing the automatically generated, commit-by-commit changelog available as GitHub releases: `StrictDoc Releases <https://github.com/strictdoc-project/strictdoc/releases>`_.\n","_LINK":"0dd2649ec4784c9480eac6f4aef3158b"},"370":{"MID":"f53df5a2e9674373a8f52f1a01b5010d","TITLE":"0.11.0 (2025-08-26)","_LINK":"1-0-11-0-2025-08-26"},"371":{"MID":"177963dca83748d89bfaeb01b3d663a8","STATEMENT":"This release includes the following enhancements and bug fixes.\n\nA new static HTML search has been added to the HTML export, making it possible to search for content in documentation trees. The feature is currently available only in the static HTML export but will be added to the web interface in the future.\n\nStrictDoc's ``Parallelizer`` class has been switched to a more modern and simpler ``ProcessPoolExecutor`` API. This change should resolve edge cases when running parallel processes on Windows and macOS. Previously, the StrictDoc parent process could occasionally hang because child processes were not always deallocated correctly.\n\nA standalone Python script for exporting a complete set of European space standards (ECSS) has been added to the ``tools/`` folder. The script generates a set of SDoc files from the ECSS Applicability Requirement Matrix (EARM) Excel file.\n\nNumbering of math equations has been fixed for RST markup. Thanks to @thseiler for contributing this improvement.\n","_LINK":"177963dca83748d89bfaeb01b3d663a8"},"372":{"MID":"a5ab8dd5bc4045e99299eff729e430e6","TITLE":"0.10.1 (2025-07-25)","_LINK":"2-0-10-1-2025-07-25"},"373":{"MID":"6d0bb97e7ef74fc1ae93cf2a91480e6a","STATEMENT":"This release includes the following enhancements and bugfixes.\n\n**1\\) Debug option to print detailed stack traces.**\n\nThe ``--debug`` option has been added to all commands in the StrictDoc command-line interface. Without this option, StrictDoc prints only the error message and the source of the error. When the ``--debug`` option is provided, StrictDoc prints a detailed stack trace of the exception that caused the error.\n\n**2\\) User-provided custom statistics generator.**\n\n- Reworked how metrics are collected, stored, and rendered. Introduced Metric and MetricSection classes to encapsulate the metrics displayed on the Statistics screen.\n\n- Added a configuration hook allowing users to specify a custom statistics generator. If provided, the custom generator overrides the default one.\n\n- StrictDoc now includes its own statistics generator, which will be customized over time for its own documentation.\n\n- Introduced four new metrics to the default statistics generator:\n\n  - Total source files\n  - Complete coverage\n  - Partial coverage\n  - No coverage.\n\n**3\\) Fix for updating HUMAN_TITLE in Edit Grammar Element UI.**\n\nThis change removes a previously implemented \"clever\" optimization that skipped saving a grammar element if none of its fields appeared to be modified. Over time, this check became outdated due to the introduction of new grammar element features such as HUMAN_TITLE, PROPERTIES/IS_COMPOSITE, PROPERTIES/VIEW_STYLE, and others. As a result, the issue manifested as a no-op where updates, such as changing a HUMAN_TITLE, were not saved to disk after submitting the form.\n\nThanks to @zheylmun for reporting this issue.\n","_LINK":"6d0bb97e7ef74fc1ae93cf2a91480e6a"},"374":{"MID":"447ab1fa1d38453ab46e0002e6eb852d","TITLE":"0.10.0 (2025-07-20)","_LINK":"3-0-10-0-2025-07-20"},"375":{"MID":"c536381cea6842f0b77c1aa5ac942ce0","STATEMENT":"This release includes the following enhancements and bugfixes.\n\n**1) A small improvement to the behavior of the LEVEL/AUTO_LEVEL fields.**\n\nThe following cases are now considered valid and will no longer trigger validation errors:\n\n- **When AUTO_LEVELS is On**, a node without a level or with a custom level is acceptable. The custom level will be used as-is, while all other nodes will be numbered automatically.\n\n- **When AUTO_LEVELS is Off**, a node without a level is also valid. In this case, the node will simply be omitted from the Table of Contents (TOC).\n\n**2) Initial support for direct reading of ReqIF files alongside SDoc files.**\n\nIt is now possible to add a ReqIF file to a Git repository and have it read directly into the StrictDoc HTML view, without first converting it to SDoc. The conversion to internal SDoc models happens automatically at runtime. This feature enables workflows where a requirements baseline is maintained in a ReqIF file, and there is no need to convert it to SDoc before adding parent trace links from child SDoc documents stored in the same repository.\n\n**3) ReqIF Schema compatibility for ReqIF export.**\n\nStrictDoc now exports ReqIF files that fully comply with the ReqIF XSD schema. Previously, exported files could trigger minor validation errors — harmless but distracting when editing XML in an IDE. These issues have now been resolved. All relevant integration tests have been updated to include schema validation, ensuring ongoing compliance with the ReqIF XSD standard.\n\n**4) Support HTTP Conneg on stable links.**\n\nThis change enables an API integration with StrictDoc. It lays the groundwork for implementing APIs such as OSLC Requirements Management, allowing integration with tools like IBM DOORS NG, the broader IBM Jazz platform, Siemens Polarion, and other OSLC-compliant systems.\n\nWith this change, StrictDoc can support content negotiation based on the Accept header in incoming requests. For example:\n\n- When a client requests a requirement with ``Accept: text/html``, StrictDoc will serve the regular HTML export.\n\n- When a tool like Polarion sends a request for the same URI but with headers such as ``Accept: text/turtle;q=0.9, application/ld+json;q=0.7, application/rdf+xml;q=0.5``, the server can detect this and return an appropriate OSLC-compliant response instead.\n\nThis approach enables serving different representations of the same requirement, e.g.,\n``localhost:3000/?a=SDOC-HIGH-REQS-MANAGEMENT``, while maintaining a consistent ID across formats.\n\nThanks to @berezovskyi for contributing this change.\n\n**5) The DOCUMENT_FROM_FILE compatibility with new [[SECTION]] syntax.**\n\nDuring the migration to [[SECTION]], we overlooked verifying that the DOCUMENT_FROM_FILE directive works with the new section elements. Based on a user report, this has now been corrected — DOCUMENT_FROM_FILE is fully compatible with [[SECTION]].\n\nThanks to @nowittyusername for reporting this issue.\n\n**6) The TITLE-STATEMENT-DESCRIPTION-CONTENT validation has been removed.**\n\nStrictDoc no longer requires one of the fields TITLE-STATEMENT-DESCRIPTION-CONTENT to be present on every SDoc node. The rationale for removal is as follows.\n\nThere are cases where we want to allow none of the standard SDoc reserved fields to be present on a node, even though this means that no SDoc naming conventions are followed.\n\nIn particular, some ReqIF files contain fields that follow neither ReqIF nor SDoc naming conventions.\n\nPreviously, the fields TITLE, STATEMENT, DESCRIPTION, or CONTENT were used to determine whether a field should be treated as single-line or multiline. Under the new behavior, if none of these fields are present, all fields will be treated as multiline by default.\n\nIn the future, we may introduce a separate field for the GrammarElement field declarations, for example, to explicitly specify whether a field should be interpreted as Title, Meta, Content, etc.\n","_LINK":"c536381cea6842f0b77c1aa5ac942ce0"},"376":{"MID":"aa45a90bad3f4273ab46dade039ef4c6","TITLE":"0.9.4 (2025-07-12)","_LINK":"4-0-9-4-2025-07-12"},"377":{"MID":"a25dd134646e462ca09e850481bccb2b","STATEMENT":"This release contains two enhancements:\n\n- `rst: support for sphinx-style math syntax #2367 <https://github.com/strictdoc-project/strictdoc/pull/2367>`_\n  This PR adds support for the Sphinx-style ``.. math::`` directive and the ``:math:`` role for inline formulas in StrictDoc. These formulas are rendered by MathJax when it is enabled as a feature. [@thseiler]\n\n- `tests/integration: connecting source file to [[SECTION]] in included document #2366 <https://github.com/strictdoc-project/strictdoc/pull/2366>`_\n  Previously, there was no explicit integration test verifying the link between a source file and a ``SECTION`` element. This feature was requested by a user. During implementation, it was discovered that an outdated assertion had to be removed to enable rendering of a ``SECTION`` that links to a source file.\n","_LINK":"a25dd134646e462ca09e850481bccb2b"},"378":{"MID":"eca2ad204c8246a8b0f29a5eb8d7f799","TITLE":"0.9.3 (2025-07-03)","_LINK":"5-0-9-3-2025-07-03"},"379":{"MID":"64706a3d4d9c4beda3597ffa9d92921a","STATEMENT":"This release includes a single change: the licensing update of the ``html2pdf4doc`` component. Its license has been finalized as Apache 2.0, replacing the previous combined Apache 2.0/TBD licensing. From now on, html2pdf4doc is fully licensed under Apache 2.0, without any restrictions, for use both within and outside of StrictDoc.\n","_LINK":"64706a3d4d9c4beda3597ffa9d92921a"},"380":{"MID":"6665c867a01f49f59968ae83d2e928fe","TITLE":"0.9.2 (2025-06-28)","_LINK":"6-0-9-2-2025-06-28"},"381":{"MID":"d56dfede85b84e07bd5ecddc82a576fc","STATEMENT":"This update fixes two important problems:\n\n**Problem 1: StrictDoc crashing or hanging on Windows (infrequently)**\n\nStrictDoc used to get stuck when running on Windows where a child process would be left handing and never terminate. We fixed this by changing how the program shuts down:\n\n- On Linux and Mac: We now close the multiprocessing queues and join their threads.\n- On Windows: We also close the multiprocessing queues but and cancel their threads instead of joining them.\n\nAfter testing the fix thoroughly, it appears to solve the crashing problems. The fix addresses these two reported issues:\n\n- `Bug: Process parallelization has become flaky on Windows (rarely) #2121 <https://github.com/strictdoc-project/strictdoc/issues/2121>`_\n- `Bug: Parallellization edge case on Windows #2083 <https://github.com/strictdoc-project/strictdoc/issues/2083>`_\n\n**Problem 2: Conflicts when reading Linux code files**\n\nIn version 0.9.0, we added a new feature that reads comments from C/C++ code files as SDoc nodes, see\n`Feature: Support for parsing C/C++ test descriptions #2231 <https://github.com/strictdoc-project/strictdoc/issues/2231>`_, but this caused problems when running StrictDoc against the Linux kernel source code. The program would crash because it got confused by text that _almost_ looked like our special comment format.\n\nWe fixed this by making the parser better at handling the difference between the relation markers, SDoc node declarations, and regular comments and turning off this feature by default. From now on, if you want to use this feature, you need to add ``source_nodes`` to your strictdoc.toml settings file. See [LINK: SECTION-UG-Parsing-SDoc-source-nodes] for the feature description.\n","_LINK":"d56dfede85b84e07bd5ecddc82a576fc"},"382":{"MID":"a5ab3ca7210f4c18a465e7686e71c15f","TITLE":"0.9.1 (2025-06-14)","_LINK":"7-0-9-1-2025-06-14"},"383":{"MID":"fbf2c4dcf8154779b3ac914d9ff335c4","STATEMENT":"This release contains only one change related to how StrictDoc manages the cache path.\n\nThe default cache output directory has been changed to a dedicated ``_cache`` folder under the output directory (i.e., ``output/_cache``). This improves transparency by making it easier for users to inspect what StrictDoc caches and where. Previously StrictDoc cache was generated to an OS temporary folder by default.\n\nIn addition, the caching mechanism now stores cache files in a version-specific subdirectory. Each cache path includes the StrictDoc version as a suffix, preventing conflicts between caches generated by different versions when switching between them.\n\n.. note::\n\n    For example, for StrictDoc version 0.9.1, the default cache folder will be: ``output/_cache/0.9.1``.\n","_LINK":"fbf2c4dcf8154779b3ac914d9ff335c4"},"384":{"MID":"71b0ec45b5644c5083085c83ef6be95e","TITLE":"0.9.0 (2025-06-10)","_LINK":"8-0-9-0-2025-06-10"},"385":{"MID":"72d1a7e4b54d44e38778d87c74075dc8","STATEMENT":"This release introduces a major migration and several new features.\n\n1\\) A new syntax has been introduced for composite nodes: ``[[NODE]]``. It is now possible to register composite nodes in the document grammar by setting the property ``IS_COMPOSITE: True``. The long-standing core grammar element ``[SECTION]`` has been deprecated in favor of ``[[SECTION]]``, making sections proper composite nodes like any other grammar element. See [LINK: SECTION-UG-NODE-MIGRATION] for migration details.\n\n2\\) The JUnit XML test report support has been extended to handle results produced by Pytest's unittest-style class-based tests. [@thseiler]\n\n3\\) The Python source code reader has been improved to correctly handle decorators and nested functions. [@thseiler]\n\n4\\) The C source code reader has been enhanced to handle a specific edge case related to code comments.\n\n5\\) The web interface has been added for the existing TAG grammar field type. The interface now includes autocompletion for both multi-choice and tag fields. [@thseiler]\n\n6\\) Source code parsing now includes initial support for extracting SDoc nodes directly from source files. Additionally, the source comment parser can now handle multiline \\@relation markers. This feature is not yet documented and will be further refined as part of https://github.com/strictdoc-project/strictdoc/issues/2231.\n\n7\\) Support for reading Robot Framework source files and test reports has been added. ``.robot`` files can now be parsed natively by StrictDoc and integrated into the traceability graph. [@haxtibal]\n\n8\\) The ``DOCUMENT`` grammar has been extended with an optional ``METADATA`` block which allows users to define custom metadata fields. The web interface now includes a form for editing these fields. Additionally, the front page template used in the HTML2PDF feature has received several fixes and improvements. [@thseiler]\n\n9\\) The underlying Python/JS library used by HTML2PDF has been moved to a new pip package called ``html2pdf4doc``, which includes several layout-related fixes.\n\n10\\) Initial support for reading Gcov reports as SDoc documents has been added. This feature is experimental and still under development, pending on further user feedback.\n\n11\\) The Project Statistics screen now displays statistics for all available node statuses. Previously, the statistics were hardcoded for only a limited set of statuses.\n\n12\\) Stable links based on a statically generated UID map have been introduced. These links allow navigation to both static HTML and the web interface. Each request is redirected to the correct target node, such as a requirement or section. [@thseiler]\n\n13\\) The Source Coverage screen now supports sorting all table columns in ascending or descending order. [@mettta]\n\n14\\) A major code cleanup raised the Code Climate score to over 94%. Several missing tests were added, and a substantial amount of unused or outdated code was removed. Several mypy-related commits have been merged, resulting in the overall stronger typing system in StrictDoc. Thanks to @thseiler for supporting the Code Climate work.\n","_LINK":"72d1a7e4b54d44e38778d87c74075dc8"},"386":{"MID":"d64fb5003399496bbb18ffb6e05efaf4","TITLE":"0.8.0 (2025-04-13)","_LINK":"9-0-8-0-2025-04-13"},"387":{"MID":"a7bd074d2dcd40a6af106e91720d90d3","STATEMENT":"This release includes the following enhancements.\n\n1\\) The source file traceability mechanism now supports specifying roles for relations and markers. A role marker can be skipped or specified to a value such as ``Implementation`` or ``Implements``, ``Test`` or ``Verifies``, etc.[@haxtibal]\n\n2\\) The Source View screen has undergone a major user interface redesign. Visual highlighting has been improved for traceability to and from entire files, classes (available in Python but not in C), functions, code ranges, and individual lines. Fully detailed but collapsible requirement cells have been added above the relevant functions, ranges, and so on, allowing users to quickly review them without leaving the Source View screen. The Source Coverage screen has also been reworked to match the new look of the Source View screen.\n\n3\\) A Python source file reader has been extended to support a case when the first docstring is not necessarily the first node of a module [@thseiler]\n\n4\\) An initial proof of concept for reading JUnit XML files and tracing test results back to test cases has been implemented. If a test case references a requirement, the test result will also be transitively linked to that requirement through the test case. Thanks to @johanenglund for explaining the use case and creating the first proof of concept examples.\n\n5\\) The command ``strictdoc server`` command has been extended to support the ``--host`` parameter. A user requested this feature to allow changing the server host which enables running the server within the StrictDoc Docker container.\n\n6\\) Minor fixes to the main document view interface.\n\n7\\) The long-standing warning from the Uvicorn server has finally been resolved. The warning was harmless and came from Uvicorn's opinionated handling of the reload configuration. The reload feature is used only during StrictDoc development and was never intended for end users, but Uvicorn still issued a warning because some parts of StrictDoc's configuration code weren't fully disabled for end-user environments:\n\n.. code-block::\n\n    WARNING:  Current configuration will not reload as not all conditions are met, please refer to documentation.\n\nThanks to @MartyLake for pointing it out – it helped us prioritize fixing the issue.\n","_LINK":"a7bd074d2dcd40a6af106e91720d90d3"},"388":{"MID":"58b99c15df8445ce9832e24a17588e2c","TITLE":"0.7.0 (2025-03-03)","_LINK":"10-0-7-0-2025-03-03"},"389":{"MID":"c5725f24fcd24d54929e155f6ad47b44","STATEMENT":"This release includes the following enhancements.\n\nThe autocompletion dropdown has been added to the relation editor in the Web GUI. [@thseiler]\n\nLink anchors are no longer generated using section numbers, which improves their stability when StrictDoc documentation is linked from external sources. If a requirement is moved to another section within the same document, the original link will still correctly resolve to the UID [@thseiler].\n\nThe legacy FREETEXT parsing has been completely removed from Document and Section. The [FREETEXT] marker is no longer recognized by StrictDoc, allowing for the removal of a significant amount of legacy code.\n\nBased on user feedback, the StrictDoc's Dockerfile now supports the HTML2PDF feature. The container file was refactored to be based on Ubuntu 24 which is the default Linux platform for StrictDoc development and testing. The image installs Google Chrome which enables the HTML2PDF to work out of the box without any other installation steps.\n\nOver the years, StrictDoc has been transitioning to a 100% statically-typed codebase. As part of the ongoing refactoring of StrictDoc's type system, more type annotations have been added to the core StrictDoc model classes (Document, Node, Section, DocumentFromFile, etc.). These improvements should further reduce the risk of future regressions due to stronger static type checking.\n","_LINK":"c5725f24fcd24d54929e155f6ad47b44"},"390":{"MID":"ff59e375101145b3bf12465ce2b5fc14","TITLE":"0.6.0 (2025-02-16)","_LINK":"11-0-6-0-2025-02-16"},"391":{"MID":"3ddfc6462bec45b2ac69a1799293c7da","STATEMENT":"This release includes the following enhancements:\n\nThe HTML2PDF library has been extracted into a separate Python package, which now also bundles the HTML2PDF.js library. Both repositories are available under the Apache 2 license when used within StrictDoc:\n\n- https://github.com/mettta/html2pdf\n- https://github.com/mettta/html2pdf_python\n\nThe Excel import feature now supports the .xlsx format [@thseiler].\n\nThe Search Screen provides more detailed error messages when search query syntax errors occur [@mplum].\n\nThe TextX dependency has been upgraded to resolve a conflict, and minor improvements have been made to StrictDoc's documentation [@nogjam].\n","_LINK":"3ddfc6462bec45b2ac69a1799293c7da"},"392":{"MID":"d9e164994bb941ada8aecc73000bd51d","TITLE":"0.5.0 (2025-01-06)","_LINK":"12-0-5-0-2025-01-06"},"393":{"MID":"d0d93f5eb37247079cc182e924dabd14","STATEMENT":"This release contains several enhancements, bug fixes, and performance improvements:\n\n- The Diff screen now supports child relations. Special thanks to @mplum for contributing the core patch.\n- On macOS, the parallelization algorithm now uses \"fork\" instead of \"spawn\", leading to a good performance boost.\n- The source file traceability HTML is now incrementally generated, re-rendering only when the source file or its related requirements are modified.\n- The HTML2PDF feature excludes included documents when creating a bundled document. The assumption is that a user is only interested in seeing the final including documents, not the included standalone documents.\n- Asset search optimization: Asset-finding code now filters out irrelevant directories early, avoiding repeated and unnecessary searches, improving efficiency.\n","_LINK":"d0d93f5eb37247079cc182e924dabd14"},"394":{"MID":"e7df8274f42c4e01b02ad840e6b2569c","TITLE":"0.4.0 (2024-12-25)","_LINK":"13-0-4-0-2024-12-25"},"395":{"MID":"f4e63483a11b442993c47b5d0574e89b","STATEMENT":"This release introduces language-aware tracing between requirements and C++ source code.\n\nCurrently, only C++ functions can be traced using a marker like ``@relation(REQ-1, scope=function)``. The ability to add markers to classes has not yet been implemented.\n\nA new export format has been added to generate a Doxygen tagfile for a documentation tree. When the tagfile is registered in the Doxygen configuration, requirements can be referenced using Doxygen keywords. For example: ``\\relation{REQ-1, scope=function}``. Special thanks to @johanenglund for contributing the idea and helping to implement the solution.\n\nThe @-macros @GIT_VERSION, @GIT_BRANCH, @GIT_COMMIT_DATE, and @GIT_COMMIT_DATETIME were introduced to simplify the automatic insertion of document version information and publication dates into published documents.\n\nAn edge case for reading source files has been addressed. StrictDoc will now issue a warning if it encounters a binary file instead of a source code file, preventing a crash. [Contributed by @haxtibal]\n\nA user has contributed an example demonstrating how requirements can be generated into an Excel questionnaire for users to fill out, enabling requirements compliance tracking. The example is located at ``tests/integration/scripting_examples/questionnaires/``. [Contributed by @BenGardiner]\n\nAdditionally, a minor HTML2PDF formatting issue has been resolved. Previously, the RST admonitions in StrictDoc's own documentation were not rendered correctly when spanning across two pages.\n","_LINK":"f4e63483a11b442993c47b5d0574e89b"},"396":{"MID":"591c1b85c6fb4453aee08e23cb9f257a","TITLE":"0.3.0 (2024-11-21)","_LINK":"14-0-3-0-2024-11-21"},"397":{"MID":"b39a3b3d9f8640e380dad5a2fdb75d79","STATEMENT":"This release includes an enhancement to the feature for tracing requirements to C source code.\n\nFrom now on, if a ``@relation`` marker is specified in a C function declaration, StrictDoc will perform its \"magic\" and automatically connect the referenced requirement to the corresponding C function definition. This allows a ``@relation`` marker to be placed in the main documentation block, typically located above C function declarations, while ensuring the requirement is also linked to the function definition.\n","_LINK":"b39a3b3d9f8640e380dad5a2fdb75d79"},"398":{"MID":"f4cd860f07b1479ba1845bce3c749d68","TITLE":"0.2.1 (2024-11-10)","_LINK":"15-0-2-1-2024-11-10"},"399":{"MID":"26043bba142a4e739dd206e229829202","STATEMENT":"This release includes a new feature, a bug fix, and some documentation updates.\n\n- The ``[LINK: ...]`` feature now supports linking to documents by UID. [@haxtibal]\n- HTML escaping was fixed on the Diff/Changelog screen. [@haxtibal]\n\nThe documentation now includes two new pages:\n\n- The \"Feature Map\" document provides a high-level overview of the major StrictDoc features from the user's perspective.\n- The Troubleshooting document offers advice on clearing the user cache, one of the common solutions to user issues. We plan to expand this section with more tips over time.\n","_LINK":"26043bba142a4e739dd206e229829202"},"400":{"MID":"f76d863243b5410788e457b9c3bf1d2b","TITLE":"0.2.0 (2024-11-04)","_LINK":"16-0-2-0-2024-11-04"},"401":{"MID":"611e8df13d464fd1b22e5026cf3ce531","STATEMENT":"This release introduces several enhancements to the source code processing introduced in release 0.1.0.\n\nThe backend now supports improved function tracing in C, Python, and general parsing code:\n\n- Forward ranges to C functions now include the top comment.\n- Each range type is displayed in the output HTML.\n- The C source code reader has been updated to support file-level scoping.\n- The source code reader now caches parsed objects to disk, improving reading performance.\n- Proper handling of functions inside nested Python classes has been implemented, allowing syntax like Foo.Bar.do_baz. Thanks to @haxtibal for contributing this enhancement.\n\nAdditionally, caching has been centralized, and the cache directory is now configurable. The project configuration file now supports a ``cache_dir`` option, which can be set to values such as ``./output/build``. This setting can help make caching artifacts visible alongside documentation artifacts.\n","_LINK":"611e8df13d464fd1b22e5026cf3ce531"},"402":{"MID":"83878b68483f4da2930bfb3712c08aa3","TITLE":"0.1.0 (2024-11-01)","_LINK":"17-0-1-0-2024-11-01"},"403":{"MID":"e37e230c932448798bd9978d4f27f32c","STATEMENT":"This backward-compatible release introduces several new features for tracing requirements to source files:\n\n- StrictDoc now integrates with `Tree-sitter <https://tree-sitter.github.io/tree-sitter/>`_, enabling it to parse multiple programming languages. Using AST information, it achieves more precise tracing of requirements to source code.\n- Language-specific parsers for Python and C have been added, allowing functions (in C and Python) or classes (in Python) to be linked to requirements.\n- Both forward linking of requirements to source files and backward linking of source files to requirements are supported. These features can be used independently or together within the same project.\n\nWith this release, we are also transitioning to a more `semantic versioning <https://semver.org>`_-oriented release scheme. From now on, the MAJOR.MINOR.PATCH version components will be maintained according to the recommendations of the semantic versioning specification.\n","_LINK":"e37e230c932448798bd9978d4f27f32c"},"404":{"MID":"771fb5350bf840e4b30485fe9e8d9452","TITLE":"0.0.60 (2024-10-26)","_LINK":"18-0-0-60-2024-10-26"},"405":{"MID":"65daf4400b464021ba3cb7a06061e651","STATEMENT":"This is a bugfix release with several fixes:\n\n- Web UI: Add 'TAG' as a supported fieldtype for requirement nodes. Previously, the UI interface would not open an element with a TAG-based field, raising a NotImplementedError. [@mplum]\n\n- Search Screen: Prevent query failure when node is missing requested field [@mplum]\n\n- Project Statistics: Fix generated search URLs for project statistics [@haxtibal]\n","_LINK":"65daf4400b464021ba3cb7a06061e651"},"406":{"MID":"4538fe1994bc4730b7febe3dc624f704","TITLE":"0.0.59 (2024-10-13)","_LINK":"19-0-0-59-2024-10-13"},"407":{"MID":"e9d5e3f8f6b04647afb95bae6b2f503a","STATEMENT":"This release includes several important improvements. Thanks to @haxtibal for implementing and testing many of the implemented changes.\n\n- Fixed multiple issues related to the handling of the UID field's format and accepted characters, both on its own and when used as part of LINK and ANCHOR tags. [@haxtibal]\n\n- Implemented a more consistent and unified approach to escaping Jinja templates. With this change, the Jinja templates that StrictDoc uses for rendering content are now automatically escaped, except for a few known edge cases that have been handled separately. For more details, see the \"HTML Escaping\" section of the Design Document, which describes the rationale and approach taken. [@haxtibal]\n\n- Extended the HTML2PDF feature to support the ``--generate-bundle-document`` option, which allows generating a single PDF document from all documents in an SDoc documentation tree.\n\n- Additionally, a project configuration option was added to specify a custom path to the ChromeDriver used by the HTML2PDF printer. [@haxtibal]\n\n- Enhanced the SDoc-ReqIF-SDoc roundtrip to include relation roles such as Refines, Implements, etc. These roles are now recognized in both directions. This feature was requested by a single user and requires further testing.\n\n- Deprecated the passthrough command. All passthrough functionality has been moved to the export command under the option ``--formats=sdoc``. Users are encouraged to switch to the export command, as using passthrough will now trigger a deprecation warning. [@haxtibal]\n\n- Fixed a bug related to editing custom (non-requirement) nodes and adding links between them, based on a report by @elfman2.\n\n- The Python 3.7 support was removed. The lowest Python baseline will now be 3.8 for some time.\n","_LINK":"e9d5e3f8f6b04647afb95bae6b2f503a"},"408":{"MID":"306a619f550f4be18db6dbb987df3248","TITLE":"0.0.58 (2024-06-25)","_LINK":"20-0-0-58-2024-06-25"},"409":{"MID":"fd7f4d5b58e54f64aa43349684a675c4","STATEMENT":"This is a release with a single fix and a minor documentation update.\n\nThe ``manage auto-uid`` command is now compatible with grammars that define the ``UID`` field as ``REQUIRED: True``. Previously, StrictDoc would raise a validation message if the ``auto-uid`` command was run against a document with ``UID`` defined as a required field but containing nodes without ``UID``. The new behavior allows the ``auto-uid`` command to operate without validation and correctly creates a new UID for the node. Thanks to @simhein for reporting this issue.\n\n@haxtibal contributed a patch to the User Guide that explains the StrictDoc convention of how the single-line (meta information) fields should be used compared to the multiline fields, such as ``STATEMENT``, ``RATIONALE``, ``COMMENT``, etc. Quoting the key part:\n\n    Each grammar element must have exactly one content field named ``STATEMENT``, ``DESCRIPTION`` or ``CONTENT``. The content field plays a key role in the HTML user interface as well as other export formats.\n\n    All fields before the content field are considered meta information. Meta information fields are assumed to be single-line. The content field and all following fields accept single-line and multiline strings.\n\nSee the updated User Guide for more details.\n","_LINK":"fd7f4d5b58e54f64aa43349684a675c4"},"410":{"MID":"0795627e25e343f3b1b476b673a543ab","TITLE":"0.0.57 (2024-06-23)","_LINK":"21-0-0-57-2024-06-23"},"411":{"MID":"f99185cb69cf47d4bc6e1bd404b67467","STATEMENT":"This release contains a significant, non-breaking change that affects the entire StrictDoc codebase and the SDoc data model: the ``FREETEXT-TEXT`` migration.\n\nThe description of the migration and the migration paths are described in [LINK: SECTION-UG-FREETEXT-TEXT].\n\nOther changes in this release:\n\n- The validation messages for the uniqueness of MID fields were improved for the Document, Section and Requirement/Text nodes. Thanks to @bernhard-tuvsud for the improvement suggestion.\n\n- Due to the FREETEXT-TEXT migration, it is now possible to add LINKs to arbitrary nodes, such as REQUIREMENT and TEXT. Previously, LINKs could be added only to SECTION nodes. Thanks to @haxtibal for contributing the initial implementation.\n\n- The UI validations have been added for SingleChoice and MultipleChoice fields. Thanks to @haxtibal for contributing the multiple choice field validation.\n\n- The experimental Graphviz/Dot traceability graph generator has been removed because this feature didn't show much value, mainly due to the static and non-programmable nature of PDF and SVG outputs produced by Graphviz.\n","_LINK":"f99185cb69cf47d4bc6e1bd404b67467"},"412":{"MID":"cd994052a0354410a550858a1f25d426","TITLE":"0.0.56 (2024-06-02)","_LINK":"22-0-0-56-2024-06-02"},"413":{"MID":"61f17be85ac442a0b70003825d671ced","STATEMENT":"This is an intermediate bugfix release before the release which will contain major changes.\n\nThe following issues have been fixed:\n\n`Composable documents: edge case when a single document path is provided for a document that depends on other documents (#1807) <https://github.com/strictdoc-project/strictdoc/issues/1807>`_\n\n`backend/sdoc: validate grammar from file like a normal grammar (#1831) <https://github.com/strictdoc-project/strictdoc/issues/1831>`_. Thanks to @haxtibal for reporting this.\n\n`backend/reqif: exporting grammar types (#1809) <https://github.com/strictdoc-project/strictdoc/issues/1809>`_. Thanks to ``@PQ`` from Discord for giving feedback about the end-to-end export/import between StrictDoc and Polarion.\n\n`html2pdf: specify UTF-8 encoding when writing HTML file (#1816) <https://github.com/strictdoc-project/strictdoc/issues/1816>`_. Thanks to @npalluat for reporting this based on their experience of running StrictDoc on Windows.\n\n`backend/sdoc: allow using \"DESCRIPTION\" or \"CONTENT\" field instead of \"STATEMENT\" (#1827) <https://github.com/strictdoc-project/strictdoc/issues/1827>`_  Previously only STATEMENT could be used as a reserved statement field. Now StrictDoc will auto-detect two more alternative fields if they are present: ``DESCRIPTION`` or ``CONTENT``. Thanks to @haxtibal for requesting this and explaining the use case.\n\n`pyproject.toml: update python-datauri (#1820) <https://github.com/strictdoc-project/strictdoc/issues/1820>`_ @DomenicP reported an issue to ``python-datauri`` which StrictDoc depends on. They ``ran into an integration issue with the datauri library installing tests to the virtual environment. The library maintainer was kind enough to quickly resolve the issue in fcurella/python-datauri#14.`` Thanks @DomenicP!\n","_LINK":"61f17be85ac442a0b70003825d671ced"},"414":{"MID":"938f1a0fdcc94c5aaa87ddb18b880afe","TITLE":"0.0.55 (2024-04-28)","_LINK":"23-0-0-55-2024-04-28"},"415":{"MID":"00abb07e55534a75a8cfd50d8cfc5732","STATEMENT":"The ReqIF export/import feature was extended to support three new command-line options for an improved export/import interfacing with Polarion. See [LINK: SECTION-UG-ReqIF-options] for more details.\n\nThe Composable Documents feature was extended to support copying assets to the HTML output folder in a redundant way in the case when an included document is stored in a different directory than the parent including document. See https://github.com/strictdoc-project/strictdoc/issues/1777 for the problem definition. Thanks to @Briceus from StrictDoc's Discord channel for reporting this issue.\n\nStrictDoc's caching feature was extended to work around pickling errors when an outdated item is found in a cache. Such issues happen due to the (rare) refactorings in StrictDoc's data model. In this specific case, the previous ``FragmentFromFile`` Python class was renamed to ``DocumentFromFile`` and that caused problems when unpickling outdated cached content on a user machine. Thanks to @nashif for reporting this.\n","_LINK":"00abb07e55534a75a8cfd50d8cfc5732"},"416":{"MID":"055ee004b28647629eead8165f198579","TITLE":"0.0.54 (2024-04-17)","_LINK":"24-0-0-54-2024-04-17"},"417":{"MID":"e5bf489ac0684ea4b626574b5439c7dd","STATEMENT":"1) Two improvements were made to the Composable Documents feature, when included document's root node is edited in including document:\n\n- If a document is included to another document, now it is possible to edit a title and a free text of the included document.\n- It is now possible to add nodes below, above, and inside a root node of an included document. Previously, the UI controls for adding any nodes from the root node were disabled.\n\n2) HTML2PDF feature was updated to support printing UTF8-based documents on Windows.\n\n3) The feature that allows moving TOC (Table of Contents) nodes using drag-and-drop has been enhanced. Now, each TOC element maintains its open or closed state independently of its parent section. Previously, there was some dependency between child and parent TOC nodes, which made quick editing of the TOC more challenging.\n","_LINK":"e5bf489ac0684ea4b626574b5439c7dd"},"418":{"MID":"87b7b54fa4024959bdcb42ded18f77f2","TITLE":"0.0.53 (2024-04-01)","_LINK":"25-0-0-53-2024-04-01"},"419":{"MID":"2ac296f6326b4481beb7d67b95dbb23c","STATEMENT":"The JSON export algorithm was extended to support composable documents. By default, the included documents are exported only as part of their including documents. To export both the including documents and included documents' standalone SDoc content, the option ``--included-documents`` option has to be specified with the ``export`` command.\n\nAll code related to pybtex/BibTeX bibliographies has been removed from the StrictDoc project tree. This work was left unfinished for a long time and became unused legacy code over time. See the PR: `Remove all BibTeX bibliography-related code and pybtex dependency <https://github.com/strictdoc-project/strictdoc/pull/1744>`_ for more explanation.\n","_LINK":"2ac296f6326b4481beb7d67b95dbb23c"},"420":{"MID":"36a70af62b3e4a5d8bf08d9345fda095","TITLE":"0.0.52 (2024-03-25)","_LINK":"26-0-0-52-2024-03-25"},"421":{"MID":"72d6e38e89cc471b8d3f46ae5654e0e6","STATEMENT":"The **Grammar from File** feature has been implemented. Now it is possible to declare a usual StrictDoc ``[GRAMMAR]`` in a dedicated file with an ``.sgra`` extension. When a grammar is declared in a separate file, it is possible to share this grammar between several documents. Editing of the grammars defined in ``.sgra`` files can be only done with a text editor, it is not implemented yet in the editable web interface.\n","_LINK":"72d6e38e89cc471b8d3f46ae5654e0e6"},"422":{"MID":"6c72f8654ea1401ea2a6e4ab82cf76e4","TITLE":"0.0.51 (2024-03-20)","_LINK":"27-0-0-51-2024-03-20"},"423":{"MID":"e81c4206bcb148979762ee3f2aa5c9ba","STATEMENT":"This is a bugfix release with only one change.\n\nA regression was introduced during recent internal refactoring, resulting in malfunctions on the Search screen when opening search links like \"Find all requirements\" or \"Find all sections.\" This release fixes the introduced regression.\n","_LINK":"e81c4206bcb148979762ee3f2aa5c9ba"},"424":{"MID":"413952c14412434fb237c3e909101707","TITLE":"0.0.50 (2024-03-19)","_LINK":"28-0-0-50-2024-03-19"},"425":{"MID":"a9d7c449d1a7400496504926c744e500","STATEMENT":"**Breaking change:** The \"Fragments\" feature has been replaced by the \"Composable documents\" feature:\n\n- The command ``[FRAGMENT_FROM_FILE]`` has been renamed to ``[DOCUMENT_FROM_FILE]``.\n- Rather than importing section-like fragments, standard SDoc documents can now be included within other SDoc documents.\n- The web interface has been updated to support viewing and editing documents both as standalone items and when they are included in other documents.\n- Not everything related to the composable documents has been implemented. For example, the ability to drag and drop TOC (Table of Contents) nodes in documents that include other documents. Currently, moving the TOC in documents that include other documents is disabled.\n- Further work for the editable web interface can be found here: https://github.com/strictdoc-project/strictdoc/issues/1698.\n\n----\n\n**Other changes:**\n\n- The functionality of the HTML2PDF script on Windows has been corrected for scenarios where StrictDoc is operated within a virtual environment. Special thanks to @Timotheous for highlighting this issue.\n","_LINK":"a9d7c449d1a7400496504926c744e500"},"426":{"MID":"3a03dd169ffb4fe0b64f48b365a77d2e","TITLE":"0.0.49 (2024-03-11)","_LINK":"29-0-0-49-2024-03-11"},"427":{"MID":"0b8c8f40923744b089845afeb44223e9","STATEMENT":"The web interface code has been extended to allow editing arbitrary nodes. Previously, only editing the REQUIREMENT type was possible. From now on, it is possible to use the web interface to create custom grammar elements and nodes of corresponding grammar element types.\n\nA basic JSON export feature has been added. Now it is possible to export a StrictDoc project tree to a single JSON file with a structure that mirrors the structure of the SDoc grammar.\n\nThanks to the work by @dahbar, the SDoc grammar and the web interface have been extended to allow assigning a human title to each field of a grammar element. For example, the ``UID`` field can be now displayed as ``Unique identifier`` in the web interface and the static HTML export.\n\nThe layout of the PDF document generated by the HTML2PDF conversion process has been improved. Several edge cases, such as the breaks between sentences, have been fixed.\n\nThe source file identification mechanism of the requirement-to-source traceability feature has been expanded to locate all source files present in a given source input directory. Previously, it was limited to finding files with specific extensions such as .c, .py, .sdoc, .rst, among others. This restriction, originally implemented for historical reasons, has now been removed. Moreover, StrictDoc has now integrated the ``get_lexer_by_name()`` function to automatically identify a lexer based on a source file's extension. This enhancement help StrictDoc to offer syntax highlighting tailored specifically to the format of each source file. Previously, StrictDoc's code directly hardcoded only a limited selection of Pygments' lexers. Thanks to @KlfJoat for helping us to prioritize and fix this issue sooner.\n\nThe Excel export algorithm was extended to support generating multiple Excel files for documentation tree with requirements that link to each other across documents. The issue manifested itself as ``KeyError``. Thanks to @Dynteq for reporting this.\n","_LINK":"0b8c8f40923744b089845afeb44223e9"},"428":{"MID":"a7ed1eaf155d4f588b27ba31ecc88d4d","TITLE":"0.0.48 (2024-01-24)","_LINK":"30-0-0-48-2024-01-24"},"429":{"MID":"6cff333594d6430886053b59b265e806","STATEMENT":"The requirement-to-source traceability feature was extended to support linking requirements to the RST files.\n\nOne more input scenario was handled for the Create Document workflow. When a project config has ``include_doc_paths`` or ``exclude_doc_paths`` filters specified, and an input document path contradicts to the provided filters, a validation message is shown.\n\nThe Project Statistics screen was extended with the **\"Sections without any text\" metric**. Now it is possible to visualize which sections are still missing any introduction or description (free text).\n\n**The new Machine Identifier (MID)** field has been added to StrictDoc's grammar. The automatic generation of MIDs can be activated per-document using the ``ENABLE_MID: True`` document-level config option. The main driver for this feature is the need of accurate Diff/Changelog results. The new section of the User Guide explains the rationale and the configuration details: [LINK: SECTION-UG-Machine-identifiers-MID].\n\n**The Diff and Changelog screens** have been introduced to facilitate a historical comparison of documentation trees. The Diff screen aids in focusing on which document nodes have been altered, while the Changelog functions as a sequential table where changes are displayed as table cells and each cell emphasizes specific details of a particular change.\n\nThe Requirements Coverage has been transformed into **the Traceability Matrix** screen. This matrix screen lists all nodes of a documentation graph, along with all their interrelations. The currently generated screen is entirely static. However, future enhancements are planned to include filtering capabilities for the content. The Traceability Matrix feature is disabled by default and has to be activated as ``TRACEABILITY_MATRIX_SCREEN`` in the strictdoc.toml project config file.\n\n**The HTML2PDF feature** has now entered the alpha testing phase. This feature enables printing of documents directly from a browser, which can be done either through the \"PDF\" screen view or by utilizing the \"Export to PDF\" button. By default, the HTML2PDF feature is disabled. To activate it, you need to indicate the ``HTML2PDF`` feature in the strictdoc.toml project configuration file.\n","_LINK":"6cff333594d6430886053b59b265e806"},"430":{"MID":"7a3620eecd1b4bd1a8eba7a373f14723","TITLE":"0.0.47 (2023-11-20)","_LINK":"31-0-0-47-2023-11-20"},"431":{"MID":"c422af340d5b45c48bfe89130e1bba52","STATEMENT":"A **query search engine** is introduced which allows filtering a documentation tree by queries like ``(node.is_requirement and \"System\" in node[\"TITLE\"])``.\nBuilding on the search engine capability, the \"Search\" screen is introduced in the web interface. Additionally, it is now possible to specify ``--filter-requirements <query>`` and ``filter-sections <query>`` when running ``export`` and ``passthrough`` commands. The visual design of the project statistics was improved as well as the new design for the search screen has already landed.\n\nThe **document option** ``ROOT: True/False`` was introduced to indicate the root documents in the traceability graph. Currently, this option is only used when printing requirement statistics, where the root nodes are skipped when the metric \"requirements without parents\" is calculated. The root-level requirements by definition have no parent requirements, they can only be parents to other requirements.\n\nWhen editing Section, **it is now possible to auto-generate a section UID with a corresponding button** which makes the management of section UIDs much easier.\n\nThe **stability and the execution time of the CI end-2-end tests for the web interface has been increased**. The sharding of the end-2-end tests was introduced for all systems: macOS, Linux, and Windows. At the same time, the number of Python versions that are tested by each platform's jobs was reduced to maintain a reasonable total number of build jobs.\n\nThe requirement-to-source traceability feature was extended with the so-called **single-line markers**. Now it is possible to reference just a single line in a file by using the ``@sdoc(REQ-001)`` marker.\n\nPython 3.12 support has been added to the GitHub CI jobs.\n\nThe second generation of StrictDoc's requirements received many updates. The new requirements set will be incorporated to the main documentation very soon (estimated time is until the end of 2023). These requirements are maintained in the ``drafts/requirements`` folder.\n\nThe User Guide has been updated to include the **\"Security Considerations\" chapter**, which provides a warning about unsafe use of StrictDoc if it is deployed to a server on a public network.\n","_LINK":"c422af340d5b45c48bfe89130e1bba52"},"432":{"MID":"7e3481d51ad14767b5c97132cad2e0a6","STATEMENT":"This document summarizes solutions to the most common issues reported by StrictDoc users.\n","_LINK":"7e3481d51ad14767b5c97132cad2e0a6"},"433":{"MID":"17152ac7de9f4c138b85e2956091206f","TITLE":"Caching issues","_LINK":"1-Caching-issues"},"434":{"MID":"9a32ac13510d401cbc1a608259652c78","STATEMENT":".. note::\n\n    **TL;DR:** If you encounter errors related to reading data, make sure to delete the StrictDoc cache folder located at ``output/_cache`` or in the custom directory if specified by the ``cache_dir`` option in the ``strictdoc.toml`` configuration file. See [LINK: SECTION-UG-Path-to-cache-dir].\n\nStrictDoc caches many artifacts on disk. Some artifacts are cached using Python’s `pickle <https://docs.python.org/3/library/pickle.html>`_ module, while others are written directly to disk.\n\nThe pickle module serializes Python objects to disk. The issue with this approach is that when StrictDoc changes the schema of its objects (e.g., when SDocNode or SDocDocument objects gain a new property or a property type changes), an outdated object may be read from the cache after upgrading to a new StrictDoc version. While a more systematic solution might be implemented in the future, the current workaround is to manually delete the StrictDoc cache folder.\n","_LINK":"9a32ac13510d401cbc1a608259652c78"},"435":{"MID":"13fe652f160d4af69e869c28a155437d","STATEMENT":"Contributions to StrictDoc are welcome and appreciated.\nPresented below is a condensed checklist that summarises the information\nof the development guide, see [LINK: DEVGUIDE_GETTING_STARTED].\n","_LINK":"13fe652f160d4af69e869c28a155437d"},"436":{"MID":"ec078ab0d7564738acd2961f72abb2c9","TITLE":"Contributor checklist","_LINK":"1-Contributor-checklist"},"437":{"MID":"ae0fc6d87b114137ab6da7c9b5647b62","STATEMENT":"Before opening your Pull Request, the contributor is encouraged to do the\nfollowing steps:\n\n1. Run ``invoke check`` tasks locally. This task calls several lint and test\n   scripts and it is the very task that is run by the GitHub CI process.\n2. A contribution that contains changes to the StrictDoc's codebase shall also\n   include tests that exercise the changed behavior. A contribution without any\n   tests is unlikely to be accepted (with the exception of \"code climate\"\n   changes, see [LINK: DEVGUIDE_PYTHON_CODE]).\n3. Follow the conventions of the section [LINK: DEVGUIDE_GIT_WORKFLOW].\n   A clean Git history and conventional commit names are expected for every\n   single contribution.\n4. If the contribution is not trivial, read through the complete development\n   guide.\n5. If the contribution is not trivial, please update the Release Notes with a high-level summary of your contribution. Refer to the release notes from previous releases for guidance on what information is desirable.\n","_LINK":"ae0fc6d87b114137ab6da7c9b5647b62"},"438":{"MID":"8b40cc35f3524bc7b4e444321c080837","TITLE":"How can I help?","_LINK":"2-How-can-I-help"},"439":{"MID":"8e346888911649f2a3aaf49763aaef24","TITLE":"Spread the word","_LINK":"2.1-Spread-the-word"},"440":{"MID":"07462b02027a423a85ab68525b78ac67","STATEMENT":"If you like the StrictDoc project and use it in your daily work, there are several things you could do besides contributing Pull Requests:\n\n- Star the StrictDoc repository to show your appreciation of the project.\n- Write a blog post or a tutorial about using StrictDoc to achieve some goal.\n- Write an email to s.pankevich@gmail.com and mettta@gmail.com and tell us how you are using StrictDoc and which features you are missing. We somewhat lack enough feedback from our users.\n","_LINK":"07462b02027a423a85ab68525b78ac67"},"441":{"MID":"2696c7fda6d440f3a290f202bee08fe6","TITLE":"ReqIF users","_LINK":"2.2-ReqIF-users"},"442":{"MID":"9cfbb025525f41c5a195be0e637dffee","STATEMENT":"The existing capability of StrictDoc to export/import SDoc to ReqIF is very basic. If you have to deal with ReqIF and you experience errors/crashes when using StrictDoc against ReqIF files, feel free to contribute the anonymized ReqIF files via StrictDoc Issues on GitHub, and we will take care of your specific case.\n\nIt is straightforward to create an anonymized version of a ReqIF file. Just reduce your file to the section that causes troubles in import or export and replace all your business-specific titles/texts to some ``Lorem ipsum...`` boilerplate, see https://www.loremipsum.de/.\n","_LINK":"9cfbb025525f41c5a195be0e637dffee"},"443":{"MID":"4e1edb97346c43af952c4e74f9defbe8","TITLE":"TeX / LaTeX / Sphinx experts","_LINK":"2.3-TeX-LaTeX-Sphinx-experts"},"444":{"MID":"75ed9362d86748269f62f5920514b7c2","STATEMENT":"The existing template for generating PDF documents using Sphinx looks like this: https://strictdoc.readthedocs.io/_/downloads/en/latest/pdf/. The template is maintained in a separate repository: https://github.com/strictdoc-project/sphinx-latex-reqspec-template and does a good job but could be improved in terms of look and structure used.\n\nIf you are an expert and have experience of customizing Sphinx/TeX templates, consider providing feedback or contributing patches.\n\nOne extreme way of improving the generated output could be to take the Sphinx template for TeX files and fully customize what Sphinx does to produce a PDF. See https://www.sphinx-doc.org/en/master/latex.html.\n","_LINK":"75ed9362d86748269f62f5920514b7c2"},"445":{"MID":"f174b0cdec6b482daa2878c8cc0d02c3","STATEMENT":"This section contains everything that a StrictDoc developer/contributor should\nknow to get the job done.\n\nStrictDoc is based on Python and maintained as any other Python package on\nGitHub: with linting, tests, and hopefully enough best practice put into the\ncodebase.\n\nThe instructions and conventions described below are a summary of what is\nconsidered to be the currently preferred development style for StrictDoc.\n\nAny feedback on this development guide is appreciated.\n","_LINK":"f174b0cdec6b482daa2878c8cc0d02c3"},"446":{"MID":"c069e4c7b4d04dd09eb73f940e947bfd","UID":"DEVGUIDE_GETTING_STARTED","TITLE":"Getting started","_LINK":"DEVGUIDE_GETTING_STARTED"},"447":{"MID":"7477d397d0ca493f8e47532455d44965","TITLE":"System dependencies","_LINK":"1.1-System-dependencies"},"448":{"MID":"df2e1de12c6b456898c48a36650813d4","STATEMENT":"StrictDoc itself mostly depends on other Python Pip packages, so there is nothing special to be installed.\n\nYou may need to install ``libtidy`` if you want to run the integration tests. The HTML markup validation tests depend on libtidy.\n\nOn Linux Ubuntu:\n\n.. code:: bash\n\n    sudo apt install tidy\n\nFrom the core Python packages, StrictDoc needs Invoke, Tox and TOML:\n\n.. code:: bash\n\n    pip install invoke tox toml\n","_LINK":"df2e1de12c6b456898c48a36650813d4"},"449":{"MID":"b7a21564c30043acbf1733d9b47bd0bc","TITLE":"Windows-specific: Long Path support","_LINK":"1.1.1-Windows-specific-Long-Path-support"},"450":{"MID":"8591cf6dece04244824c3ac2a8666ba3","STATEMENT":"As `reported <https://github.com/strictdoc-project/strictdoc/issues/1118>`_ by a user, Windows Long Path support has to be enabled on a Windows system.\n\nYou can find information on how to enable the long paths support at https://pip.pypa.io/warnings/enable-long-paths.\n","_LINK":"8591cf6dece04244824c3ac2a8666ba3"},"451":{"MID":"89ec30b9f67c489da635be391b0b0e15","TITLE":"Installing StrictDoc from GitHub (developer mode)","_LINK":"1.2-Installing-StrictDoc-from-GitHub-developer-mode"},"452":{"MID":"2407bb186b274a58b97b54b99ba6e86f","STATEMENT":".. note::\n    Use this way of installing StrictDoc only if you want to make changes in StrictDoc's source code.\n    Otherwise, install StrictDoc as a normal Pip package by running ``pip install strictdoc``.\n\n.. code-block::\n\n    git clone https://github.com/strictdoc-project/strictdoc.git && cd strictdoc\n    pip install toml\n    python3 developer/pip_install_strictdoc_deps.py\n    python3 strictdoc/cli/main.py\n\nThe ``pip_install_strictdoc_deps.py`` installs all dependencies of StrictDoc, but not StrictDoc itself.\n","_LINK":"2407bb186b274a58b97b54b99ba6e86f"},"453":{"MID":"1814a8c25afc40cba6dca1696cae119b","TITLE":"Development within a virtual environment","_LINK":"1.2.1-Development-within-a-virtual-environment"},"454":{"MID":"a3e14b05452b48e2a0d8726fa00a7f00","STATEMENT":"An alternative approach for those familiar with development in a virtual environment:\n\n.. code:: bash\n\n    git clone https://github.com/strictdoc-project/strictdoc.git && cd strictdoc\n    python3 -m venv .venv\n    . ./.venv/bin/activate\n    pip install -e .\n    python3 strictdoc/cli/main.py\n\n.. note::\n\n    Windows users, substitute: ``.\\.venv\\Scripts\\activate``\n\nAfter this, running ``developer/pip_install_strictdoc_deps.py`` should report that all packages are already installed.\n\nThis installs all the default dependencies of StrictDoc.\nTo also install the dev dependencies specified in ``pyproject.toml``:\n\n.. code:: bash\n\n    pip install \".[development]\"\n","_LINK":"a3e14b05452b48e2a0d8726fa00a7f00"},"455":{"MID":"90d5d79146e64660a71cd74ac23f6811","TITLE":"Invoke for development tasks","_LINK":"2-Invoke-for-development-tasks"},"456":{"MID":"452b3c24463446a497ed6b8fcdb31fef","STATEMENT":"All development tasks are managed using\n`Invoke <https://www.pyinvoke.org/>`_ in the ``tasks.py`` file. On macOS and\nLinux, all tasks run in dedicated virtual environments. On Windows, invoke uses\nthe parent pip environment, which can be a system environment or a user's virtual\nenvironment.\n\nMake sure to familiarize yourself with the available developer tasks by running:\n\n.. code-block:: bash\n\n    invoke --list\n","_LINK":"452b3c24463446a497ed6b8fcdb31fef"},"457":{"MID":"e7ce6a2f13614974b43aba56f6ae7253","TITLE":"Main \"Check\" task","_LINK":"3-Main-Check-task"},"458":{"MID":"09258e99cabb4455904b0e2c6687d492","STATEMENT":"Before doing anything else, run the main ``check`` command to make sure that StrictDoc passes all tests on your system:\n\n.. code:: bash\n\n    invoke check\n\nThe ``check`` command runs all StrictDoc lint and test tasks with the only exception of end-to-end Web tests that are run with a separate task (see below).\n","_LINK":"09258e99cabb4455904b0e2c6687d492"},"459":{"MID":"07d9a3c17be8475089844f5eb2cd8299","UID":"DEVGUIDE_PYTHON_CODE","TITLE":"Python code","_LINK":"DEVGUIDE_PYTHON_CODE"},"460":{"MID":"3012a69ef5d244d49fcb90c088d4523b","STATEMENT":"- The version of Python is set to be as low as possible given some constraints\n  of StrictDoc's dependencies. Ideally, the lowest Python version should only be\n  raised when it is consistently deprecated by major software platforms like\n  Ubuntu or GitHub Actions.\n\n- All developer tasks are collected in the ``tasks.py`` which is run by Invoke tool. Run the ``invoke --list`` command to see the list of available commands.\n\n- Formatting is governed by ``black`` which reformats the code automatically\n  when the ``invoke check`` command is run.\n\n  - If a string literal gets too long, it should be split into a multiline\n    literal with each line being a meaningful word or a subsentence.\n\n- Avoid shortening variable names unnecessarily. For example, use 'buffer' instead of 'buf', 'document' instead of 'doc', 'function' instead of 'func', 'length' instead of 'len', etc. Note: While some older parts of StrictDoc may not adhere to this guideline, they are planned to be refactored in the future.\n\n- For \"element is non-None\" checks, a full form shall be used, for example: ``if foo is not None`` instead of ``if foo``. This helps to avoid any confusion with all sorts of strings (empty or non-empty ``str``, ``Optional[str]``) that are used extensively in StrictDoc's codebase. The non-None and non-empty string check shall therefore be as follows: ``if foo is not None and len(foo) > 0``. The explicit check also applies to any other kinds of objects besides strings: ``if foo is not None`` instead of ``if foo``. Rationale: ``if foo`` makes it unclear whether the intention is to check ``is not None`` or also ``len(foo) > 0``.\n\n- For lambdas and short for loops, the recent convention is to add ``_`` to the variables of a for loop or a lambda to visually highlight their temporary use within the current scope which is done to counter the fact that these variables can leak and be used outside of the scope of the loop. Example:\n\n.. code-block:: python\n\n    for a_, b_ in foo:\n        # use a_, b_ within the loop.\n\n- The function arguments with the default values shall be avoided. This convention improves the visibility of the function interfaces at the coast of increased verbosity which is the price that StrictDoc development is willing to pay, maintaining the software long-term. The all-explicit function parameters indication is especially useful when the large code refactorings are made.\n\n- StrictDoc has been making a gradual shift towards a stronger type system. Although type annotations haven't been added everywhere in the codebase, it is preferred to include them for all new code that is written.\n\n- If a contribution includes changes in StrictDoc's code, at least the\n  integration-level tests should be added to the ``tests/integration``. If the\n  contributed code needs a fine-grained control over the added behavior, adding\n  both unit and integration tests is preferred. The only exception where a\n  contribution can contain no tests is \"code climate\" which is work which\n  introduces changes in code but no change to the functionality.\n","_LINK":"3012a69ef5d244d49fcb90c088d4523b"},"461":{"MID":"6e9707c99199464583f091056d1ae458","UID":"DEVGUIDE_GIT_WORKFLOW","TITLE":"Git workflow","_LINK":"DEVGUIDE_GIT_WORKFLOW"},"462":{"MID":"0e916453596b460b84a89f722354a825","STATEMENT":"- The preferred Git workflow is \"1 commit per 1 PR\". If the work truly deserves\n  a sequence of commits, each commit shall be self-contained and pass all checks\n  from the ``invoke check`` command. The preferred approach: split the work into\n  several independent Pull Requests to simplify the work of the reviewer.\n\n- The branch should be always rebased against the main branch. The\n  ``git fetch && git rebase origin/main`` is preferred over\n  ``git fetch && git merge main``.\n\n- The Git commit message should follow the format:\n\n.. code-block::\n\n    context: description\n\nwhere the context can be a major feature being added or a folder. A form of  ``context: subcontext: description`` is also an option. Typical examples:\n\n``docs: fix links to the grammar.py``\n\n``reqif: native: export/import roundtrip for multiline requirement fields``\n\n``backend/dsl: switch to dynamic fields, with validation``\n\n``Poetry: add filecheck as a dependency``\n\n- Use comma-separated contexts, if the committed work is dedicated to more than one topic. Example:\n\n.. code-block::\n\n    server, UI: update to new requirement styles\n\n- When a contribution is simply an improvement of existing code without a change\n  in the functionality, the commit should be named: ``Code climate: description``. Example:\n\n.. code-block::\n\n    Code climate: fix all remaining major Pylint warnings\n","_LINK":"0e916453596b460b84a89f722354a825"},"463":{"MID":"2420b2d7a4624bd99b0f8088dfa9abff","TITLE":"Frontend development","_LINK":"6-Frontend-development"},"464":{"MID":"d818aad87db54985b8933f98528808ab","STATEMENT":"The shortest path to run the server when the StrictDoc's source code is cloned:\n\n.. code-block:: bash\n\n    invoke server\n","_LINK":"d818aad87db54985b8933f98528808ab"},"465":{"MID":"73c717608cce4abca2c768f1dbfb705d","TITLE":"Running End-to-End Web tests","_LINK":"7-Running-End-to-End-Web-tests"},"466":{"MID":"da3cbcd69b0545988daeb0f42098830d","STATEMENT":".. code:: bash\n\n    invoke test-end2end\n","_LINK":"da3cbcd69b0545988daeb0f42098830d"},"467":{"MID":"240dc1426d994397ac1401834b4f0ef0","TITLE":"Running integration tests","_LINK":"8-Running-integration-tests"},"468":{"MID":"4e307b3b950840bbbe455c1ae3238a6e","STATEMENT":"The integration tests are run using Invoke:\n\n.. code-block:: bash\n\n    invoke test-integration\n\nThe ``--focus`` parameter can be used to run only selected tests that match a given substring. This helps to avoid running all tests all the time.\n\n.. code-block:: bash\n\n    invoke test-integration --focus <keyword>\n\nSee `How to test command-line programs with Python tools: LIT and FileCheck <https://stanislaw.github.io/2020-11-20-how-to-test-command-line-programs-with-python.html>`_ to learn more about LIT and FileCheck, which enable the StrictDoc integration tests.\n","_LINK":"4e307b3b950840bbbe455c1ae3238a6e"},"469":{"MID":"7b4bf839b1c44b0d82001060596d8cbf","TITLE":"Documentation","_LINK":"9-Documentation"},"470":{"MID":"d1f5fde86ebc4103bc4eb0334b1ec919","STATEMENT":"- Every change in the functionality or the infrastructure should be documented.\n- Every line of documentation shall be no longer than 80 characters. StrictDoc's\n  own documentation has a few exceptions, however, the latest preference is\n  given to 80 characters per line. Unfortunately, until there is automatic\n  support for mixed SDoc/RST content, all long lines shall be edited and\n  split by a contributor manually.\n- The ``invoke docs`` task should be used for re-generating documentation on a\n  developer machine.\n","_LINK":"d1f5fde86ebc4103bc4eb0334b1ec919"},"471":{"MID":"a44e3b99323b4ac291f4b4d3948c3cc0","TITLE":"Conventions","_LINK":"10-Conventions"},"472":{"MID":"49b7349a3bee478cbe81d8ef25f6245c","STATEMENT":"- ``snake_case`` everywhere, no ``kebab-case``.\n\n  - This rule applies everywhere where applicable: file and folder names, HTML attributes.\n  - Exception: HTML data-attributes and ``testid`` identifiers.\n","_LINK":"49b7349a3bee478cbe81d8ef25f6245c"},"473":{"MID":"c455f0297eb648c6aa9c6d239f043e0d","STATEMENT":"The StrictDoc project is structured around two distinct requirement documents that guide its development:\n\n1. The \"Requirements Tool Specification\" (this document), which is a higher-level document.\n2. The \"StrictDoc Requirements Specification,\" a more detailed and lower-level document, separate from this one.\n\nThis document, the Requirements Tool Specification, delineates the general requirements for an open-source Requirements Tool, with a focus that remains agnostic of the specific implementation details of StrictDoc. Its primary goal is to provide a comprehensive, implementation-neutral overview of what capabilities a Requirements Tool should possess, emphasizing the 'WHAT' aspect.\n\nIn contrast, the StrictDoc Requirements Specification, the second document, delves deeply into the 'HOW' aspect of StrictDoc’s implementation. It builds upon the high-level requirements set out in this document, treating them as parent requirements to guide its detailed development approach.\n","_LINK":"c455f0297eb648c6aa9c6d239f043e0d"},"474":{"MID":"668d18a7489043b38dd435933319e8e7","TITLE":"Summary of user needs","_LINK":"1-Summary-of-user-needs"},"475":{"MID":"7a94c3f55e32498187603400923bfae4","STATEMENT":"This section offers an overview of the necessary capabilities of a requirements and documentation management tool.\n","_LINK":"7a94c3f55e32498187603400923bfae4"},"476":{"MID":"1cbe275272994922a942fd088fa969d8","TITLE":"Free and open source tool","_LINK":"1.1-Free-and-open-source-tool"},"477":{"MID":"3ca29d12a7804f089f5b2aa955e4da59","STATEMENT":"The primary user need and entry point for this Requirements Tool specification is the availability of free, lightweight, yet capable software for creating requirements specifications and other technical documentation. The tool should facilitate the creation of requirements specifications and technical documents, effectively lowering the entry barrier for requirements engineering and technical documentation writing.\n\nIt is assumed throughout this document that the requirements tool will be developed as open-source software available at no cost. However, with minor adjustments, these requirements could also apply to commercial requirements tools. See [LINK: SECTION-SSSS-Licensing-and-distribution].\n","_LINK":"3ca29d12a7804f089f5b2aa955e4da59"},"478":{"MID":"18136bcb9a5b4226a7a95d27dae49805","TITLE":"Document types","_LINK":"1.2-Document-types"},"479":{"MID":"14383453f84747d3abdce6b5dce50c7f","STATEMENT":"A requirements tool is very often also a documentation writing and management tool, so, besides the requirements editing functionality, the tool shall be able to accommodate for the variety of documents and templates used in different industries.\n\nThe variety comes from:\n\n- Supporting arbitrary documentation structures, e.g., non-nested vs. deeply nested documents.\n- Supporting a rich set of visualization mechanisms. Supporting images, diagrams, tables, text markup, etc.\n- Supporting custom fields/attributes used by different industries (the criticality levels in various industries, RAIT verification activities in aerospace, status/workflow fields, etc.).\n\nExamples of typical document types include:\n\n- Requirements specification\n- Design document / architecture description document\n- Interface control document / API reference\n- User manual\n- Development plan\n- Systems engineering plan, management plan\n- Standard (e.g., ECSS or ISO 26262).\n\nThe documentation/requirements management requirements for a Requirements Tool are specified in the sections [LINK: SECTION-RTS-Documentation-management] and [LINK: SECTION-RTS-Requirements-management].\n","_LINK":"14383453f84747d3abdce6b5dce50c7f"},"480":{"MID":"973b586b8a89411ab4f083fd4c262cf5","UID":"SECTION-RTC-Appendix-A-Document-archetypes","TITLE":"Document structure differences","_LINK":"SECTION-RTC-Appendix-A-Document-archetypes"},"481":{"MID":"4a847b9a58444e4a9be056db1f23272c","STATEMENT":"The table below summarizes various differences observed across industry documents.\n\n.. list-table:: Table: Requirements and specification document\n   :widths: 20 80\n   :header-rows: 1\n\n   * - Criteria\n     - Comments\n\n   * - Structure\n     - Non-nested, nested, deeply nested. A structure of a deeply nested specification document can reach 8-10 levels (e.g., Section 1.2.3.4.5.6.7.8 \"ABC\").\n   * - Requirements visual presentation\n     - Requirements are often presented as table cells. The cells can be standalone or a whole section or a document can be a structured as a long table with cells. Alternatively, requirements are rather presented as a section header + text.\n   * - Unique requirement identifiers (UID)\n     - Some documents provide UIDs for all requirements, some do not. Where the UIDs are missing, the section header numbers are used instead for unique identification. Often, a combination \"Number + Title\" becomes a reference-able identifier.\n   * - Requirement titles\n     - Not all documents provide requirement titles. When the requirement titles are missing, the grouping is may be provided by sections/chapters. When the titles are present, the requirement titles can also be section titles.\n","_LINK":"4a847b9a58444e4a9be056db1f23272c"},"482":{"MID":"52b6175f03d7495a9fa8dbffa36aeff4","UID":"SECTION-LRTS-Workflows","TITLE":"Workflows","_LINK":"SECTION-LRTS-Workflows"},"483":{"MID":"c537b8fa5b54417eb9dff6478553f6d7","STATEMENT":"Besides supporting a variety of document types, a Requirements Tool shall also support and integrate well with multiple documentation and requirements management workflows.\n\nAt least the following workflows have been identified to be relevant:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 25 75\n\n   * - **Workflow**\n     - **Description**\n\n   * - Requirements analysis and prototyping\n     - Early phases of the project. Requirements are drafted out quickly. The higher-level picture and coverage of all topics may be more important than specific details.\n   * - Requirements compliance, traceability and justification\n     - Demonstrating the correctness of specification, also for contractual purposes. Every aspect shall be traceable.\n   * - Requirements implementation\n     - Assisting software engineers in implementing requirements in source code. Making links between requirements and source code implementation units, e.g., files, functions, code fragments. Linking source code implementation units to requirements using special markers left in source code.\n   * - Requirements validation/verification workflow (RAIT)\n     - Verifying the correctness of requirements themselves and the validity of the information they communicate.\n   * - Configuration management, change management\n     - Time machine and Diff functions. Maintaining requirements baselines (v1, v1.1, v2, etc.).\n   * - Reporting\n     - Progress reports, statistics, metrication.\n   * - Collaboration on requirements\n     - Supporting multiple users to collaborate on a documentation tree.\n   * - Requirements exchange\n     - Integration between distinct projects requirements trees. Example: An embedded software project has its own requirements. The developers want to integrate a requirements subtree of another product that is integrated to the parent project as an off-the-shelf solution.\n   * - Formal reviews\n     - Formal review of documentation. Walkthroughs, inspections. Version control of delivered documentation packages. Assessment of progress reports achieved.\n   * - Interoperability with industry standards.\n     - Supporting seamless integration between a project documentation tree and applicable standards.\n\nThe section [LINK: SECTION-SSSS-Existing-workflows] contains the workflow-related requirements for a Requirements Tool.\n","_LINK":"c537b8fa5b54417eb9dff6478553f6d7"},"484":{"MID":"08d547a3b04d485ca1f5a3a94a664ee1","TITLE":"Target audience","_LINK":"1.4-Target-audience"},"485":{"MID":"847eaab505124e7797bd25c865f9d868","STATEMENT":"A Requirements Tool may have different users, each with a different role, experience and background which necessitates the requirements towards usability, installation, and user experience.\n\nThe following user groups are preliminarily identified as especially relevant:\n\n**Engineering professionals**\n\nThis group includes:\n\n- Systems engineers\n- Requirements engineers\n- Assurance experts in quality, safety/security, verification/validation\n\nFor these professionals, the Requirements Tool should offer robust functionality that is adequate for complex system design and detailed requirements tracking, ensuring that all aspects of system integrity and compliance are met efficiently.\n\n**Management**\n\nThe focus of this group is more on the progress and compliance aspects. They require high-level overviews and reporting capabilities in the tool, to track project milestones, manage risks, and ensure that the development is adhering to the predefined requirements and industry standards.\n\n**Software engineers**\n\nFor software engineers, the Requirements Tool shall be closely integrated with their software engineering workflow, e.g., it has interfaces with software version control systems, software IDEs, and source code repositories. This integration ensures a seamless transition between requirement specification and software development tasks.\n\n**IT/DevOps**\n\nThis group of users may not work with a Requirements Tool directly but is still an important stakeholder. The Tool shall be easy to install and deploy. It shall be easy to maintain and upgrade the tool, with support for automated updates and compatibility with various IT infrastructures.\n\n**General audience**\n\nNot all users of a requirements tool must have an engineering background. In fact, there are many projects where non-technical people have to maintain requirements. The Requirements Tool shall be usable without any technical training required, featuring an intuitive user interface and simplified processes for entering and managing requirements.\n\nThe requirement sets in the sections [LINK: SECTION-RTC-Usability-installation-and-usage] and [LINK: SECTION-SSSS-Implementation-suggestions] aim to equip the Requirements Tool with sufficient capabilities to support all of the user groups described above.\n","_LINK":"847eaab505124e7797bd25c865f9d868"},"486":{"MID":"f1ffdc7f78134d4b98f3c90e9be40cc7","UID":"SECTION-RTS-Documentation-management","TITLE":"Documentation management","_LINK":"SECTION-RTS-Documentation-management"},"487":{"MID":"0cacb010f5164118adce5dd8512c3e27","STATEMENT":"This section outlines the requirements towards a Requirements Tool as a documentation tool.\n\nThe requirements of this group are dedicated to the core tasks of documentation management:\n\n- Writing, structuring and managing documents\n- Complementing documents with meta information\n- Versioning documents.\n","_LINK":"0cacb010f5164118adce5dd8512c3e27"},"488":{"MID":"72d0dd23dedd4907b4a8924debe7343b","UID":"SDOC-SSS-3","STATUS":"Active","TITLE":"Documents (CRUD)","STATEMENT":"The Requirements Tool shall provide the CRUD operations for document management:\n\n- Create document\n- Read document\n- Update document\n- Delete document.\n","RATIONALE":"The CRUD operations are essential operations of document management. They are at the core of a documentation management tool.\n","_LINK":"SDOC-SSS-3"},"489":{"MID":"9841bc9a56d740dd9e7988e52339618c","UID":"SDOC-SSS-91","STATUS":"Active","TITLE":"Browsing documentation tree","STATEMENT":"The Requirements Tool shall provide browsing of the documentation tree.\n","_LINK":"SDOC-SSS-91"},"490":{"MID":"c4de5f1f46f343b6b4e8dc2a6121b0a2","UID":"SDOC-SSS-51","STATUS":"Active","TITLE":"Documents with nested sections/chapters structure","STATEMENT":"The Requirements Tool shall allow management of documents with nested sections/chapters structure.\n","_LINK":"SDOC-SSS-51"},"491":{"MID":"5236f36f278140539e347bacea921118","UID":"SDOC-SSS-52","STATUS":"Active","TITLE":"Assembling documents from fragments","STATEMENT":"The Requirements Tool shall allow composing documents from other documents or fragments.\n\nNOTE: If a Requirements Tool implements stores documents in a file system, the composition can be arranged at a file level when a parent document file includes the child fragment files and produces a composite document.\n","RATIONALE":"Composable documents allow assembling documents from multiple smaller documents which can be standalone documents or document fragments. This feature is particularly useful for managing extensive documents that can be more effectively organized and handled when divided into smaller document sections.\n","_LINK":"SDOC-SSS-52"},"492":{"MID":"8aeecdfa139341588d6ab8c0c3606a9b","UID":"SDOC-SSS-53","STATUS":"Active","TITLE":"Document meta information (UID, version, authors, signatures, etc)","STATEMENT":"The Requirements Tool shall support management of document meta information.\n","_LINK":"SDOC-SSS-53"},"493":{"MID":"d1883b65e17442c0a22987d4ad415cb6","UID":"SDOC-SSS-75","STATUS":"Active","TITLE":"Document versioning","STATEMENT":"The Requirements Tool shall provide capabilities for document versioning.\n","_LINK":"SDOC-SSS-75"},"494":{"MID":"b8d7b22fd8a6478a9a21ecaa60cf0028","UID":"SDOC-SSS-63","STATUS":"Active","TITLE":"Text formatting capabilities","STATEMENT":"The Requirements Tool shall provide \"rich text\" formatting capabilities which includes but not limited to:\n\n- Headings\n- Lists\n- Tables\n- UML diagrams\n- etc.\n","_LINK":"SDOC-SSS-63"},"495":{"MID":"3bb5252d75bc486b98e7606fb642bac0","UID":"SDOC-SSS-95","STATUS":"Active","TITLE":"Content search","STATEMENT":"The Requirements Tool shall provide functionality to search content in the documentation tree.\n","RATIONALE":"Efficient navigation of large documentation trees requires search capabilities so that users can quickly locate relevant information without manually browsing through all content.\n","_LINK":"SDOC-SSS-95"},"496":{"MID":"fd227b9cfdc54d7db3134cdb925bde87","UID":"SECTION-RTS-Requirements-management","TITLE":"Requirements management","_LINK":"SECTION-RTS-Requirements-management"},"497":{"MID":"c1e2431cdf2141ca86931f29b9912ff7","STATEMENT":"This section outlines the requirements towards a Requirements Tool as a requirements management tool.\n\nThe following core aspects of the requirements management are covered:\n\n- Writing and structuring requirements\n- Linking requirements with other requirements\n- Managing requirement unique identifiers (UID)\n- Requirement verification.\n","_LINK":"c1e2431cdf2141ca86931f29b9912ff7"},"498":{"MID":"6e6f1464c47f4ced8e14c4153f40618b","UID":"SDOC-SSS-4","STATUS":"Active","TITLE":"Requirements CRUD","STATEMENT":"The Requirements Tool shall enable the main requirements management operations:\n\n- Create a requirement\n- Read / view / browse a requirement\n- Update / edit a requirement\n- Delete a requirement.\n","RATIONALE":"The CRUD operations are at the core of the requirements management.\n","_LINK":"SDOC-SSS-4"},"499":{"MID":"db42ad4b504e48e0bf51b4d82529a888","UID":"SDOC-SSS-61","STATUS":"Active","TITLE":"Minimal requirement field set","STATEMENT":"The Requirements Tool shall support at least the following requirement field set:\n\n- UID\n- STATUS\n- TITLE\n- STATEMENT\n- RATIONALE\n- COMMENT\n- RELATIONS (connections with other requirements).\n","RATIONALE":"The selection of the minimal set is based on what is common in the industries (e.g., automotive, space, etc).\n","COMMENT":"The other fields common to each industry can be customized with custom fields handled by other requirements.\n","_LINK":"SDOC-SSS-61"},"500":{"MID":"a69bae43b3224dfc8439a88451a98395","UID":"SDOC-SSS-62","STATUS":"Active","TITLE":"Custom fields","STATEMENT":"The requirements tool shall support configuring a requirement item with an arbitrary set of fields.\n\nNOTE: Examples of typical fields include: UID, Title, Statement, Rationale, Comment. Other fields that are used very often are: Status, Tags, Criticality level, Priority, etc.\n","RATIONALE":"The tool shall not constrain a user in which fields they are able to use for their projects.\n","_LINK":"SDOC-SSS-62"},"501":{"MID":"5f89bdaa6cb74e2a8b9b030b6237b7ef","UID":"SDOC-SSS-64","STATUS":"Active","TITLE":"Structuring requirements in documents","STATEMENT":"The Requirements Tool shall support structuring requirements in documents.\n","RATIONALE":"The industry works with requirements documents. The documents have sections/chapters and requirements.\n","_LINK":"SDOC-SSS-64"},"502":{"MID":"65575cc8a87e4d4480ccdf89d1fb6d67","UID":"SDOC-SSS-5","STATUS":"Active","TITLE":"Move requirement nodes within document","STATEMENT":"The Requirements Tool shall allow moving nodes (sections, requirements) within the containing document.\n","_LINK":"SDOC-SSS-5"},"503":{"MID":"06ab121d3c0f4d8c94652323b8f735c6","UID":"SDOC-SSS-70","STATUS":"Active","TITLE":"Move nodes between documents","STATEMENT":"The Requirements Tool shall allow moving nodes (sections, requirements) between documents.\n","_LINK":"SDOC-SSS-70"},"504":{"MID":"637c129a91804d8cbe2280c1af14836d","UID":"SDOC-SSS-6","STATUS":"Active","TITLE":"Auto-provision of Requirement UIDs","STATEMENT":"The Requirements Tool shall provide controls for automatic generation of requirements UIDs.\n","RATIONALE":"When a document is large, it becomes harder to manage the assignment of the new requirements identifiers by manually exploring which requirement UID has not been assigned yet. The provision of automatically generated UIDs is a convenience feature that improves the user experience significantly.\n","_LINK":"SDOC-SSS-6"},"505":{"MID":"1ce495a5194044d4a7a3dd030f766c9f","UID":"SDOC-SSS-7","STATUS":"Active","TITLE":"Link requirements together","STATEMENT":"The Requirements Tool shall allow bi-directional linking of requirements nodes together using Parent or Child relations.\n","RATIONALE":"The requirement ensures a classic capability of a requirement tool: linking requirements together enables bi-directional traceability which helps in understanding how the requirements are related to each other.\n","_LINK":"SDOC-SSS-7"},"506":{"MID":"44b9d75e50c84d6c8424cfb8a42a0771","UID":"SDOC-SSS-8","STATUS":"Active","TITLE":"Multiple link roles","STATEMENT":"The Requirements Tool shall support the link roles.\n\nExample of roles for a child-to-parent link: \"verifies\", \"implements\", \"satisfies\", etc.\n","RATIONALE":"Different industries maintain custom conventions for naming the relations between requirements and other nodes such as tests or other artefacts.\n","_LINK":"SDOC-SSS-8"},"507":{"MID":"387bd5ff0e4a4a97962661e9d7451f19","UID":"SDOC-SSS-71","STATUS":"Active","TITLE":"Reverse parent links","STATEMENT":"The Requirements Tool shall support the Reverse Parent relationship.\n","_LINK":"SDOC-SSS-71"},"508":{"MID":"3348caaed8d44be0928cc6f3c7414094","UID":"SDOC-SSS-89","STATUS":"Active","TITLE":"Unique identification of requirements","STATEMENT":"The Requirements Tool shall provide means for unique identification of every requirement.\n","RATIONALE":"The requirement ensures a classic capability of a requirement tool:\n\n1) The unique identifiers help the users in identifying the requirements, both when reading a requirements document and when discussing requirements.\n\n2) The unique identifiers are used for linking requirements together. The requirements tool stores the identifiers in a global database and can resolve the links, following the unique identifiers they point to.\n","_LINK":"SDOC-SSS-89"},"509":{"MID":"3850f0b8c8294455bf7be9e2acddbd40","UID":"SDOC-SSS-47","STATUS":"Active","TITLE":"Requirements database consistency checks","STATEMENT":"The Requirements Tool shall provide a validation mechanism that ensures the integrity of requirements and connections between them.\n\nNOTE: Examples of integrity checks:\n\n- Requirements have correct fields.\n- Requirements do not form cycles.\n- Requirements only link to other requirements as specified in a project configuration.\n","_LINK":"SDOC-SSS-47"},"510":{"MID":"1216cb617c0f495a9c96471ef72bf80f","UID":"SDOC-SSS-57","STATUS":"Active","TITLE":"Requirement syntax validation (e.g. EARS)","STATEMENT":"The Requirements Tool shall provide capabilities for validating requirements according to the EARS syntax.\n","_LINK":"SDOC-SSS-57"},"511":{"MID":"7c112f3a5885477084396fd26387a864","TITLE":"Tool configurability","_LINK":"4-Tool-configurability"},"512":{"MID":"4550038552894ef69b85b281cff60c60","UID":"SDOC-SSS-92","STATUS":"Active","TITLE":"Project-level configuration","STATEMENT":"The Requirements Tool shall provide a solution for configuring the project-level options.\n\nNOTE: Examples of project-level options:\n\n- Project title.\n- Global settings for the Requirements Tool itself.\n","RATIONALE":"The requirement ensures the configurability of the tool for a specific project.\n","_LINK":"SDOC-SSS-92"},"513":{"MID":"4550b38552894ef69b85b281cff60360","UID":"SDOC-SSS-93","STATUS":"Active","TITLE":"Document-level configuration","STATEMENT":"The Requirements Tool shall provide a solution for configuring the document-level options.\n\nNOTE: Examples of document-level options:\n\n- Document title\n- Requirement prefix.\n- Other options local to the content and the presentation of a given document.\n","RATIONALE":"Sometimes, the project-level configuration can be not fine-grained enough. The requirement ensures that the requirements tool allows a configuration on a document level.\n","_LINK":"SDOC-SSS-93"},"514":{"MID":"56dabce670be4691b35434bda6d6bb36","UID":"SECTION-SSSS-Performance","TITLE":"Performance","_LINK":"SECTION-SSSS-Performance"},"515":{"MID":"68e4b4b1ba78485f8620575ef9e1eaa2","STATEMENT":"This section captures the performance requirements towards a Requirements Tool.\n","_LINK":"68e4b4b1ba78485f8620575ef9e1eaa2"},"516":{"MID":"a0a95079e3c0438bb3ea9e5af7ddddc9","UID":"SDOC-SSS-13","STATUS":"Active","TITLE":"Support large requirements sets","STATEMENT":"The Requirements Tool shall support requirement trees with at least 10000 requirements.\n","_LINK":"SDOC-SSS-13"},"517":{"MID":"64b982c9299a4c8eb7031495e940a3f8","UID":"SDOC-SSS-14","STATUS":"Active","TITLE":"Support large project trees","STATEMENT":"The Requirements Tool shall be able to handle documentation packages of at least 100 documents without significant performance degradation.\n","_LINK":"SDOC-SSS-14"},"518":{"MID":"d1a483f3e321414b83bb4a39b1283293","TITLE":"Data integrity","_LINK":"6-Data-integrity"},"519":{"MID":"d1323d222a0040b2b6122c59b3c00f06","UID":"SDOC-SSS-94","STATUS":"Active","TITLE":"Data integrity of documentation/requirements","STATEMENT":"The Requirements Tool shall ensure the integrity of stored documentation and requirements data throughout its lifecycle.\n","RATIONALE":"The requirement ensures that the tool and the tool's development includes measures for reducing the risk of any data corruption.\n","COMMENT":"This includes safeguarding against data corruption, loss, and ensuring the reliability of links within the documentation.\n","_LINK":"SDOC-SSS-94"},"520":{"MID":"ec52fa5cc1714b07863eb7da9432be1d","UID":"SECTION-SSSS-Existing-workflows","TITLE":"Existing workflows","_LINK":"SECTION-SSSS-Existing-workflows"},"521":{"MID":"33769a5f0ca94b99a4802adc81841037","STATEMENT":"This section captures the requirements towards specific workflows that a Requirements Tool should support as outlined in [LINK: SECTION-LRTS-Workflows].\n","_LINK":"33769a5f0ca94b99a4802adc81841037"},"522":{"MID":"831debedfa0e4e4c8434021569f96bad","UID":"SDOC-SSS-73","STATUS":"Active","TITLE":"Excel-like viewing and editing of requirements","STATEMENT":"The Requirements Tool shall provide an Excel-like user interface for viewing and editing requirements.\n\nNOTE: This interface does not have to be the only or a default interface.\n","RATIONALE":"As recognized by the parent requirement, some requirements-based workflows are naturally easier when the requirements content is presented in a form of a table, as opposed to a document with a nested chapter structure.\n","_LINK":"SDOC-SSS-73"},"523":{"MID":"5d412989005e4bc3b5dcfd94675615dc","UID":"SDOC-SSS-56","STATUS":"Active","TITLE":"1000-feet view","STATEMENT":"The Requirements Tool shall provide a \"1000-feet view\" kind of requirements visualization.\n","RATIONALE":"Compared to the other visualizations, such a visualization helps to \"see the forest for the trees\". Seeing requirements and their sections all at once helps to visualize groups of requirements and better understand the relationships between them.\n","_LINK":"SDOC-SSS-56"},"524":{"MID":"5eb553abd3944bffbd003e37b3d1c5a5","UID":"SDOC-SSS-28","STATUS":"Active","TITLE":"Traceability matrices","STATEMENT":"The Requirements Tool shall support generation of traceability matrices.\n","_LINK":"SDOC-SSS-28"},"525":{"MID":"06f0bb40f76142f4ba59d037aaedc9de","UID":"SDOC-SSS-48","STATUS":"Active","TITLE":"Compliance matrices","STATEMENT":"The Requirements Tool shall allow generating a Compliance Matrix document.\n","_LINK":"SDOC-SSS-48"},"526":{"MID":"74ffae6279bc4e4095c03d6a247c3599","UID":"SDOC-SSS-29","STATUS":"Active","TITLE":"Requirements coverage","STATEMENT":"The Requirements Tool shall provide means for getting information about the requirements coverage of a given project.\n\nNOTE: The requirements coverage can be presented in a tabular form or visualized with a set of graphs.\n","RATIONALE":"The requirements coverage information helps to assess whether all requirements are linked to each other, whether all requirements are connected to implementation, test or other artifacts. Additionally, the requirements coverage information can provide metrics for measuring a project's progress, e.g., \"50% of requirements have been traced to the source code\". The requirement ensures that the requirements tool provides this feature.\n","_LINK":"SDOC-SSS-29"},"527":{"MID":"e0e6d1f883764719919238e4974dccef","UID":"SDOC-SSS-49","STATUS":"Active","TITLE":"Progress report","STATEMENT":"The Requirements Tool shall allow generating a Progress Report document.\n\nNOTE: A progress report document shall include at least the following Key Performance Indicators.\n\nProject-level KPIs:\n\n- Total number of requirements\n- Total number of requirements without parent (excluding top-level and derived)\n- Total number of TBD/TBC\n- Total number of requirements without rationale\n- Tags breakdown\n\nDocument-level KPIs: the same but per document.\n","_LINK":"SDOC-SSS-49"},"528":{"MID":"ed4bd232bed84eda977263fa03e75b80","UID":"SDOC-SSS-74","STATUS":"Active","TITLE":"Change management","STATEMENT":"The Requirements Tool shall provide capabilities for change management:\n\n- Visualizing changes between project tree versions.\n- Visualizing changes between document versions.\n- Visualizing the impact that a changed requirement has on a project tree.\n","_LINK":"SDOC-SSS-74"},"529":{"MID":"85d2f75b2f074f98ace5ceb5288c09b9","UID":"SECTION-RTC-Usability-installation-and-usage","TITLE":"Usability, installation and usage","_LINK":"SECTION-RTC-Usability-installation-and-usage"},"530":{"MID":"7e33387f373d427d9e1af522f1e5bbc5","UID":"SDOC-SSS-79","STATUS":"Active","TITLE":"General usability","STATEMENT":"The Requirements Tool shall be accessible to a broad spectrum of users.\n\nNOTE: Factors to consider:\n\n- The cost of a tool.\n- The easy of installation.\n- The availability of a graphical user interface.\n- The availability of a programmatic access to the functions of a tool.\n- The interoperability of the tool with other tools.\n","RATIONALE":"A tool that can be used by a large number of people simplifies its adoption and allows more users to work with documentation and requirements.\n","_LINK":"SDOC-SSS-79"},"531":{"MID":"57b01915e4624634909dbb40f5d56697","UID":"SDOC-SSS-80","STATUS":"Active","TITLE":"Easy user experience","STATEMENT":"The Requirements Tool shall provide a smooth user experience.\n\nNOTE: Documentation and requirements management are composite activities that consist of several types of repetitive tasks. A requirements tool user experience should assist in automating these tasks as far as possible and make the overall workflow efficient and precise.\n","_LINK":"SDOC-SSS-80"},"532":{"MID":"d3e66072363d4e7ea2e2f9691c094bb2","UID":"SDOC-SSS-81","STATUS":"Active","TITLE":"Support projects with a large number of users","STATEMENT":"The Requirements Tool shall be capable of supporting a large number of users.\n","RATIONALE":"Many documentation and requirements projects involve large groups of people. The requirements tool should not become a bottleneck when a number of users grows.\n","_LINK":"SDOC-SSS-81"},"533":{"MID":"db495bc2f11f4f96ace60cdb0bef4d66","UID":"SDOC-SSS-82","STATUS":"Active","TITLE":"Individual use (home PC)","STATEMENT":"The Requirements Tool shall be usable on the normal personal computers, e.g., do not require a special cloud deployment.\n","_LINK":"SDOC-SSS-82"},"534":{"MID":"90562d92b9a7468ba42567bc72cb6ebf","UID":"SDOC-SSS-83","STATUS":"Active","TITLE":"Server-based deployments (IT-friendly setup)","STATEMENT":"The Requirements Tool shall be deployable to the network of computers, e.g., provide a server instance.\n","COMMENT":"Scaling from smaller setups (e.g., Raspberry PI in an office network) to\nlarger in-house and cloud-base installations.\n","_LINK":"SDOC-SSS-83"},"535":{"MID":"4312ed066d19487eba18ec677430e60f","UID":"SDOC-SSS-84","STATUS":"Active","TITLE":"Requirements database","STATEMENT":"The Requirements Tool shall store documentation and requirements data in a database.\n","RATIONALE":"A database allows:\n\n- Persistent storage of documentation/requirements data\n- Versioning\n- Backups\n- Exchange of information and access of the same database by multiple users.\n","_LINK":"SDOC-SSS-84"},"536":{"MID":"81858dda65844dcd9640fdd74badecee","UID":"SDOC-SSS-85","STATUS":"Active","TITLE":"Programming access via API (Web)","STATEMENT":"The Requirements Tool shall provide a Web API interface.\n","RATIONALE":"Besides a direct access to the tool's source code, accessing an API deployed to a server provides additional capabilities for getting and manipulating requirements/documentation content.\n","_LINK":"SDOC-SSS-85"},"537":{"MID":"ee96cc5f18e14f6894e2775c546240d8","UID":"SDOC-SSS-86","STATUS":"Active","TITLE":"Programming access via API (SDK)","STATEMENT":"The Requirements Tool shall provide a Software Development Kit (SDK) that allows customization of the Requirements Tool functions.\n\nNOTE: An SDK provides access to the API of the Requirements Tool. Examples of functions that may be used by the users of the tool:\n\n- Custom import/export functions to/from various requirements/documentation formats.\n- Implement custom visualization functions.\n- Implement integration with other tools.\n","RATIONALE":"A SDK allows a software engineer to extend the Requirements Tool capabilities.\n","_LINK":"SDOC-SSS-86"},"538":{"MID":"f4b122c5081f4b218aa93a119e372a34","UID":"SDOC-SSS-87","STATUS":"Active","TITLE":"Programmatic access to requirements data","STATEMENT":"The Requirements Tool shall provide programmatic access to requirements data.\n","RATIONALE":"When the requirements data is accessible by a user directly, it is possible to exchange the data or implement additional scripting procedures.\n","_LINK":"SDOC-SSS-87"},"539":{"MID":"29fa83c59e714d0da8b36a9dc65b0c72","UID":"SECTION-SSSS-Implementation-suggestions","TITLE":"Implementation suggestions","_LINK":"SECTION-SSSS-Implementation-suggestions"},"540":{"MID":"3db06eb066b4441290e06b08405da0a9","UID":"SDOC-SSS-30","STATUS":"Active","TITLE":"Static HTML export","STATEMENT":"The Requirements Tool shall support generation of documentation to static HTML.\n","RATIONALE":"A static HTML export capability enables:\n\n- Viewing requirements in browsers without any additional software.\n- Exchanging HTML content as zip between users.\n- Publishing HTML content via static website hosting providers (GitHub and GitLab Pages, Read the Docs, Heroku, etc.).\n","_LINK":"SDOC-SSS-30"},"541":{"MID":"e718af582b0345c2b0ddb6e405cb6d9a","UID":"SDOC-SSS-31","STATUS":"Active","TITLE":"Graphical user interface (GUI)","STATEMENT":"The Requirements Tool shall provide a graphical user interface.\n","_LINK":"SDOC-SSS-31"},"542":{"MID":"cd20e9613a65441a8862143ba6407f61","UID":"SDOC-SSS-32","STATUS":"Active","TITLE":"Command-line interface","STATEMENT":"The Requirements Tool shall provide a command line interface (CLI).\n","_LINK":"SDOC-SSS-32"},"543":{"MID":"4475857729e5476cbbb409cc844048fd","UID":"SDOC-SSS-68","STATUS":"Active","TITLE":"Web API interface","STATEMENT":"The Requirements Tool shall provide an API interface.\n","_LINK":"SDOC-SSS-68"},"544":{"MID":"5ac2f3010db84466bff854fc323e944c","UID":"SDOC-SSS-33","STATUS":"Active","TITLE":"Version control (Git)","STATEMENT":"The Requirements Tool shall support the software version control systems (e.g., Git).\n","RATIONALE":"- Git allows precise tracking of the changes to the documentation.\n- Requirements/documentation content can be release-tagged.\n- The \"Time machine\" function: ability to review the older state of the documentation/requirements tree.\n","_LINK":"SDOC-SSS-33"},"545":{"MID":"b76fb774542849a182e2cdd89fdaab3c","UID":"SDOC-SSS-67","STATUS":"Active","TITLE":"Support major operating systems","STATEMENT":"The Requirements Tool shall support at least the following operating systems:\n\n- Linux\n- Windows\n- macOS.\n","_LINK":"SDOC-SSS-67"},"546":{"MID":"871a7a66eb50436997fde692e90e93eb","UID":"SDOC-SSS-69","STATUS":"Active","TITLE":"Conservative languages for implementation","STATEMENT":"The Requirements Tool shall be implemented using the popular programming languages.\n\nNOTE: Examples of the most popular programming languages:\n\n- Java\n- C++\n- Python\n- JavaScript\n","RATIONALE":"Choosing a less popular programming language can limit the long-term maintainability of the tool.\n","COMMENT":"Examples of less popular programming languages, with all due respect to their powerful features: Haskell, F#, Ada, etc.\n","_LINK":"SDOC-SSS-69"},"547":{"MID":"0556a0b2773d4ee0b44b22773455a600","UID":"SDOC-SSS-90","STATUS":"Active","TITLE":"Long-term maintainability of a tool","STATEMENT":"The Requirements Tool shall be designed for long-term maintenance.\n\nNOTE: Long-term maintenance aspects to consider:\n\n- Careful selection of the technologies used, e.g., avoid building on too many unrelated technologies at the same time.\n- Take into account the existing experience of the development team. Consider the availability of qualified developers in the future.\n- Take into account maintainability by the development team as well as the users, e.g., IT/DevOps department.\n","_LINK":"SDOC-SSS-90"},"548":{"MID":"7bdea1a7cb9e4f6fbcf8497670f87278","UID":"SECTION-RTS-Text-based-requirements-language","TITLE":"Text-based requirements language (optional)","_LINK":"SECTION-RTS-Text-based-requirements-language"},"549":{"MID":"dfe5a61ed10149bebcf69d9c5c3b1316","STATEMENT":"Note: Not all requirements tools must be text-based. But when they are, the\nfollowing requirements apply.\n","_LINK":"dfe5a61ed10149bebcf69d9c5c3b1316"},"550":{"MID":"f472e85f3398413795234a9298d4af3c","UID":"SDOC-SSS-88","STATUS":"Active","TITLE":"Text files for storing documentation and requirements","STATEMENT":"The Requirements Tool shall allow storage of documentation and requirements content using text files.\n","_LINK":"SDOC-SSS-88"},"551":{"MID":"b13bc3dfa7324f238bc06a88baf5edb6","UID":"SDOC-SSS-55","STATUS":"Active","TITLE":"Strict text language syntax","STATEMENT":"The Requirements Tool shall provide a strict syntax for its text language.\n","_LINK":"SDOC-SSS-55"},"552":{"MID":"0b47da74f9ec45e6a77573185b95f327","UID":"SDOC-SSS-54","STATUS":"Active","TITLE":"Machine-readable format","STATEMENT":"The Requirement Tool's text language shall be machine-readable.\n","_LINK":"SDOC-SSS-54"},"553":{"MID":"13f3e7765b494237893c1585a7c9dfd0","UID":"SDOC-SSS-34","STATUS":"Active","TITLE":"Requirements data from multiple repositories","STATEMENT":"The Requirement Tool shall allow reading requirements files from multiple folders or repositories.\n\nNOTE: The folders/repositories can be arbitrarily nested.\n","_LINK":"SDOC-SSS-34"},"554":{"MID":"8b1da9907bc847c989dc807b7dff2a05","UID":"SECTION-RTS-Requirements-and-source-code","TITLE":"Requirements and source code","_LINK":"SECTION-RTS-Requirements-and-source-code"},"555":{"MID":"4692362c77974fb8bcbeefdc248d0e89","UID":"SDOC-SSS-72","STATUS":"Active","TITLE":"Traceability between requirements and source code","STATEMENT":"The Requirements Tool shall support bi-directional tracing between requirements content and implementation source code with only minimal changes needed in the source code.\n\nNOTE: The Requirements Tool does not necessarily have to implement the complete tracing process. It may delegate parts of the traceability task to other tools, e.g., Doxygen, Lobster, etc.\n","RATIONALE":"This requirement connects the worlds of requirements and source code which ensures that the traceability between requirements-implementation and requirements-tests can be achieved in an explicit way. Without a direct support of tracing requirements to source code by a requirements tool, the users have to find workarounds that are less efficient.\n","_LINK":"SDOC-SSS-72"},"556":{"MID":"cd9e353e07ae4d50b1aa08999854aa02","UID":"SECTION-RTS-Requirements-exchange-formats-export-import","TITLE":"Requirements exchange formats (export/import)","_LINK":"SECTION-RTS-Requirements-exchange-formats-export-import"},"557":{"MID":"ecc76e0991e44d6282776365496193e6","STATEMENT":"This section captures the requirements related to \"Requirements exchange\" as outlined in the section [LINK: SECTION-LRTS-Workflows].\n\nThe Requirements Tool should fundamentally support the exchange of documentation and requirements with other tools. Importing data into this tool and exporting data from it to other tools should be straightforward. The key focus of this section's requirements is on enabling seamless access to requirements and documentation data.\n","_LINK":"ecc76e0991e44d6282776365496193e6"},"558":{"MID":"73e70548c2cf415f94adbf1066d5fe4b","UID":"SDOC-SSS-58","STATUS":"Active","TITLE":"ReqIF export/import","STATEMENT":"The Requirements Tool shall support exporting/importing requirements content from/to ReqIF format.\n","RATIONALE":"ReqIF is a standard for exchanging requirements. There is currently no other standard of a higher maturity.\n","_LINK":"SDOC-SSS-58"},"559":{"MID":"c94de32c2c2e454d81c77724a4f29283","UID":"SDOC-SSS-59","STATUS":"Active","TITLE":"CSV export/import","STATEMENT":"The Requirements Tool shall support exporting/importing requirements content from/to CSV.\n","_LINK":"SDOC-SSS-59"},"560":{"MID":"f7a600a238e34075ac6b65852492cc2f","UID":"SDOC-SSS-60","STATUS":"Active","TITLE":"Excel export/import","STATEMENT":"The Requirements Tool shall support exporting/importing requirements content from/to Excel.\n","_LINK":"SDOC-SSS-60"},"561":{"MID":"efaa3e91045c4d49a70232f09a85ad35","UID":"SECTION-RTS-Requirements-collaboration","TITLE":"Collaboration on requirements","_LINK":"SECTION-RTS-Requirements-collaboration"},"562":{"MID":"f9d65df46ff24b0da6cb2bf011f0fc70","UID":"SDOC-SSS-65","STATUS":"Draft","TITLE":"Support user accounts","_LINK":"SDOC-SSS-65"},"563":{"MID":"29d0374556494f38977ec3c928aa894d","UID":"SDOC-SSS-66","STATUS":"Draft","TITLE":"Send notifications about updated requirements","_LINK":"SDOC-SSS-66"},"564":{"MID":"f80a4b7ff03042849c3814c6cd5e5ca4","UID":"SECTION-SSSS-Development-process","TITLE":"Development process","_LINK":"SECTION-SSSS-Development-process"},"565":{"MID":"f16ea50f686e412f9c21d8096055bb47","UID":"SDOC-SSS-76","STATUS":"Active","TITLE":"Requirements engineering","STATEMENT":"The Requirements Tool's development process shall include the Requirements Tool's own requirements engineering.\n","RATIONALE":"A requirements tool is not a trivial project. A clear set of requirements for the developed tool helps to structure the development and communicate the functions of the tool to the developers and the users of the tool.\n","_LINK":"SDOC-SSS-76"},"566":{"MID":"0bebdf77108a499c87e5c0838204c39c","UID":"SDOC-SSS-50","STATUS":"Active","TITLE":"Self-hosted requirements","STATEMENT":"The Requirements Tool's requirements shall be developed and stored using the Requirements Tool itself.\n","RATIONALE":"While not strictly necessary, developing the requirements for the tool using the tool itself aids developers in test-driving its functionality during the requirement development phase. Moreover, having the tool host its own requirements provides a tangible and dynamic illustration of how the tool can be employed for crafting requirements documentation.\n","_LINK":"SDOC-SSS-50"},"567":{"MID":"1a39a758930040029db320d8466806c1","UID":"SDOC-SSS-77","STATUS":"Active","TITLE":"Test coverage","STATEMENT":"The Requirements Tool's development process shall ensure:\n\n- A testability of the tool.\n- The highest possible coverage of the tool's code by test.\n- Usage of modern testing methods to ensure adequate coverage of the tool's functions (e.g., command-line interface, web interface, smallest units of code, etc.).\n","RATIONALE":"The presence of tests, the adequate selection of test methods and a high test coverage are preconditions for a high quality of the requirements tool.\n","_LINK":"SDOC-SSS-77"},"568":{"MID":"8cb5ac6812924f4c8f4afd156b2f021c","UID":"SDOC-SSS-78","STATUS":"Active","TITLE":"Tool qualification","STATEMENT":"The Requirements Tool's development process shall ensure that the tool can be qualified for the use in critical product developments as required by the rigorous technical standards (e.g., EN IEC 61508).\n","RATIONALE":"Many project developments require a qualification of the tools used during the development. A requirements tool is one of the critical tools that affect the project development. If a requirement tool is developed to the higher standards of quality, it simplifies the argument of bringing the tool forward and using it in a particular project.\n","_LINK":"SDOC-SSS-78"},"569":{"MID":"e4cd429e9ec04deabfd1fb1381c39e38","UID":"SECTION-SSSS-Licensing-and-distribution","TITLE":"Licensing and distribution","_LINK":"SECTION-SSSS-Licensing-and-distribution"},"570":{"MID":"92bf658bcddb4d2899b78c526fbddf38","STATEMENT":"This section outlines the requirements for the \"free and open source\" aspect of the Requirements Tool.\n","_LINK":"92bf658bcddb4d2899b78c526fbddf38"},"571":{"MID":"2f30b94fdc074c8fa5858dfccc6202e8","UID":"SDOC-SSS-38","STATUS":"Active","TITLE":"Open source","STATEMENT":"The Requirements Tool's source code shall be publicly available, e.g., hosted on a code hosting platform such as GitHub or GitLab.\n","_LINK":"SDOC-SSS-38"},"572":{"MID":"27b640de8cae44a680b23429c981bee9","UID":"SDOC-SSS-39","STATUS":"Active","TITLE":"Only open source dependencies","STATEMENT":"The Requirement Tool's source code shall be based on open source software components.\n","_LINK":"SDOC-SSS-39"},"573":{"MID":"1338faad11204073a97212fa0fd11317","UID":"SDOC-SSS-40","STATUS":"Active","TITLE":"Free","STATEMENT":"The Requirements Tool shall be licensed under a permissive license, ensuring no/minimal constraints on the utilization and dissemination of the project.\n\nNOTE: Example of a permissive license: MIT, Apache 2.\n","RATIONALE":"This requirement captures the essence of an open and free requirements management tool.\n","_LINK":"SDOC-SSS-40"},"574":{"MID":"bd8a7931c1e04df9bf08d291488c67aa","TITLE":"SDoc data model","_LINK":"1-SDoc-data-model"},"575":{"MID":"e8d5b55055254144b96d1ffeb587ec72","UID":"SDOC-SRS-18","STATUS":"Active","TITLE":"Data model","STATEMENT":"StrictDoc shall be based on a data model.\n","RATIONALE":"Designing StrictDoc with a goal of having a consistent data model ensures that the tool:\n\n1) can support a rich set of use cases,\n2) model the existing documentation templates used by the industries,\n3) interface well with other formats for storing documentation and requirements, e.g., ReqIF and SPDX.\n","COMMENT":"Verification: data model diagram TBD.\n","_LINK":"SDOC-SRS-18"},"576":{"MID":"3b31cad22529476db01aca41caf39750","UID":"SDOC-SRS-26","STATUS":"Active","TITLE":"Requirement model","STATEMENT":"StrictDoc's data model shall support modeling requirements.\n","_LINK":"SDOC-SRS-26"},"577":{"MID":"8e2ffffd33af4a969d5bb7ca40cb49a4","UID":"SDOC-SRS-100","STATUS":"Active","TITLE":"Requirement model fields","STATEMENT":"StrictDoc's \"Requirement\" model shall support configurable fields system.\n","_LINK":"SDOC-SRS-100"},"578":{"MID":"2d4020ba06d74571aef7aafe8604215b","UID":"SDOC-SRS-132","STATUS":"Active","TITLE":"Requirement model default fields","STATEMENT":"By default, the Requirement shall support the following fields:\n\n- MID\n- UID\n- STATUS\n- TITLE\n- STATEMENT\n- RATIONALE\n- COMMENT.\n","RATIONALE":"These fields are the most typical fields found in requirement documents.\n","_LINK":"SDOC-SRS-132"},"579":{"MID":"f94419a390f2403daa3c4cd0e96f6cb6","UID":"SDOC-SRS-98","STATUS":"Active","TITLE":"Document model","STATEMENT":"StrictDoc's data model shall support modeling documents.\n","_LINK":"SDOC-SRS-98"},"580":{"MID":"435f856197d743c1b9b1dcbe91a22863","UID":"SDOC-SRS-110","STATUS":"Active","TITLE":"Document metadata","STATEMENT":"StrictDoc's data model shall support a Document metadata model including at least:\n\n- UID\n- Document version\n- Document classification\n- Document authors.\n","_LINK":"SDOC-SRS-110"},"581":{"MID":"abcced8724d743c1b9b1dcbe91a22863","UID":"SDOC-SRS-151","STATUS":"Active","TITLE":"Document configuration","STATEMENT":"StrictDoc's data model shall support configuring the document options:\n\n- Enable/disable MID\n- Markup choice, e.g., RST, HTML, etc.\n- Levels (automatic or manual)\n- Node style\n- Default presentation view.\n","_LINK":"SDOC-SRS-151"},"582":{"MID":"63821c507d584cf985f05904710b9779","UID":"SDOC-SRS-99","STATUS":"Active","TITLE":"Section model","STATEMENT":"StrictDoc's data model shall support a concept of a \"Section\" which nests other Sections, Requirements, Texts.\n","RATIONALE":"\"Section\" corresponds to a chapter or a section in a document and helps to organize a document by grouping text nodes, requirements and other sections.\n","_LINK":"SDOC-SRS-99"},"583":{"MID":"899d2f68749b4be1a3124fe4d01de1aa","UID":"SDOC-SRS-135","STATUS":"Active","TITLE":"Free text","STATEMENT":"StrictDoc's data model shall support a \"Free Text\" model, representing non-normative documentation content.\n","RATIONALE":"Documentation comprises normative components, such as uniquely identifiable elements like requirements or design items, and non-normative components, including introductory text, overview chapters, and other content. The non-normative parts help provide a general understanding for the reader but do not contribute to traceability information. StrictDoc's free text is designed to store this type of non-normative information in SDoc documents.\n","_LINK":"SDOC-SRS-135"},"584":{"MID":"983653fc26214f46977dc792d65ae65f","UID":"SDOC-SRS-109","STATUS":"Active","TITLE":"Composeable document","STATEMENT":"StrictDoc's data model shall allow composing a Document from other Documents.\n","RATIONALE":"The logic behind the parent requirement remains fully relevant. Additionally, an alternative approach could involve using a dedicated entity, like \"Fragment\", to allow a Document to be composed of includable sections or document fragments. Managing composition at the Document level eliminates the need in additional entities like \"Fragment\", streamlining both the conceptual understanding and the practical implementation of composability.\n","COMMENT":"The corresponding UI capability for Fragments CRUD is TBD.\n","_LINK":"SDOC-SRS-109"},"585":{"MID":"fad4cf5dcf4d40518c7c9826fd6bd18a","UID":"SDOC-SRS-31","STATUS":"Active","TITLE":"Requirement relations","STATEMENT":"The StrictDoc data model shall support connecting requirements using Parent and Child relations.\n","RATIONALE":"Support of both Parent and Child relations allows to build typical requirements relations such as child-to-parent and less common relations when one document can have parent links to a parent document and child links to a child document (e.g., the so-called \"compliance\" or \"tailoring matrix\" documents may use this structure).\n","_LINK":"SDOC-SRS-31"},"586":{"MID":"9930894b08c44f5eba996c0a255e9e3f","UID":"SDOC-SRS-101","STATUS":"Active","TITLE":"Requirement relation roles","STATEMENT":"Each SDoc relation shall be optionally configurable with a relation role.\n\nNOTE: A relation role is a string value. Typical examples: \"refines\", \"verifies\", \"implements\".\n","_LINK":"SDOC-SRS-101"},"587":{"MID":"fa090bc6976c4275aadbf522da6b920b","UID":"SDOC-SRS-149","STATUS":"Active","TITLE":"Inline links","STATEMENT":"StrictDoc shall support referencing any node by embedding a hyperlink within the text content of another node.\n","RATIONALE":"The inline links do not replace the relations between SDoc nodes. Instead, an inline link could be an easy way to refer from one textual node to a chapter or a document. A common use case is \"See section ABC for more details\".\n","_LINK":"SDOC-SRS-149"},"588":{"MID":"54132bc6976c4275aadbf522da6b920b","UID":"SDOC-SRS-150","STATUS":"Active","TITLE":"Inline anchors","STATEMENT":"StrictDoc shall support adding anchors within the text content of any node, such that these anchors can be referenced by inline links from other nodes.\n","RATIONALE":"Anchors allow authors to define precise reference points within SDoc node fields.\n","_LINK":"SDOC-SRS-150"},"589":{"MID":"cbc7f72c6e0b4c858817bf17357105a5","TITLE":"SDoc text markup","_LINK":"2-SDoc-text-markup"},"590":{"MID":"27a6da48c65445539e536ee034921fb5","UID":"SDOC-SRS-20","STATUS":"Active","TITLE":"SDoc markup language","STATEMENT":"StrictDoc shall implement its own text markup language called S-Doc (strict-doc).\n","RATIONALE":"The most commonly used Markdown format lacks the ability to store requirements metadata. While the RST syntax does allow for customization with directives to implement metadata extensions, its visual appearance contradicts other requirements of StrictDoc, such as the type-safety of the grammar and visual readability. Therefore, a markup language tailored specifically to the needs of the requirements tool provides direct control over the capabilities implemented in both the markup and the user interface.\n","_LINK":"SDOC-SRS-20"},"591":{"MID":"1f147feed60245378de2e099facd196d","UID":"SDOC-SRS-136","STATUS":"Active","TITLE":"Identical SDoc content by import/export roundtrip","STATEMENT":"StrictDoc shall ensure that identical SDoc content is produced every time StrictDoc reads an SDoc file and then writes it to another SDoc file.\n","RATIONALE":"A consistent import/export roundtrip implementation and testing reduces the risk of the SDoc bi-directional import/export corruption.\n","_LINK":"SDOC-SRS-136"},"592":{"MID":"f48a57c0cd764951a667127ce92fdb12","UID":"SDOC-SRS-127","STATUS":"Active","TITLE":"SDoc and Git storage","STATEMENT":"StrictDoc shall assume and implement capabilities for storage of SDoc files using Git version control system.\n","_LINK":"SDOC-SRS-127"},"593":{"MID":"9df34a7ab79842d99ee68303f334d4eb","UID":"SDOC-SRS-104","STATUS":"Active","TITLE":"SDoc file extension","STATEMENT":"The SDoc markup content shall be stored in files with .sdoc extension.\n","RATIONALE":"Given that the name of the model is S-Doc (strict-doc), it is reasonable to make the document files have the ``.sdoc`` extension. This helps to identify the document files.\n","_LINK":"SDOC-SRS-104"},"594":{"MID":"8dd6dd3979484dadbe71ac91aab50608","UID":"SDOC-SRS-105","STATUS":"Active","TITLE":"One document per one SDoc file","STATEMENT":"StrictDoc's SDoc file shall represent content of a single document.\n","COMMENT":"A \"Document\" corresponds to a \"Document\" of the SDoc data model.\n","_LINK":"SDOC-SRS-105"},"595":{"MID":"e5e3033c13f24fa083423230da7994f7","UID":"SDOC-SRS-19","STATUS":"Active","TITLE":"Fixed grammar","STATEMENT":"StrictDoc's markup language shall be based on a well-defined grammar.\n","_LINK":"SDOC-SRS-19"},"596":{"MID":"b97418ceccff438cb0457ed4bdf1be47","UID":"SDOC-SRS-93","STATUS":"Active","TITLE":"Default grammar fields","STATEMENT":"The StrictDoc grammar shall have at least the following fields activated by default:\n\n- UID\n- STATUS\n- TITLE\n- STATEMENT\n- RATIONALE\n- COMMENT\n- RELATIONS (references to other requirements)\n","_LINK":"SDOC-SRS-93"},"597":{"MID":"8924c29136944f65ac5efc8b6b90a07b","UID":"SDOC-SRS-21","STATUS":"Active","TITLE":"Custom grammar / fields","STATEMENT":"The SDoc markup shall support custom grammars.\n","RATIONALE":"A custom grammar allows a user to define their own configuration of requirement fields.\n","_LINK":"SDOC-SRS-21"},"598":{"MID":"10d23bfbf4504c2e8c995ae89c500be4","UID":"SDOC-SRS-122","STATUS":"Active","TITLE":"Importable grammars","STATEMENT":"StrictDoc shall support an inclusion of a grammar stored in a separate file.\n","RATIONALE":"A single grammar defined for several documents helps to standardize the structure of all documents in a documentation tree and removes the effort needed to create identical grammars all the time.\n","_LINK":"SDOC-SRS-122"},"599":{"MID":"5405c74a9eba4e9193007f01ea98bc85","UID":"SDOC-SRS-22","STATUS":"Active","TITLE":"UID identifier format","STATEMENT":"The SDoc markup shall only accept UID identifiers that consist of alphanumeric characters separated by a limited set of (\"_\", \"-\", \".\") characters (TBD).\n","RATIONALE":"A standardized UID format supports easier unique identification of requirements. It is easier to visually identify UIDs that look similar and common to a given industry.\n","COMMENT":"This requirement may need a revision to accommodate for more UID formats.\n","_LINK":"SDOC-SRS-22"},"600":{"MID":"f871dfc381354daf820cc1e2b94fdb05","UID":"SDOC-SRS-24","STATUS":"Active","TITLE":"Support RST markup","STATEMENT":"StrictDoc shall support the RST markup.\n","_LINK":"SDOC-SRS-24"},"601":{"MID":"b1b4f03d4e404a14be481626803fcfc2","UID":"SDOC-SRS-27","STATUS":"Active","TITLE":"MathJAX","STATEMENT":"StrictDoc's markup language shall support integration with MathJax.\n","_LINK":"SDOC-SRS-27"},"602":{"MID":"39f117b79cfa4a8485c458280b3d36ce","UID":"SDOC-SRS-23","STATUS":"Active","TITLE":"No indentation","STATEMENT":"SDoc text markup blocks shall all start from column 1, i.e., the nesting of the blocks is not allowed.\n","RATIONALE":"Nesting large text blocks of free text and requirements compromises readability.\n","_LINK":"SDOC-SRS-23"},"603":{"MID":"98628e1db3ca4f52b7632674b69dd657","UID":"SDOC-SRS-25","STATUS":"Active","TITLE":"Type-safe fields","STATEMENT":"SDoc markup shall provide \"type safety\" for all fields.\n\nNOTE: \"Type safety\" means that each field has a type and a corresponding set of validation checks.\n","_LINK":"SDOC-SRS-25"},"604":{"MID":"34b4abc6bb4649de9e56af31c229b0d1","UID":"SECTION-SRS-Graph-database","TITLE":"Graph database","_LINK":"SECTION-SRS-Graph-database"},"605":{"MID":"2c8d7940a23c443f81a7eb373340894e","UID":"SDOC-SRS-28","STATUS":"Active","TITLE":"Traceability index","STATEMENT":"StrictDoc shall maintain a complete Traceability Index of all documentation- and requirements-related information available in a project tree.\n","_LINK":"SDOC-SRS-28"},"606":{"MID":"272b8933276d4cd48a78fcfa11899573","UID":"SDOC-SRS-29","STATUS":"Active","TITLE":"Uniqueness UID in tree","STATEMENT":"For each requirement node, the Traceability Index shall ensure its uniqueness throughout the node's lifecycle.\n","RATIONALE":"The requirement ensures that the Traceability Index takes of care of validating the uniqueness of all nodes in a document/requirements graph.\n","_LINK":"SDOC-SRS-29"},"607":{"MID":"8330d61fd5b1438fa90f127f88903a0d","UID":"SDOC-SRS-30","STATUS":"Active","TITLE":"Detect links cycles","STATEMENT":"The Traceability Index shall detect cycles between requirements.\n","_LINK":"SDOC-SRS-30"},"608":{"MID":"07a1e7bef11d4fcca86cd31ee5245d8d","UID":"SDOC-SRS-32","STATUS":"Active","TITLE":"Link document nodes","STATEMENT":"The Traceability Index shall recognize and maintain the relations between all documents of a project tree.\n","RATIONALE":"The relations between all documents are a summary of all relations between these documents' requirements. This information is useful for:\n\n1) Structural analysis of a requirements/documents graph.\n2) Incremental regeneration of only those documents whose content was modified.\n","_LINK":"SDOC-SRS-32"},"609":{"MID":"2dad5f293bc442eaa98859c4b5eac0d5","UID":"SDOC-SRS-102","STATUS":"Active","TITLE":"Automatic resolution of reverse relations","STATEMENT":"The StrictDoc's graph database shall maintain the requirement relations and their reverse relations as follows:\n\n- For a Parent relation, the database shall calculate the reverse Child relation.\n- For a Child relation, the database shall calculate the reverse Parent relation.\n","RATIONALE":"The calculation of the reverse relations allows the user interface code to get and display both requirement's parent and child relations.\n","COMMENT":"Example: If a child requirement REQ-002 has a parent requirement REQ-001, the graph database first reads the link ``REQ-002 -Parent> REQ-001``, then it creates a corresponding ``REQ-001 -Child> REQ-002`` on the go. Both relations can be queried as follows, in pseudocode:\n\n.. code-block::\n\n    get_parent_requirements(REQ-002) == [REQ-001]\n    get_children_requirements(REQ-001) == [REQ-002]\n","_LINK":"SDOC-SRS-102"},"610":{"MID":"4dce611287954289b1c2a6a15c413611","TITLE":"Documentation tree","_LINK":"4-Documentation-tree"},"611":{"MID":"50b2d5d6eb1140f0a2b980203468a5f7","UID":"SDOC-SRS-115","STATUS":"Active","TITLE":"Finding documents recursively","STATEMENT":"StrictDoc shall discover SDoc documents recursively based on a specified input path.\n","RATIONALE":"Recursive search allows working with documents located in multiple folders, potentially spanning over several Git repositories.\n","_LINK":"SDOC-SRS-115"},"612":{"MID":"fcbf717009ce4cb2a8def7eb7b377654","UID":"SECTION-SRS-Web-HTML-frontend","TITLE":"Web/HTML frontend","_LINK":"SECTION-SRS-Web-HTML-frontend"},"613":{"MID":"a3603184d571449792f5cd752c978686","UID":"SECTION-SRS-General-export-requirements-2","TITLE":"General export requirements","_LINK":"SECTION-SRS-General-export-requirements-2"},"614":{"MID":"37f17fdd57ff47e9b7f4147adaeabde1","UID":"SDOC-SRS-49","STATUS":"Active","TITLE":"Export to static HTML website","STATEMENT":"StrictDoc shall support generating requirements documentation into static HTML.\n","_LINK":"SDOC-SRS-49"},"615":{"MID":"37399be2a8ac46889e3437209f9dffa9","UID":"SDOC-SRS-50","STATUS":"Active","TITLE":"Web interface","STATEMENT":"StrictDoc shall provide a web interface.\n","_LINK":"SDOC-SRS-50"},"616":{"MID":"f2fd90ad8a2946e7b085233a9c7a8a75","UID":"SDOC-SRS-51","STATUS":"Active","TITLE":"Export to printable HTML pages (HTML2PDF)","STATEMENT":"StrictDoc shall provide export to printable HTML pages.\n","_LINK":"SDOC-SRS-51"},"617":{"MID":"8811f0ef33de4365bc66a602a8c184f6","UID":"SDOC-SRS-48","STATUS":"Active","TITLE":"Preserve generated file names","STATEMENT":"For all export operations, StrictDoc shall maintain the original filenames of the documents when producing output files.\n","RATIONALE":"Name preservation helps to visually identify which input file an output file corresponds to.\n","_LINK":"SDOC-SRS-48"},"618":{"MID":"b99ebebdadb94fec968785429cef9002","UID":"SECTION-SRS-Screen-Project-tree","TITLE":"Screen: Project tree","_LINK":"SECTION-SRS-Screen-Project-tree"},"619":{"MID":"100fa410f4b443e69c48738899cfb5bd","UID":"SDOC-SRS-53","STATUS":"Active","TITLE":"View project tree","STATEMENT":"StrictDoc's \"Project tree\" screen shall provide browsing of a documentation project tree.\n","RATIONALE":"This screen is the main tool for visualizing the project tree structure.\n","_LINK":"SDOC-SRS-53"},"620":{"MID":"eb04abcfd64146f3b7be509afd1693f9","UID":"SDOC-SRS-107","STATUS":"Active","TITLE":"Create document","STATEMENT":"StrictDoc's Project Tree screen shall allow creating documents.\n","_LINK":"SDOC-SRS-107"},"621":{"MID":"de7cda1156e043d7999933a2df630a30","UID":"SDOC-SRS-108","STATUS":"Active","TITLE":"Delete document","STATEMENT":"StrictDoc's Project Tree screen shall allow deleting documents.\n","_LINK":"SDOC-SRS-108"},"622":{"MID":"185cfc2d1ed4429ebaf0689f70a8cb0a","UID":"SECTION-SRS-Screen-Document-DOC","TITLE":"Screen: Document (DOC)","_LINK":"SECTION-SRS-Screen-Document-DOC"},"623":{"MID":"9c962637ef7f45b6af6c83964b0a06d9","UID":"SDOC-SRS-54","STATUS":"Active","TITLE":"Read document","STATEMENT":"StrictDoc's Document screen shall allow reading documents.\n","_LINK":"SDOC-SRS-54"},"624":{"MID":"201187122be14ea48d69106d396c6790","UID":"SDOC-SRS-106","STATUS":"Active","TITLE":"Update document","STATEMENT":"StrictDoc's Document screen shall allow updating documents.\n","_LINK":"SDOC-SRS-106"},"625":{"MID":"13968ae160744e10ba8979eaee2f4f54","UID":"SDOC-SRS-55","STATUS":"Active","TITLE":"Edit requirement nodes","STATEMENT":"StrictDoc's Document screen shall allow editing requirements.\n","_LINK":"SDOC-SRS-55"},"626":{"MID":"edc02a3a97704007b70b93102c76b278","UID":"SDOC-SRS-92","STATUS":"Active","TITLE":"Move requirement / section nodes within document","STATEMENT":"StrictDoc's Document screen shall provide a capability to move the nodes within a document.\n","RATIONALE":"Moving the nodes within a document is a convenience feature that speeds up the requirements editing process significantly.\n","_LINK":"SDOC-SRS-92"},"627":{"MID":"197e00dd3b1d42309250c89de23ea51b","UID":"SDOC-SRS-56","STATUS":"Active","TITLE":"Edit Document grammar","STATEMENT":"StrictDoc's screen shall allow editing a document's grammar.\n","RATIONALE":"Editing document grammar allows a user to customize the requirements fields.\n","_LINK":"SDOC-SRS-56"},"628":{"MID":"2706ac7ccb8148edb7b200a1b78c25d6","UID":"SDOC-SRS-57","STATUS":"Active","TITLE":"Edit Document options","STATEMENT":"StrictDoc's Document screen shall provide controls for configuring the document-specific options.\n","_LINK":"SDOC-SRS-57"},"629":{"MID":"d64f7a0f6ba54672a62634304c54e2d4","UID":"SDOC-SRS-96","STATUS":"Active","TITLE":"Auto-generate requirements UIDs","STATEMENT":"StrictDoc's Document screen shall provide controls for automatic generation of requirements UIDs.\n","_LINK":"SDOC-SRS-96"},"630":{"MID":"956371b6a7824d0b91caa5603faeeae2","UID":"SDOC-SRS-120","STATUS":"Active","TITLE":"Auto-completion for requirements UIDs","STATEMENT":"StrictDoc's Document screen shall provide controls for automatic completion of requirements UIDs.\n","COMMENT":"The automatic completion can be especially useful when a user has to fill in a parent relation UID.\n","_LINK":"SDOC-SRS-120"},"631":{"MID":"738b63b7f55b43eb99f5600bd65f5ba7","UID":"SDOC-SRS-59","STATUS":"Active","TITLE":"Buttons to copy text to buffer","STATEMENT":"StrictDoc shall provide a \"copy text to buffer\" button for all requirement's text fields.\n","_LINK":"SDOC-SRS-59"},"632":{"MID":"2b5d74dafd6d43f4bab4c05ed4da6f0d","UID":"SECTION-SRS-Screen-Table-TBL","TITLE":"Screen: Table (TBL)","_LINK":"SECTION-SRS-Screen-Table-TBL"},"633":{"MID":"e12b4c5b4f13444d99279ab445df5bcc","UID":"SDOC-SRS-62","STATUS":"Active","TITLE":"View TBL screen","STATEMENT":"StrictDoc's Table screen shall allow reading documents in a table-like manner.\n","_LINK":"SDOC-SRS-62"},"634":{"MID":"3c589969eb6a41c19b1dd246dabadbc8","UID":"SECTION-SRS-Screen-Traceability-TR","TITLE":"Screen: Traceability (TR)","_LINK":"SECTION-SRS-Screen-Traceability-TR"},"635":{"MID":"35d4c1dd30814c2a80918a90081a88b7","UID":"SDOC-SRS-65","STATUS":"Active","TITLE":"View TR screen","STATEMENT":"StrictDoc shall provide a single document-level traceability screen.\n\nNOTE: This screen helps to read a document like a normal document while the traceability to this document's parent and child elements is visible at the same time.\n","_LINK":"SDOC-SRS-65"},"636":{"MID":"9d337068b6a940b7a98d40697ea200a8","UID":"SECTION-SRS-Screen-Deep-traceability-DTR","TITLE":"Screen: Deep traceability (DTR)","_LINK":"SECTION-SRS-Screen-Deep-traceability-DTR"},"637":{"MID":"48bc17d898c94605b17d0267480f57ee","UID":"SDOC-SRS-66","STATUS":"Active","TITLE":"View DTR screen","STATEMENT":"StrictDoc shall provide a deep traceability screen.\n","_LINK":"SDOC-SRS-66"},"638":{"MID":"ddf15b3113a54107979752ec192e2ded","TITLE":"Screen: Project statistics","_LINK":"5.7-Screen-Project-statistics"},"639":{"MID":"19f7c2d35237423e950584a4a7aa95a7","UID":"SDOC-SRS-97","STATUS":"Active","TITLE":"Display project statistics","STATEMENT":"StrictDoc shall provide a Project Statistics screen that displays the following project information:\n\n- Project title\n- Date of generation\n- Git revision\n- Total documents\n- Total requirements\n- Requirements status breakdown\n- Total number of TBD/TBC found in documents.\n","RATIONALE":"TBD\n","_LINK":"SDOC-SRS-97"},"640":{"MID":"7968fb7612f64504b5a430ccbffe80f1","UID":"SDOC-SRS-154","STATUS":"Active","TITLE":"Support for user-provided custom statistics generators","STATEMENT":"StrictDoc shall support customization of the project statistics screen, enabling users to define and display their own project-specific statistics.\n","RATIONALE":"Projects often have unique traceability and reporting requirements, and supporting custom statistics allows StrictDoc to display metrics that are most relevant to each project's context.\n","_LINK":"SDOC-SRS-154"},"641":{"MID":"14ad600308434e6baaeef02d3e90b720","TITLE":"Screen: Traceability matrix","_LINK":"5.8-Screen-Traceability-matrix"},"642":{"MID":"167f6fe66d7247a6bf628ed6c1949275","UID":"SDOC-SRS-112","STATUS":"Active","TITLE":"Traceability matrix","STATEMENT":"StrictDoc shall provide a traceability matrix screen.\n","_LINK":"SDOC-SRS-112"},"643":{"MID":"544f8ffed8604e63a269a3f953681163","TITLE":"Screen: Project tree diff","_LINK":"5.9-Screen-Project-tree-diff"},"644":{"MID":"aef80cc1a3144564bf23bf3c2a1cfd7f","UID":"SDOC-SRS-111","STATUS":"Active","TITLE":"Project tree diff","STATEMENT":"StrictDoc shall provide a project tree diff screen.\n","_LINK":"SDOC-SRS-111"},"645":{"MID":"8380fb39beb04d1c9370733bcfafbc01","TITLE":"Content search","_LINK":"5.10-Content-search"},"646":{"MID":"3e85dd6bf05a4cecb8e070fd81aa333a","UID":"SDOC-SRS-155","STATUS":"Active","TITLE":"Content search","STATEMENT":"StrictDoc shall provide searching documentation content with queries via a search bar.\n","RATIONALE":"As per the parent requirement, a search bar with query support enables users to interactively find specific content without navigating the entire documentation tree.\n","_LINK":"SDOC-SRS-155"},"647":{"MID":"2d4dc6fc901f4b28aaf414fcfbdfabca","UID":"SECTION-SRS-Requirements-to-source-traceability","TITLE":"Requirements-to-source traceability","_LINK":"SECTION-SRS-Requirements-to-source-traceability"},"648":{"MID":"221b544dab2e4b96be124e1caf84a7c2","UID":"SDOC-SRS-33","STATUS":"Active","TITLE":"Link requirements with source files","STATEMENT":"StrictDoc shall support bi-directional linking requirements with source files.\n","_LINK":"SDOC-SRS-33"},"649":{"MID":"2f63252320d546d88462849b521f45ba","TITLE":"Language-aware parsing of source code","_LINK":"6.2-Language-aware-parsing-of-source-code"},"650":{"MID":"79a8080f6e41485f9835ccda067b34bc","UID":"SDOC-SRS-142","TITLE":"Language-aware parsing of source code","STATEMENT":"StrictDoc shall support parsing the most commonly used formats and programming languages to the Abstract Syntax Tree (AST) level.\n\nThe format examples: C, C++, Python, Rust, Ada, Robot, Gherkin, etc.\n","RATIONALE":"StrictDoc must be capable of traversing the AST of common formats and programming languages to identify and extract function and class markers.\n","_LINK":"SDOC-SRS-142"},"651":{"MID":"85a8080f8441485f9111ccda063b34bc","UID":"SDOC-SRS-146","STATUS":"Active","TITLE":"Language-aware parsing of C/C++ code","STATEMENT":"StrictDoc shall support parsing the C and C++ source files which includes:\n\n- Recognizing functions and their Doxygen comments.\n- Recognizing function declarations and function definitions.\n","RATIONALE":"C and C++ languages are common languages for embedded and general systems programming. These languages have to be handled with a dedicated parser because of these languages' specifics.\n","_LINK":"SDOC-SRS-146"},"652":{"MID":"3456080f1358485f9bacdcda063b34bc","UID":"SDOC-SRS-147","STATUS":"Active","TITLE":"Language-aware parsing of Python code","STATEMENT":"StrictDoc shall support parsing the Python source files which includes:\n\n- Recognizing Python functions, including nested functions.\n- Recognizing Python classes, including nested classes.\n- Recognizing decorated functions.\n","RATIONALE":"Python language has to be handled with a dedicated parser because of this language's specifics.\n","_LINK":"SDOC-SRS-147"},"653":{"MID":"9183080f1358485f9bacdcda0635109","UID":"SDOC-SRS-148","STATUS":"Active","TITLE":"Language-aware parsing of Robot framework code","STATEMENT":"StrictDoc shall support parsing the Robot framework test files.\n","RATIONALE":"Robot framework's markup has to be handled with a dedicated parser because of this language's specifics.\n","_LINK":"SDOC-SRS-148"},"654":{"MID":"bdeda4b89d82446281e2c7c2eae46708","UID":"SDOC-SRS-143","STATUS":"Active","TITLE":"Link requirements with test files and test reports","STATEMENT":"StrictDoc shall support bi-directional linking between requirements, test files, and test reports.\n","RATIONALE":"Tracing requirements to not just test files but also the test report information closes the verification cycle more completely.\n","_LINK":"SDOC-SRS-143"},"655":{"MID":"aefeb5b89d82446281e2c7c2eae12345","UID":"SDOC-SRS-144","STATUS":"Draft","TITLE":"Link requirements with code coverage information","STATEMENT":"StrictDoc shall support linking between requirements, source files, and code coverage information.\n","RATIONALE":"Tracing requirements to not just test files but also to the code coverage information closes the verification cycle more completely.\n","_LINK":"SDOC-SRS-144"},"656":{"MID":"5fedbaba39d24da79d074501198ff654","TITLE":"Forward linking from requirements to source code","_LINK":"6.5-Forward-linking-from-requirements-to-source-code"},"657":{"MID":"21637d9bec434d32bb6b97ba5a4e70e6","UID":"SDOC-SRS-145","TITLE":"SDoc markup's forward relations","STATEMENT":"StrictDoc shall support forward linking from SDoc nodes to source files.\n","RATIONALE":"There are cases when it is not possible to modify source code directly. The forward linking enables to refer to the files or their parts from SDoc nodes. Depending on a project structure, the forward linking from requirements to source files can replace the backward linking from source code back to requirements, or both approaches can co-exist.\n","_LINK":"SDOC-SRS-145"},"658":{"MID":"9c1dd6cbabd44ac680985c403cf710a7","TITLE":"Source code markup – Relations","_LINK":"6.6-Source-code-markup-Relations"},"659":{"MID":"b9144222a7f3454da2989f494cd9647c","UID":"SDOC-SRS-34","STATUS":"Active","TITLE":"Relation markers syntax","STATEMENT":"StrictDoc shall support annotating source code with links that reference the requirements.\n","_LINK":"SDOC-SRS-34"},"660":{"MID":"61c25cab106e4283b2c6d64bf1db96b2","UID":"SDOC-SRS-124","STATUS":"Active","TITLE":"Line marker","STATEMENT":"StrictDoc's shall support line markers that can be attached to single source code lines.\n\nNOTE: A single-line marker points to a single line in a source file.\n","RATIONALE":"Sometimes a requirement can influence only a single line in the source code. The advantage of a single-line marker compared to a range marker is that a single-line marker is not intrusive and does not clutter source code.\n","_LINK":"SDOC-SRS-124"},"661":{"MID":"61c23c1b106e4583b2c6d64bf1d296ba","UID":"SDOC-SRS-137","STATUS":"Active","TITLE":"Function marker","STATEMENT":"StrictDoc shall support relation markers that can be attached to individual source code functions.\n","RATIONALE":"A function is a basic building block of most programming language. It is straightforward to match a source code function to one or more related requirements.\n","_LINK":"SDOC-SRS-137"},"662":{"MID":"86e23c1b106e4adeb2c6d64bf1d29aaa","UID":"SDOC-SRS-140","STATUS":"Active","TITLE":"Class marker","STATEMENT":"StrictDoc shall support relation markers that can be attached to source code classes.\n","RATIONALE":"A class is a basic building block of most programming language. Some requirements can be naturally attached to the whole classes.\n","COMMENT":"Not all programming languages support classes, e.g., C. For these languages and non-code text files, the class markers will have no effect.\n","_LINK":"SDOC-SRS-140"},"663":{"MID":"82345cab106e4283b2c7774bf1db96b1","UID":"SDOC-SRS-139","STATUS":"Active","TITLE":"File marker","STATEMENT":"StrictDoc's shall support file markers that can be attached to entire source files.\n\nNOTE: A single-line marker points to a single line in a source file.\n","RATIONALE":"There are cases when a requirement can be attached to an entire file.\n","_LINK":"SDOC-SRS-139"},"664":{"MID":"11c23c1b105e4583b2c6d64bf1d296cc","UID":"SDOC-SRS-138","STATUS":"Active","TITLE":"Range marker","STATEMENT":"StrictDoc shall support relation markers that can be attached to source code ranges.\n\nNOTE: Compared to other marker types, to indicate a range, two markers are needed: one to start a range and one to end a range.\n","RATIONALE":"There are cases when a requirement implementation results in the requirement affecting only a range/block of source code.\n","_LINK":"SDOC-SRS-138"},"665":{"MID":"5ce2ea410dd94927807a258f482483a5","TITLE":"Source code markup – Nodes","_LINK":"6.7-Source-code-markup-Nodes"},"666":{"MID":"f44df3c6a84f4b4e9201a61023446d9c","UID":"SDOC-SRS-141","STATUS":"Active","TITLE":"Parse nodes from source code","STATEMENT":"StrictDoc shall support parsing nodes from source code.\n","RATIONALE":"It can be practical to define the requirement and other nodes directly in source comments and then let a requirements tool generate documents from these nodes' content automatically.\n\nA reference example: Generating test specifications from the TEST_SPEC nodes which are defined directly in source code comments.\n","_LINK":"SDOC-SRS-141"},"667":{"MID":"3aeb1eea0dba4041a9161a1a8d291999","UID":"SDOC-SRS-35","STATUS":"Active","TITLE":"Generate project source code coverage","STATEMENT":"StrictDoc shall generate project source code coverage information.\n\nNOTE: Source code information can be visualized using both web or CLI interfaces.\n","_LINK":"SDOC-SRS-35"},"668":{"MID":"56ecfb19152e45b09c0e55de2d1d5f05","UID":"SDOC-SRS-36","STATUS":"Active","TITLE":"Generate single source file coverage","STATEMENT":"StrictDoc shall generate single file traceability information.\n","RATIONALE":"With this capability in place, it is possible to focus on a single implementation file's links to requirements which helps in the code reviews and inspections.\n","_LINK":"SDOC-SRS-36"},"669":{"MID":"1acdd6ddf9d24dbaa320230402152226","UID":"SECTION-SRS-Export-import-formats","TITLE":"Export/import formats","_LINK":"SECTION-SRS-Export-import-formats"},"670":{"MID":"ce1d174a4d794250931a5ba519583be6","UID":"SECTION-SRS-RST","TITLE":"RST","_LINK":"SECTION-SRS-RST"},"671":{"MID":"2aa615b9cf264e7aad826f4ff466e514","UID":"SDOC-SRS-70","STATUS":"Active","TITLE":"Export to RST","STATEMENT":"StrictDoc shall allow exporting SDoc content to the RST format.\n","RATIONALE":"Exporting SDoc content to RST enables:\n\n1) Generating RST to Sphinx HTML documentation.\n2) Generating RST to PDF using Sphinx/LaTeX.\n","_LINK":"SDOC-SRS-70"},"672":{"MID":"6faffbd1d4cc47ea88c08ef38966e5ec","UID":"SDOC-SRS-71","STATUS":"Active","TITLE":"Docutils","STATEMENT":"StrictDoc shall generate RST markup to HTML using Docutils.\n","RATIONALE":"Docutils is the most mature RST-to-HTML converter.\n","COMMENT":"TBD: Move this to design decisions.\n","_LINK":"SDOC-SRS-71"},"673":{"MID":"a906dfb776334b8985f778f0fe1b79e4","UID":"SECTION-SRS-ReqIF","TITLE":"ReqIF","_LINK":"SECTION-SRS-ReqIF"},"674":{"MID":"2bf94015818e4770b2b1947b5fdbb969","UID":"SDOC-SRS-72","STATUS":"Active","TITLE":"Export/import from/to ReqIF","STATEMENT":"StrictDoc shall support exporting/importing requirements content from/to ReqIF format.\n","_LINK":"SDOC-SRS-72"},"675":{"MID":"bb52b698d7a544aca420d606e4e51356","UID":"SDOC-SRS-73","STATUS":"Active","TITLE":"Standalone ReqIF layer","STATEMENT":"StrictDoc shall maintain the core ReqIF implementation as a separate software component.\n","RATIONALE":"ReqIF is a well-defined standard which exists independently of StrictDoc's development. It is reasonable to maintain the ReqIF codebase as a separate software component to allow independent development and easier maintainability.\n","_LINK":"SDOC-SRS-73"},"676":{"MID":"0ffda51372b641f6ba460bf5ac8b3627","UID":"SECTION-SRS-Excel","TITLE":"Excel and CSV","_LINK":"SECTION-SRS-Excel"},"677":{"MID":"f7b587f66dda402dbd58768e2740742f","UID":"SDOC-SRS-74","STATUS":"Active","TITLE":"Export to Excel","STATEMENT":"StrictDoc shall allow exporting SDoc documents to Excel, one Excel sheet per document.\n","_LINK":"SDOC-SRS-74"},"678":{"MID":"97b587f66dda402dbd58768e2740742f","UID":"SDOC-SRS-152","STATUS":"Active","TITLE":"Import from Excel","STATEMENT":"StrictDoc shall allow importing Excel documents to SDoc documents, one Excel sheet per document.\n","_LINK":"SDOC-SRS-152"},"679":{"MID":"5aa75848972249d5bec8a40812b99d86","UID":"SDOC-SRS-134","STATUS":"Active","TITLE":"Selected fields export","STATEMENT":"StrictDoc Excel export shall allow exporting SDoc documents to Excel with only selected fields.\n","_LINK":"SDOC-SRS-134"},"680":{"MID":"53cfa6296eec45479544e6c5165d7fb9","UID":"SECTION-SRS-Command-line-interface","TITLE":"Command-line interface","_LINK":"SECTION-SRS-Command-line-interface"},"681":{"MID":"63373c3875404f1c820add84ea057c73","TITLE":"General CLI requirements","_LINK":"8.1-General-CLI-requirements"},"682":{"MID":"598647eed3a446fe93e2c54b197f830e","UID":"SDOC-SRS-103","STATUS":"Active","TITLE":"Command-line interface","STATEMENT":"StrictDoc shall provide a command-line interface.\n","_LINK":"SDOC-SRS-103"},"683":{"MID":"7c6a0efe76b84dcd842ef371796e787e","UID":"SECTION-SRS-Command-Manage","TITLE":"Command: Manage","_LINK":"SECTION-SRS-Command-Manage"},"684":{"MID":"bea76afe9bf241eaaf5984b54e00ff76","UID":"SECTION-SRS-Command-Auto-UID","TITLE":"Command: Auto UID","_LINK":"SECTION-SRS-Command-Auto-UID"},"685":{"MID":"7daa1310876a421f8e39f8ac25b99c1d","UID":"SDOC-SRS-85","STATUS":"Active","TITLE":"Auto-generate requirements UIDs","STATEMENT":"StrictDoc shall allow automatic generation of requirements UIDs.\n","_LINK":"SDOC-SRS-85"},"686":{"MID":"a0ed7cdd06ec4f0ab6d3ba56cced8c7e","TITLE":"Python API","_LINK":"9-Python-API"},"687":{"MID":"a20c5b6a021f4dd5a5a5dda2880c1b87","UID":"SDOC-SRS-125","STATUS":"Active","TITLE":"StrictDoc Python API","STATEMENT":"StrictDoc shall provide a Python API for its core functions:\n\n- Reading SDoc files\n- Creating traceability graph\n- Generating HTML exports\n- Converting SDoc to other formats.\n","_LINK":"SDOC-SRS-125"},"688":{"MID":"590121ded2074757aa1720b4d8013426","TITLE":"Web server","_LINK":"10-Web-server"},"689":{"MID":"409f462f1f4645c8ad24980727a72521","UID":"SDOC-SRS-126","STATUS":"Active","TITLE":"Web server","STATEMENT":"StrictDoc shall provide a web server.\n","RATIONALE":"A web server is a precondition for StrictDoc's web interface. A web server can be available to a single user on their local machine or it can be deployed to a network and be made accessible by several computers.\n","_LINK":"SDOC-SRS-126"},"690":{"MID":"44eb09d0e5b542d5984d234167e6f337","TITLE":"User experience","_LINK":"11-User-experience"},"691":{"MID":"821c01118a9643a188a4ecc5b0cec6a5","UID":"SECTION-SSRS-Strict-mode-by-default","TITLE":"Strict mode by default","_LINK":"SECTION-SSRS-Strict-mode-by-default"},"692":{"MID":"c4e9dce647654deeab8471d04573f8cb","UID":"SDOC-SRS-6","STATUS":"Active","TITLE":"Warnings are errors","STATEMENT":"StrictDoc's default mode of operation shall treat all warnings as errors.\n","_LINK":"SDOC-SRS-6"},"693":{"MID":"40e7bd8aabdf4cb889e9d7b01b8729e6","UID":"SECTION-SRS-Configurability","TITLE":"Configurability","_LINK":"SECTION-SRS-Configurability"},"694":{"MID":"da446e6d3c6d4b13badd4a47bdbcc5a3","UID":"SDOC-SRS-37","STATUS":"Active","TITLE":"strictdoc.toml file","STATEMENT":"StrictDoc shall support a configuration of project-level options through a TOML file named ``strictdoc.toml``.\n","_LINK":"SDOC-SRS-37"},"695":{"MID":"a6e70c0619204a26b135d1e5fca45dd7","UID":"SDOC-SRS-39","STATUS":"Active","TITLE":"Feature toggles","STATEMENT":"StrictDoc shall allow a user to select a subset of StrictDoc's available features by listing them in the ``strictdoc.toml`` file.\n","_LINK":"SDOC-SRS-39"},"696":{"MID":"a8a17295d3e24601891c7d19d5ca67d9","UID":"SDOC-SRS-119","STATUS":"Active","TITLE":"'Host' parameter","STATEMENT":"StrictDoc shall support configuring a host/port on which the StrictDoc web server is run.\n","_LINK":"SDOC-SRS-119"},"697":{"MID":"bb14fb2c46f34cf1a82b417b57e95853","UID":"SECTION-SSRS-Performance","TITLE":"Performance","_LINK":"SECTION-SSRS-Performance"},"698":{"MID":"acd97ca6b9d2451da53168917d96705e","UID":"SDOC-SRS-1","STATUS":"Active","TITLE":"Process-based parallelization","STATEMENT":"StrictDoc shall support process-based parallelization for time-critical tasks.\n","RATIONALE":"Process-based parallelization can provide a good speed-up when several large documents have to be generated.\n","_LINK":"SDOC-SRS-1"},"699":{"MID":"54602f6d120548c8bbd70d1d25113d53","UID":"SDOC-SRS-95","STATUS":"Active","TITLE":"Caching of parsed SDoc documents","STATEMENT":"StrictDoc shall implement caching of parsed SDoc documents.\n","_LINK":"SDOC-SRS-95"},"700":{"MID":"6fec2f8c0baa4ddba95bee05ad03a785","UID":"SDOC-SRS-2","STATUS":"Active","TITLE":"Incremental generation of documents","STATEMENT":"StrictDoc shall support incremental generation of documents.\n\nNOTE: \"Incremental\" means that only the modified documents are regenerated when StrictDoc is run repeatedly against the same project tree.\n","_LINK":"SDOC-SRS-2"},"701":{"MID":"5f2df631605543d18d57e09bc3791003","UID":"SDOC-SRS-3","STATUS":"Active","TITLE":"Caching of RST fragments","STATEMENT":"StrictDoc shall cache the RST fragments rendered to HTML.\n","RATIONALE":"Conversion of RST markup to HTML is a time consuming process. Caching the rendered HTML of each fragment helps to save time when rendering the HTML content.\n","_LINK":"SDOC-SRS-3"},"702":{"MID":"d0c4828ed8434613aae844481bbef1ca","UID":"SDOC-SRS-4","STATUS":"Active","TITLE":"On-demand loading of HTML pages","STATEMENT":"StrictDoc's web interface shall generate the HTML content only when it is directly requested by a user.\n","RATIONALE":"Generating a whole documentation tree for a user project can be time consuming. The on-demand loading ensures the \"do less work\" approach when it comes to rendering the HTML pages.\n","_LINK":"SDOC-SRS-4"},"703":{"MID":"4e014d3291ce460c993a0ff334eff4a7","UID":"SDOC-SRS-5","STATUS":"Active","TITLE":"Precompiled Jinja templates","STATEMENT":"StrictDoc shall support a precompilation of HTML templates.\n","RATIONALE":"The StrictDoc-exported HTML content visible to a user is assembled from numerous small HTML fragments. Precompiling the HTML templates from which the content gets rendered improves the performance of the HTML rendering.\n","_LINK":"SDOC-SRS-5"},"704":{"MID":"de3a4de44f474784bf233ea7610eac6c","UID":"SECTION-SRS-Quality-requirements","TITLE":"Development process requirements","_LINK":"SECTION-SRS-Quality-requirements"},"705":{"MID":"cbee3d3e8a9d440abaa58387c342602c","TITLE":"General process","_LINK":"14.1-General-process"},"706":{"MID":"27319e3866b8423099774d8770950acd","UID":"SDOC-SRS-133","STATUS":"Active","TITLE":"Priority handling of critical issues in StrictDoc","STATEMENT":"All critical issues reported in relation to StrictDoc shall be addressed with utmost priority.\n","RATIONALE":"Prioritizing major issues ensures StrictDoc remains stable and reliable, preventing serious problems that could compromise its performance and integrity.\n","_LINK":"SDOC-SRS-133"},"707":{"MID":"47cec130eb3d4583825355f2635e7011","UID":"SECTION-SRS-Requirements-engineering","TITLE":"Requirements engineering","_LINK":"SECTION-SRS-Requirements-engineering"},"708":{"MID":"d0ab977bbb494cbf818c92a1cab1bef0","UID":"SDOC-SRS-128","STATUS":"Active","TITLE":"Requirements-based development","STATEMENT":"StrictDoc's development shall be requirements-based.\n","_LINK":"SDOC-SRS-128"},"709":{"MID":"b3fff332c2e342ec9dd372ebd49cb64d","UID":"SDOC-SRS-91","STATUS":"Active","TITLE":"Self-hosted requirements","STATEMENT":"StrictDoc's requirements shall be written using StrictDoc.\n","_LINK":"SDOC-SRS-91"},"710":{"MID":"dfbaabc0529f4cc987358ae0563910e9","UID":"SECTION-SRS-Implementation-requirements","TITLE":"Implementation requirements","_LINK":"SECTION-SRS-Implementation-requirements"},"711":{"MID":"5eb734a4b8944531aa75f0b71ef22d52","UID":"SECTION-SRS-Programming-languages","TITLE":"Programming languages","_LINK":"SECTION-SRS-Programming-languages"},"712":{"MID":"4053ea6c8f6c4c29b89fea0e39912861","UID":"SDOC-SRS-8","STATUS":"Active","TITLE":"Python language","STATEMENT":"StrictDoc shall be written in Python.\n","RATIONALE":"Python has an excellent package ecosystem. It is a widely used language. It is most often the next language for C/C++ programming community when it comes to the tools development and scripting tasks.\n","_LINK":"SDOC-SRS-8"},"713":{"MID":"131af6457a9f43299306e6dc9fce65a7","UID":"SECTION-SRS-Cross-platform-availability","TITLE":"Cross-platform availability","_LINK":"SECTION-SRS-Cross-platform-availability"},"714":{"MID":"ceee07bdc9bd42fc9a4d0e9b4bfc312f","UID":"SDOC-SRS-9","STATUS":"Active","TITLE":"Linux","STATEMENT":"StrictDoc shall support the Linux operating systems.\n","_LINK":"SDOC-SRS-9"},"715":{"MID":"f8c7586e1b324480ac0bd153e068350d","UID":"SDOC-SRS-10","STATUS":"Active","TITLE":"macOS","STATEMENT":"StrictDoc shall support the macOS operating system.\n","_LINK":"SDOC-SRS-10"},"716":{"MID":"6af3dbb1e05244579622d3d2a26b5413","UID":"SDOC-SRS-11","STATUS":"Active","TITLE":"Windows","STATEMENT":"StrictDoc shall support the Windows operating system.\n","_LINK":"SDOC-SRS-11"},"717":{"MID":"852396c217184ba98a0d26b92f36fd04","UID":"SECTION-SRS-Implementation-constraints","TITLE":"Implementation constraints","_LINK":"SECTION-SRS-Implementation-constraints"},"718":{"MID":"83d5c896004948b48c3597d58267dafa","UID":"SDOC-SRS-89","STATUS":"Active","TITLE":"Use of open source components","STATEMENT":"StrictDoc shall be built using only open source software components.\n","RATIONALE":"No commercial/proprietary dependency chain ensures that StrictDoc remain free and open for everyone.\n","_LINK":"SDOC-SRS-89"},"719":{"MID":"b22bf982e73246a79a5ba4ae653d21e5","UID":"SDOC-SRS-14","STATUS":"Active","TITLE":"No heavy UI frameworks","STATEMENT":"StrictDoc shall avoid using large and demanding UI frameworks.\n\nNOTE: An example of frameworks that require a very specific architecture: React JS, AngularJS.\n","_LINK":"SDOC-SRS-14"},"720":{"MID":"309e4108c1fa47e99d4331af642f3b81","UID":"SDOC-SRS-15","STATUS":"Active","TITLE":"No use of NPM","STATEMENT":"StrictDoc shall avoid extending its infrastructure with anything based on NPM-ecosystem.\n","RATIONALE":"StrictDoc already deals with the Python/Pip/Pypi ecosystem. The amount of necessary maintenance is already quite high. NPM is known for splitting its projects into very small parts, which increases the complexity of maintaining all dependencies.\n","_LINK":"SDOC-SRS-15"},"721":{"MID":"b9cacb97a045418385c7f870b23ac063","UID":"SDOC-SRS-16","STATUS":"Active","TITLE":"No use of JavaScript replacement languages (e.g., Typescript)","STATEMENT":"StrictDoc shall avoid using JavaScript-based programming languages.\n","RATIONALE":"The development team does not have specific experience with any of the JS alternatives. Staying with a general subset of JavaScript is a safer choice.\n","_LINK":"SDOC-SRS-16"},"722":{"MID":"70f05a744a0546909dc5b69de88ad41f","UID":"SDOC-SRS-87","STATUS":"Active","TITLE":"Monolithic application with no microservices","STATEMENT":"StrictDoc shall avoid using microservices and microservice-based architectures.\n","RATIONALE":"The project is too small to scale to a multi-service architecture.\n","COMMENT":"This requirement could be re-considered only if a significant technical pressure\nwould require the use of microservices.\n","_LINK":"SDOC-SRS-87"},"723":{"MID":"7d68821750a54cb5833b608cfc278f47","UID":"SDOC-SRS-88","STATUS":"Active","TITLE":"No reliance on containerization","STATEMENT":"StrictDoc shall avoid using containers and containerization technologies.\n","RATIONALE":"Containers are significant extra layer of complexity. They are hard to debug.\n","COMMENT":"This constraint does not block a StrictDoc user from wrapping StrictDoc into their containers.\n","_LINK":"SDOC-SRS-88"},"724":{"MID":"e4e5b9934e074cdb9567fa197db20a4a","UID":"SECTION-SRS-Coding-constraints","TITLE":"Coding constraints","_LINK":"SECTION-SRS-Coding-constraints"},"725":{"MID":"61d96cd1d03e40c48187ee67ac0b65f6","UID":"SDOC-SRS-40","STATUS":"Active","TITLE":"Use of asserts","STATEMENT":"StrictDoc's development shall ensure a use of assertions throughout the project codebase.\n\nNOTE: At a minimum, the function input parameters must be checked for validity.\n","_LINK":"SDOC-SRS-40"},"726":{"MID":"72b5b0c925cf4ef49749b7e466675df1","UID":"SDOC-SRS-41","STATUS":"Active","TITLE":"Use of type annotations in Python code","STATEMENT":"StrictDoc's development shall ensure a use of type annotations throughout the project's Python codebase.\n","_LINK":"SDOC-SRS-41"},"727":{"MID":"61e87567580045378d970b327d218cac","UID":"SECTION-SRS-Linting","TITLE":"Linting","_LINK":"SECTION-SRS-Linting"},"728":{"MID":"6c0163c56ade49faa353ec06cbd676cd","UID":"SDOC-SRS-42","STATUS":"Active","TITLE":"Compliance with Python community practices (PEP8 etc)","STATEMENT":"StrictDoc's development shall ensure that the project's codebase is compliant with the Python community's modern practices.\n","_LINK":"SDOC-SRS-42"},"729":{"MID":"3029f97a1276499dbbd5d7c71691908e","UID":"SECTION-SRS-Static-analysis","TITLE":"Static analysis","_LINK":"SECTION-SRS-Static-analysis"},"730":{"MID":"2cc9b494ca6248058b6bf63b6e2c1cfa","UID":"SDOC-SRS-43","STATUS":"Active","TITLE":"Static type checking","STATEMENT":"StrictDoc's development shall include a continuous type checking of StrictDoc's codebase.\n","_LINK":"SDOC-SRS-43"},"731":{"MID":"3aba8ca86d404ba9a063ce125489f35b","UID":"SECTION-SRS-Testing","TITLE":"Testing","_LINK":"SECTION-SRS-Testing"},"732":{"MID":"2731c64ab32146eeb4b8167df4a34540","UID":"SDOC-SRS-44","STATUS":"Active","TITLE":"Unit testing","STATEMENT":"StrictDoc's development shall provide unit testing of its codebase.\n","_LINK":"SDOC-SRS-44"},"733":{"MID":"70ef3986cfc4437bbb10288d3b55958c","UID":"SDOC-SRS-45","STATUS":"Active","TITLE":"CLI interface black-box integration testing","STATEMENT":"StrictDoc's development shall provide complete black-box integration testing of its command-line interface.\n","_LINK":"SDOC-SRS-45"},"734":{"MID":"a42c65f1a53b4c9bb50bc2a1ecb855cb","UID":"SDOC-SRS-46","STATUS":"Active","TITLE":"Web end-to-end testing","STATEMENT":"StrictDoc's development shall provide complete end-to-end testing of the web interface.\n","_LINK":"SDOC-SRS-46"},"735":{"MID":"c90f35ab9a7f4c29a418557151878b9f","UID":"SDOC-SRS-47","STATUS":"Active","TITLE":"At least one integration or end-to-end test","STATEMENT":"Every update to the StrictDoc codebase shall be complemented with a corresponding provision of at least one test as follows:\n\n- For web interface: at least one end-to-end test.\n- For command-line interface: at least one black-box integration test.\n- For internal Python functions: at least one unit test.\n\nNOTE: This requirement implies that no modifications to StrictDoc's functionality can be merged unless accompanied by at least one test.\n","RATIONALE":"This requirement ensures that every new feature or a chance in the codebase is covered/stressed by at least one test, according to the change type.\n","_LINK":"SDOC-SRS-47"},"736":{"MID":"83bdb9731e78431cb48d584d279443b4","TITLE":"Code hosting and distribution","_LINK":"15-Code-hosting-and-distribution"},"737":{"MID":"dbd186fae9624fd6af8aeb55edfaa43b","UID":"SECTION-SRS-Code-hosting","TITLE":"Code hosting","_LINK":"SECTION-SRS-Code-hosting"},"738":{"MID":"b112c60bc2f34114ab1f3361a1a10a00","UID":"SDOC-SRS-12","STATUS":"Active","TITLE":"GitHub","STATEMENT":"StrictDoc's source code shall be hosted on GitHub.\n","_LINK":"SDOC-SRS-12"},"739":{"MID":"bd949cbbe07c4cb29492ea0c8e5c1eec","UID":"SDOC-SRS-118","STATUS":"Active","TITLE":"StrictDoc license","STATEMENT":"All StrictDoc software shall be licensed under the Apache 2 license.\n","_LINK":"SDOC-SRS-118"},"740":{"MID":"2ba509874f1744cf899643b58a6a2095","STATEMENT":"This document presents the goals of the StrictDoc project and describes how the\nproject is developed.\n","_LINK":"2ba509874f1744cf899643b58a6a2095"},"741":{"MID":"24b0bc5efe074a419b441900d30b2876","TITLE":"Project goals","_LINK":"1-Project-goals"},"742":{"MID":"bdbd5aecefdc41bca1c88b9bce71d512","STATEMENT":"StrictDoc is an open-source tool for writing technical documentation and requirements management. The long-term goal of the project is to provide a capable, open-source platform for creating and managing technical documentation.\n\n**Requirements automation**\n\nThe tool aims to automate the requirements documentation process at various levels.\n\n**Target groups**\n\nThe project targets different user groups including those in software, hardware, systems (systems engineering, electrical, thermal), as well as quality assurance, safety, management, and non-technical areas.\n\n**Use on individual computers and cloud**\n\nThe project is already usable on individual personal computer, the long-term goal is to enable its use on cloud.\n\n**Open data**\n\nAn important feature of StrictDoc is its focus on open data, ensuring ease of data transfer both into and out of the system.\n\n**Synergies with other tools**\n\nStrictDoc shall be compatible with other software and engineering tools. This includes at least the compatibility with the Python ecosystem, the model-based systems engineering tools, such as Capella, and the formats providing Software Bill of Materials, such as SPDX.\n","_LINK":"bdbd5aecefdc41bca1c88b9bce71d512"},"743":{"MID":"f1e3c17829fd4eebbd390fceaeb95619","UID":"SECTION-DP-Project-milestones","TITLE":"Project milestones","_LINK":"SECTION-DP-Project-milestones"},"744":{"MID":"fd9294fdd2b546de993f649767371394","STATEMENT":"As an open-source project, StrictDoc is developed without strict deadlines, however there are certain high-level priorities that influence the development. The work is loosely organized in quarters.\n\n.. list-table::\n   :header-rows: 1\n   :widths: 15 85\n\n   * - **Quarter**\n     - **Planned / accomplished work**\n\n   * - 2019-Q2\n     - Pre-StrictDoc development in a fork of Doorstop.\n   * - 2019-Q3\n     - StrictDoc, first prototype. Markdown-based C++ program. Custom requirements metadata in YAML.\n   * - 2020-Q1\n     - The second prototype of StrictDoc based on RST/Sphinx. Using Sphinx extensions to manage meta information. First integration tests.\n   * - 2020-Q2\n     - StrictDoc created on GitHub. The code still uses RST for parsing requirements meta information and PySide for GUI.\n   * - 2020-Q3\n     - The RST parsing is replaced with a TextX-based DSL, new StrictDoc grammar is created. The PySide is replaced with a simple export to HTML using Jinja templates. Export to Sphinx HTML/PDF is introduced.\n   * - 2020-Q4\n     - Improvements in the styles of HTML/PDF exports. First Table, Traceability, and Deep Traceability screens.\n   * - 2021-Q1\n     - Excel export. The first implementation for forward and reverse traceability between SDoc and source files.\n   * - 2021-Q2\n     - Further work on the SDoc-source traceability.\n   * - 2021-Q3\n     - Further work on the SDoc-source traceability. Tree cycles detection, validations. MathJax support.\n   * - 2021-Q4\n     - Improvements of the traceability index generation and validation. Initial implementation of ReqIF. First support of custom grammars.\n   * - 2022-Q1\n     - Further work on ReqIF and custom grammars. Document fragments feature.\n   * - 2022-Q2\n     - Excel conversion improvements. Improvements of how meta information is displayed in HTML export.\n   * - 2022-Q3\n     - No work in this quarter.\n   * - 2022-Q4\n     - Installation using PyInstaller. The first prototype of a Web-based interface. First end-to-end Web tests using SeleniumBase. Improvements of the ReqIF support.\n   * - 2023-Q1\n     - Improvements of the Web-based interface towards first release. Improvements of the ReqIF support.\n   * - 2023-Q2\n     - Further stabilization of the Web interface. RST markup stability improvements. Work on StrictDoc's own requirements traceability.\n   * - 2023-Q3\n     - Anchors and incoming links. Improvements of the ReqIF interface. Work on StrictDoc's own requirements traceability. Mermaid diagramming tool. Reverse parent / child links. Project statistics screen. Performance improvements.\n   * - 2023-Q4\n     - Requirements relations and roles. UI improvements and stabilization. Further ReqIF work. Search engine and requirements filters. Project tree Diff/Changelog screens. Basic Git operations.\n   * - 2024-Q1\n     - Experimental SPDX support. JSON export. Custom views (static HTML). Basic traceability matrix screen.\n   * - 2024-Q2\n     - Includable/composable documents. FREETEXT-to-TEXT migration. ReqIF improvements.\n   * - 2024-Q3\n     - HTML2PDF improvements. ReqIF roundtrip for RELATION/ROLE. Consistent automatic escaping of Jinja templates. Passthrough->export command migration.\n   * - 2024-Q4\n     - Connecting requirements to functions (C, Python) and classes (Python) in source code. Support the linking in both directions independently: from requirements to source using RELATION/File and from source to requirements using @relation markers. LINK to documents.\n   * - 2025-Q1\n     - Connecting requirements to source code – further work. StrictDoc containerized in Docker. JUnit XML report generation.\n   * - 2025-Q2 (planned)\n     - Gcov coverage justification report. SDoc node VERSIONs. External links.\n","_LINK":"fd9294fdd2b546de993f649767371394"},"745":{"MID":"bf9f3f05501140da8d35cde39493c72f","TITLE":"The roadmap diagram","_LINK":"2.1-The-roadmap-diagram"},"746":{"MID":"53e101acb20e44e89de27f0f77c5f0cb","STATEMENT":"The following diagram contains the work items at the epic and single task levels. This PNG file is exported from a draw.io diagram, where the master version of the roadmap is maintained.\n\n.. image:: _assets/StrictDoc_Workspace-Roadmap.drawio.png\n   :alt: Development plan diagram\n   :class: image\n   :width: 100%\n\nThe roadmap and other artifacts are maintained at a publicly available draw.io diagram workspace `here <https://drive.google.com/file/d/1pkI0T1eAbcTSyCnqH4wCKKQSOfgWTaxi/view>`_.\n","_LINK":"53e101acb20e44e89de27f0f77c5f0cb"},"747":{"MID":"625560c790a3492eaf45466b787602d7","TITLE":"Versioning","_LINK":"3-Versioning"},"748":{"MID":"ae2a2af6e3f24f65845c6c37ea7da2e2","STATEMENT":"As of release 0.1.0 (2024-11-01), StrictDoc follows a `semantic versioning <https://semver.org>`_-oriented release scheme. The MAJOR.MINOR.PATCH components are managed according to the guidelines of the semantic versioning specification.\n","_LINK":"ae2a2af6e3f24f65845c6c37ea7da2e2"},"749":{"MID":"ef6bde37e1c54f49afdbd3c6785fd01c","TITLE":"Quality","_LINK":"4-Quality"},"750":{"MID":"14d0e79fcadc43f1a1cee2d66ae6b763","STATEMENT":"StrictDoc's development incorporates quality measures to ensure a high standard of code quality.\n","_LINK":"14d0e79fcadc43f1a1cee2d66ae6b763"},"751":{"MID":"bc49b1e28fff4386b3bf5788a6686a79","TITLE":"Linting of code","_LINK":"4.1-Linting-of-code"},"752":{"MID":"f6de78d4a95b4970ab55563e18472a92","STATEMENT":"StrictDoc uses `Ruff <https://docs.astral.sh/ruff/formatter/>`_ to ensure consistent code formatting and to check for common issues in Python code.\n","_LINK":"f6de78d4a95b4970ab55563e18472a92"},"753":{"MID":"38ce17138405490b80e06037b40dc49d","TITLE":"Static analysis","_LINK":"4.2-Static-analysis"},"754":{"MID":"ad63541e341d4648ab59b4a0817a7e3c","STATEMENT":"StrictDoc uses `mypy <https://github.com/python/mypy>`_ to statically check the robustness of its Python type system.\n","_LINK":"ad63541e341d4648ab59b4a0817a7e3c"},"755":{"MID":"2834756354a7420499d0deecfe0ee9c4","TITLE":"Testing","_LINK":"4.3-Testing"},"756":{"MID":"ee541e7062704b3f919bcaac2bce2723","STATEMENT":"StrictDoc has three groups of tests: unit, integration, end-to-end tests.\n\nThe unit tests are based on `pytest <https://docs.pytest.org/en/stable/>`_.\n\nThe integration tests are based on the `LLVM Integrated Tester <https://llvm.org/docs/CommandGuide/lit.html>`_ and `FileCheck.py <https://github.com/mull-project/FileCheck.py/blob/main/pyproject.toml>`_. These tools are not very common, refer to `How to test command-line programs with Python tools: LIT and FileCheck <https://stanislaw.github.io/2020-11-20-how-to-test-command-line-programs-with-python.html>`_ for a good description.\n\nThe end-to-end web interface tests are based on the `SeleniumBase <https://seleniumbase.io/>`_ test framework.\n","_LINK":"ee541e7062704b3f919bcaac2bce2723"},"757":{"MID":"2004550abd54486d9aa5f98282eef6e1","TITLE":"Traceability between StrictDoc requirements, code, and tests","_LINK":"4.4-Traceability-between-StrictDoc-requirements-code-and-tests"},"758":{"MID":"f829d28d2e3d4bcaa38f44ffb1ac0373","STATEMENT":"Most of StrictDoc's implemented features are tested through its own documentation artifacts. In terms of traceability, StrictDoc maintains a growing number of trace links between:\n\n- Documentation and source files\n- Source files and tests\n- Tests, test results, and code coverage data\n\nAs of Q2 2025, the goal is to achieve 100% traceability across all artifacts in the StrictDoc codebase.\n","_LINK":"f829d28d2e3d4bcaa38f44ffb1ac0373"},"759":{"MID":"30b874ab3eac4d429633537e1e89677f","TITLE":"Continuous integration (CI)","_LINK":"4.5-Continuous-integration-CI"},"760":{"MID":"85e3915270f144c7a76ccfa0e088d93d","STATEMENT":"Contributions to StrictDoc are made through GitHub pull requests. Each pull request is validated by a series of checks and test jobs run on GitHub Actions CI servers.\n","_LINK":"85e3915270f144c7a76ccfa0e088d93d"},"761":{"MID":"2ae3a8822a424a9e8ad6976c2476d109","TITLE":"Python baseline","_LINK":"5-Python-baseline"},"762":{"MID":"081ee6266bab4a3a80f290c95e055a25","STATEMENT":"The supported version of Python is kept to be as low as possible. As of 2024-Q4, the currently supported version is Python 3.8.\n\nIdeally, the lowest Python version should only be raised when it is consistently deprecated by the major software platforms like Ubuntu or GitHub Actions.\n\nAnother reason for upgrading the minimum Python version is due to the upstream dependencies. As these dependencies stop supporting the older versions of Python, StrictDoc must be upgraded to maintain compatibility. With the existing dependency graph, this happens rather infrequently as most dependencies also maintain the compatibility with the older Python versions.\n","_LINK":"081ee6266bab4a3a80f290c95e055a25"},"763":{"MID":"2c006e9044074d239db4a45328633657","STATEMENT":"This document describes the architecture and the implementation details of StrictDoc. Compared to the User Guide that describes how to use StrictDoc, this Design Document focuses on the \"how it works\" of StrictDoc.\n","_LINK":"2c006e9044074d239db4a45328633657"},"764":{"MID":"a74f4e7328714765b5e051768ca8383d","TITLE":"Overview","_LINK":"1-Overview"},"765":{"MID":"23937f96ac8e437d81686071cc42d6bf","STATEMENT":"StrictDoc consists of two applications:\n\n1. StrictDoc command-line application (CLI).\n2. StrictDoc web application.\n\nBoth applications share a significant subset of the backend and frontend logic. The backend logic is written in Python, the frontend logic is written using HTML/CSS, Jinja templates, and a combination of Turbo.js/Stimulus.js frontend libraries.\n","_LINK":"23937f96ac8e437d81686071cc42d6bf"},"766":{"MID":"f296843b2027457f851a159abafc97e3","TITLE":"Building blocks","_LINK":"2-Building-blocks"},"767":{"MID":"bae7db5591fe418a857af4fb02ad4fec","STATEMENT":"StrictDoc is based on the following open-source libraries and tools:\n\n.. list-table::\n   :header-rows: 1\n   :widths: 15 85\n\n   * - **Library/tool**\n     - **Description**\n\n   * - TextX\n     - Used for StrictDoc grammar definition and parsing of the sdoc files.\n\n   * - Jinja\n     - Rendering HTML templates.\n\n   * - Sphinx and Docutils\n     - - Support of Restructured Text (reST) format\n       - Generation of RST documents into HTML\n       - Generation of RST documents into PDF using LaTeX\n       - Generating documentation websites using Sphinx.\n\n   * - FastAPI\n     - Server used for StrictDoc's Web-based user interface.\n\n   * - Turbo and Stimulus\n     - Javascript frameworks used for StrictDoc's Web-based user interface.\n\n   * - Selenium and SeleniumBase\n     - Used for end-to-end testing of StrictDoc's Web-based user interface.\n","_LINK":"bae7db5591fe418a857af4fb02ad4fec"},"768":{"MID":"5328a6f4c8544f5e92a91279b5b2c0df","UID":"SECTION-DD-High-level-architecture","TITLE":"High-level architecture","_LINK":"SECTION-DD-High-level-architecture"},"769":{"MID":"dcb6369b8d0949f0b06c9ee5b2188b12","STATEMENT":"The following diagram captures the high-level architecture of StrictDoc.\n\n.. image:: _assets/StrictDoc_Workspace-Architecture.drawio.png\n   :alt: StrictDoc's architecture diagram\n   :class: image\n   :width: 100%\n","_LINK":"dcb6369b8d0949f0b06c9ee5b2188b12"},"770":{"MID":"9b81ed50014c412bb617e90552e58879","TITLE":"StrictDoc command-line application","_LINK":"4-StrictDoc-command-line-application"},"771":{"MID":"0e0fca629004496084dbe5e217874c36","STATEMENT":"StrictDoc command-line application is at the core of StrictDoc. The command-line interface contains commands for exporting/importing SDoc content from/to other formats and presenting documentation content to a user.\n\nThe command-line application can be seen as a Model-View-Controller application:\n\n- A command entered by a user gets recognized by the CLI arguments parser.\n- Depending on the type of command, a responsible Action (Controller layer) processes the command (export action, import action, etc.).\n- The input of the command is transformed by the action using the backend (Model layer) (SDoc, ReqIF, Excel, etc.).\n- The resulting output is written back to HTML or other formats (View layer).\n","_LINK":"0e0fca629004496084dbe5e217874c36"},"772":{"MID":"dbcfa8a98e4f4928b0b35938d57dd644","TITLE":"StrictDoc web application","_LINK":"5-StrictDoc-web-application"},"773":{"MID":"f84c0efa27954e44a8b5c1dd3517f90f","STATEMENT":"StrictDoc Web application is based on FastAPI / Uvicorn. The end-to-end usage cycle of the web application is as follows:\n\n- A browser requests documents from a FastAPI server.\n- The FastAPI web server parses the SDoc files into memory and converts them into HTML using Jinja templates. The resulting HTML output is given back to the user.\n- The Jinja templates are extended with JavaScript logic that allows a user to edit the documents and send the updated content back to the server.\n- The server writes the updated content back to the SDoc files stored on a user's file system.\n","_LINK":"f84c0efa27954e44a8b5c1dd3517f90f"},"774":{"MID":"dd2bd75fdffe49a1a0299b804538329c","TITLE":"The HTML Over the Wire (Hotwire) architecture","_LINK":"5.1-The-HTML-Over-the-Wire-Hotwire-architecture"},"775":{"MID":"5577da2187294eb986ec84d9fe26bbdf","STATEMENT":"StrictDoc uses the `Hotwire architecture <https://hotwired.dev>`_.\n\nThe JavaScript framework used by StrictDoc is minimized to Turbo.js/Stimulus.js which helps to avoid the complexity of the larger JS frameworks such as React, Vue, Angular, etc. In accordance with the Hotwire approach, most of the StrictDoc's business logic is done on a server, while Turbo and Stimulus provide a thin layer of JS and AJAX to connect the almost static HTML with the server.\n\nThe Hotwire approach helps to reduce the differences between the static HTML produced by the StrictDoc command-line application and the StrictDoc web application. In both cases, the core content of StrictDoc is a statically generated website with documents. The web application extends the static HTML content with Turbo/Stimulus to turn it into a dynamic website.\n\nCurrently, the web server renders the HTML documents using the same generators that are used by the static HTML export, so the static HTML documentation and the web application interface look identical. The web interface adds the action buttons and other additional UI elements for editing the content.\n\nTo ensure that certain Stimulus-based interactive features work not only in the web application but also in the static HTML output, StrictDoc uses the UMD build of Stimulus instead of the default ES module version. This allows the browser to execute Stimulus controllers in environments where module loading is not available, preserving interactivity in static documentation pages.\n","_LINK":"5577da2187294eb986ec84d9fe26bbdf"},"776":{"MID":"50f1db3236fa426ea5904974ee724939","TITLE":"Static HTML search","_LINK":"6-Static-HTML-search"},"777":{"MID":"5fedd9aac1684adc8fe1f3b87557345d","UID":"SDOC-SRS-156","TITLE":"Static HTML search","STATEMENT":"The static HTML search is implemented using a custom JavaScript solution that consumes a search index JS file generated by the same StrictDoc Python pipeline that produces all other artifacts.\n\nThe following requirements are relevant in the StrictDoc context:\n\n- The JS library must start up quickly, so search indexes need to be generated in advance. Since StrictDoc is based on Python, index generation must be done in Python rather than in JS/NPM.\n- The Python code must generate indexes incrementally and allow caching, e.g., one index per document.\n- The JS library must support matching search terms using OR by default and AND when the terms are enclosed in quotes, e.g., \"foo bar\".\n- The JS library must support incremental and decremental search terms.\n\nSeveral existing solutions, such as Lunr and FlexSearch, were considered, but none were found to support all of the above features.\n\n.. note::\n\n    **Incremental/decremental** search means that a search index maintains the following additional terms for a word \"foo\" found in a document node with MID \"abc\":\n\n    - \"foo\" => \"abc\"\n    - \"f\" => \"abc\"\n    - \"fo\" => \"abc\"\n    - \"o\" => \"abc\"\n    - \"oo\" => \"abc\"\n\nThe current implementation builds per-document indexes immediately after parsing the SDoc documents from .sdoc files. The generated index is cached along with the overall document content, significantly speeding up tree generation once the document caches are available. StrictDoc generates a JSON file containing a search index ``{ search term => node MID }`` as well as a map ``{ MID => SDoc node }``.\n\nThe corresponding JS file has access to the pre-built search indexes generated by Python. The JavaScript algorithms are simple but enable basic search functionality:\n\n- Incremental/decremental search for terms using OR when multiple terms are provided without quotes, and AND when the terms are quoted. Currently, only one quoted search term is supported.\n- The algorithm is reasonably fast and has been tested with documentation trees of up to 130+ documents with the largest documents reaching up to 1.5 megabytes.\n","_LINK":"SDOC-SRS-156"},"778":{"MID":"108af17c077c48bea04557c9d325e924","TITLE":"Parsing SDoc files","_LINK":"7-Parsing-SDoc-files"},"779":{"MID":"8a926f0a67424a1eb5db73bb5abca0cd","STATEMENT":"StrictDoc uses `textX <https://github.com/textX/textX>`_  which is a ``meta-language for building Domain-Specific Languages (DSLs) in Python``. The textX itself is based on `Arpeggio <https://github.com/textX/Arpeggio>`_ which is a ``Parser interpreter based on PEG grammars written in Python``.\n\nStrictDoc relies on both tools to get:\n\n- A declarative grammar description\n- Automatic conversion of the parsed blocks into Python objects\n- Fast parsing of SDoc files.\n\nOne important implementation detail of Arpeggio that influences StrictDoc user experience is that the parser stops immediately when it encounters an error. For a document that has several issues, the parser highlights only the first error without going any further. When the first error is resolved, the second error will be shown, etc.\n","_LINK":"8a926f0a67424a1eb5db73bb5abca0cd"},"780":{"MID":"4db723c7ae2c4350b2f184783cb638e7","UID":"SECTION-DD-Caching-artifacts","TITLE":"Caching artifacts","_LINK":"SECTION-DD-Caching-artifacts"},"781":{"MID":"d351d1bf6c2a48d88e9b9bdc50e029ff","STATEMENT":"StrictDoc caches artifacts to disk to speed up performance by avoiding repeated reading and computation of already-parsed objects.\n\nThe cached artifacts include:\n\n- Precompiled Jinja templates\n- RST fragments converted to HTML\n- Pickled Python objects from parsed SDoc files\n- Pickled Python objects from parsed source files\n- Git revisions used for the Diff/Changelog feature.\n\nA general algorithm is as follows:\n\nAn MD5 checksum is generated for a piece of content, and a file with this checksum in its name is written to disk. On subsequent reads, the checksum is recalculated, and the disk is checked for an existing file with the matching checksum. If a match is found, the file is read from disk, avoiding the need for extensive parsing or computation.\n","_LINK":"d351d1bf6c2a48d88e9b9bdc50e029ff"},"782":{"MID":"4b904b71438c47fcac8aba14df2dd7c0","TITLE":"HTML escaping","_LINK":"9-HTML-escaping"},"783":{"MID":"e8a03713c7f644698d9a72cc79b2a299","STATEMENT":"StrictDoc uses Jinja2 autoescaping_ for HTML output. `Template.render`_ calls\nwill escape any Python object unless it's explicitly marked as safe.\n\nGood to know for a start:\n\n- If a Python object intentionally contains HTML it must be marked as safe\n  to bypass autoescaping. Templates can do this by piping to safe_, or Python code\n  can do it by wrapping an object into `markupsafe.Markup`_.\n- Passing text to the `Markup() <markupsafe.Markup_>`_ constructor marks that text\n  as safe, but *does not escape* it.\n- Text can be explicitly escaped with `markupsafe.escape`_. It's similar to\n  `html.escape`_, but the result is immediately marked safe.\n- `markupsafe.Markup`_ is responsible for some \"magic\". It's a :code:`str` subclass\n  with the same methods, but escaping arguments. For example,\n  :code:`\"> \" + Markup(\"<div>safe</div>\")` will turn into :code:`\"&gt; <div>safe</div>\"`,\n  thanks to :code:`__radd__` in this specific case. To prevent escaping,\n  you would use :code:`Markup(\"> \") + Markup(\"<div>safe</div>\")`. Basically the\n  same magic happens in templates when using safe_.\n- See also `Working with Automatic Escaping`_.\n\n.. _autoescaping: https://jinja.palletsprojects.com/en/latest/api/#autoescaping\n.. _Working with Automatic Escaping: https://jinja.palletsprojects.com/en/latest/templates/#working-with-automatic-escaping\n.. _markupsafe.Markup: https://markupsafe.palletsprojects.com/en/latest/escaping/#markupsafe.Markup\n.. _markupsafe.escape: https://markupsafe.palletsprojects.com/en/latest/escaping/#markupsafe.escape\n.. _safe: https://jinja.palletsprojects.com/en/latest/templates/#jinja-filters.safe\n.. _Template.render: https://jinja.palletsprojects.com/en/latest/api/#jinja2.Template.render\n.. _html.escape: https://docs.python.org/3/library/html.html#html.escape\n","_LINK":"e8a03713c7f644698d9a72cc79b2a299"},"784":{"MID":"92e8709709614f0f9ccdf702799bf56c","TITLE":"ReqIF interface","_LINK":"10-ReqIF-interface"},"785":{"MID":"abe8709709614f0f9ccdf702799bf511","UID":"SDOC-SRS-153","TITLE":"ReqIF-to-SDoc import","STATEMENT":"The following details describe the implementation of the StrictDoc ReqIF-to-SDoc converter.\n\nThe table below shows how ReqIF elements are mapped to SDoc elements:\n\n.. list-table:: **Table: Mapping between ReqIF elements and SDoc elements**\n    :widths: 50 50\n    :header-rows: 1\n\n    * - ReqIF Element\n      - SDoc Element\n\n    * - Specification\n      - Document\n\n    * - Spec Object Type\n      - Grammar Element\n\n    * - Spec Object\n      - Node\n\nBefore converting ReqIF elements to SDoc elements, StrictDoc first traverses the entire XML file. This is necessary because a single ReqIF file may contain multiple specifications, and it is otherwise not possible to determine which Spec Object Types, Spec Relations, or Spec Relation Types are used by which specification or whether they are used at all.\n\nStrictDoc uses a **lazy** approach to generating SDoc documents from a ReqIF XML file. For each ReqIF Specification, only the elements that are actually used by that specification will be included in the corresponding SDoc document.\n\n**Example:**\n\nIf ReqIF Specification “A” uses Spec Object Type “X”, and Specification “B” uses Spec Relation Type “Y”, the resulting SDoc documents will be:\n\n* SDoc document “A” with a grammar element for type “X”\n* SDoc document “B” with a grammar element for type “Y”\n","_LINK":"SDOC-SRS-153"},"786":{"MID":"35bc1e28ec724aefbcff864c89399877","STATEMENT":"This document outlines the future work items for StrictDoc.\n\nThe following items are listed in descending order of priority, with the topmost items either currently in progress or scheduled to be implemented next.\n\nWhile this backlog overlaps with StrictDoc's `GitHub issues tracker <https://github.com/strictdoc-project/strictdoc/issues>`_ by more than 50%, it includes more strategic items compared to the GitHub issues, which are primarily focused on actual implementation work.\n","_LINK":"35bc1e28ec724aefbcff864c89399877"},"787":{"MID":"d1e697dea73144c48a4b88d0d784a517","UID":"SECTION-SB-Open-source-requirements-tool-challenges","TITLE":"StrictDoc challenges","_LINK":"SECTION-SB-Open-source-requirements-tool-challenges"},"788":{"MID":"d65fe32e8ea444ceb99c174bfc06df7d","STATEMENT":"- Limited development time.\n- Not easy to develop certain capabilities and scale to a multi-user environment quickly.\n","_LINK":"d65fe32e8ea444ceb99c174bfc06df7d"},"789":{"MID":"fc76b207c152433888a86a166f58a425","UID":"SDOC-SRS-13","STATUS":"Backlog","TITLE":"Real-time editing out of scope","STATEMENT":"StrictDoc shall not implement the real-time editing capability to its web interface.\n","RATIONALE":"The real-time editing feature is hard to achieve with a small part-time involvement from the development team. This requirement can only be reconsidered, if StrictDoc would experience a significant increase in the development power.\n","_LINK":"SDOC-SRS-13"},"790":{"MID":"7614a9f4f7bd4b1c9899995ac3d1e6ad","UID":"SECTION-SB-Backlog","TITLE":"Backlog","_LINK":"SECTION-SB-Backlog"},"791":{"MID":"e61e7224e27d41ceacad9bf6051bd6f0","UID":"SDOC-BACKLOG-6","STATUS":"Backlog","TITLE":"Auto-commit to Git repository","_LINK":"SDOC-BACKLOG-6"},"792":{"MID":"07a9636655314912a996ecf5692ae3d5","UID":"SDOC-SRS-86","STATUS":"Backlog","TITLE":"Auto-generate section UIDs","STATEMENT":"TBD\n","_LINK":"SDOC-SRS-86"},"793":{"MID":"0425151bf3944e0ebc1c5acabcb35905","UID":"SECTION-SRS-Screen-Project-home","TITLE":"Screen: Project home","_LINK":"SECTION-SRS-Screen-Project-home"},"794":{"MID":"0a158ddac310483489ef08f618ba8741","UID":"SDOC-SRS-52","STATUS":"Backlog","TITLE":"View project home page","_LINK":"SDOC-SRS-52"},"795":{"MID":"1d8a2c3cf8c24e1b92fe212ab7efacf2","TITLE":"Screen: Traceability navigator","_LINK":"2.4-Screen-Traceability-navigator"},"796":{"MID":"dbfe92e9ec3b44e9a3e1c9e89a0e9ef5","UID":"SDOC-SRS-113","STATUS":"Backlog","TITLE":"Traceability navigator","STATEMENT":"StrictDoc shall provide a traceability navigator screen.\n","RATIONALE":"Provide an interactive 1000-ft view of a requirements project.\n","_LINK":"SDOC-SRS-113"},"797":{"MID":"2654d541d5ce4cb6ad9fcfe2eaa9abb4","UID":"SECTION-SB-Formal-modeling","TITLE":"Formal modeling","_LINK":"SECTION-SB-Formal-modeling"},"798":{"MID":"5958a5c0aad8486b84ad31bc014d4ad3","UID":"SDOC-RMC-27","STATUS":"Backlog","TITLE":"Integration with other systems engineering processes","STATEMENT":"The Requirements Tool shall provide capabilities for integration with other systems engineering tools.\n","_LINK":"SDOC-RMC-27"},"799":{"MID":"99e84f704c074cf28de51ce6fb183a66","UID":"SDOC-RMC-29","STATUS":"Backlog","TITLE":"Integration with Capella","STATEMENT":"The Requirements Tool shall provide integration with Capella MBSE tool.\n","RATIONALE":"Eclipse Capella is a capable open-source tool for Model-Based Systems Engineering, https://www.eclipse.org/capella/. It should be beneficial for the requirements tool to interface with the Capella engineering community.\n","COMMENT":"At the very least, the integration can happen through the ReqIF interface that Capella is known to support.\n","_LINK":"SDOC-RMC-29"},"800":{"MID":"44b30591f6674ede821324fe527babd9","UID":"SDOC-RMC-55","STATUS":"Backlog","TITLE":"Support STPA method","STATEMENT":"The Requirements Tool shall provide support for the STPA method.\n","_LINK":"SDOC-RMC-55"},"801":{"MID":"045aee37b0a24b3cb62cabd8b614aaf7","UID":"SDOC-RMC-28","STATUS":"Backlog","TITLE":"Formalized statements","STATEMENT":"The Requirements Tool shall provide capabilities for hardening requirements content with formal semantics.\n","COMMENT":"The directions to explore:\n\n- NASA FRET\n- bmw-software-engineering/trlc\n","_LINK":"SDOC-RMC-28"},"802":{"MID":"7e0fd5af118b4f5d8ecbf0d8ef3841e6","UID":"SDOC-RMC-30","STATUS":"Backlog","TITLE":"AI Assistant","STATEMENT":"The Requirements Tool shall provide integration with AI tools (e.g., ChatGPT).\n","_LINK":"SDOC-RMC-30"},"803":{"MID":"061392f275b04c93b664faad9ed4f483","UID":"SECTION-SRS-LaTeX-export","TITLE":"LaTeX export","_LINK":"SECTION-SRS-LaTeX-export"},"804":{"MID":"9ec7f471ccb243ea9d86cf2756403b8f","UID":"SDOC-SRS-76","STATUS":"Backlog","TITLE":"Export to Tex","_LINK":"SDOC-SRS-76"},"805":{"MID":"5a0304abcd8a44dab5d032dce6625a5d","UID":"SDOC-BACKLOG-1","STATUS":"Backlog","TITLE":"Focused mode: Edit a single section / requirement","STATEMENT":"StrictDoc shall allow focused editing of single sections and requirements on a dedicated screen.\n","COMMENT":"This is partially implemented with the composable documents feature. An included document can be edited as a standalone document.\n","_LINK":"SDOC-BACKLOG-1"},"806":{"MID":"162a3da4d9d74c15b5078c9859657ce3","UID":"SDOC-BACKLOG-2","STATUS":"Backlog","TITLE":"Interoperability with Doxygen","_LINK":"SDOC-BACKLOG-2"},"807":{"MID":"06f16ede826749a389c8d7de9828e0eb","UID":"SDOC-BACKLOG-3","STATUS":"Backlog","TITLE":"Fuzzy search (the whole documentation)","_LINK":"SDOC-BACKLOG-3"},"808":{"MID":"0e69828e1d914e20852aef7cfc4e87c4","UID":"SDOC-BACKLOG-9","STATUS":"Backlog","TITLE":"Derived requirements","STATEMENT":"StrictDoc shall provide first-class support for Derived requirements.\n","_LINK":"SDOC-BACKLOG-9"},"809":{"MID":"34246811634c493dbc771ae4c8bc3b14","UID":"SDOC-BACKLOG-4","STATUS":"Backlog","TITLE":"Support Markdown markup","_LINK":"SDOC-BACKLOG-4"},"810":{"MID":"3f50a97bc70842dbabeea911f653ef90","UID":"SDOC-BACKLOG-7","STATUS":"Backlog","TITLE":"Language Server Protocol (LSP)","_LINK":"SDOC-BACKLOG-7"},"811":{"MID":"72285f9b09de48a29fef8f85431e4a94","UID":"SDOC-BACKLOG-8","STATUS":"Backlog","TITLE":"UML","_LINK":"SDOC-BACKLOG-8"},"812":{"MID":"bdedcdd91c7f4efb8787b5a82cfec49b","UID":"SDOC-SRS-114","STATUS":"Backlog","TITLE":"Web API","STATEMENT":"StrictDoc shall provide a web API.\n","RATIONALE":"A web API allows integration with tools and workflows external to StrictDoc itself.\n","_LINK":"SDOC-SRS-114"},"813":{"MID":"478c38d2cca94107b18fe3dc5b8bfefd","TITLE":"Multi-user workflow","_LINK":"2.15-Multi-user-workflow"},"814":{"MID":"f97dc050ddab4a08bf1689200118faaa","UID":"SDOC-SRS-123","STATUS":"Backlog","TITLE":"Multi-user editing of documents","STATEMENT":"StrictDoc shall support concurrent use and editing of a single StrictDoc web server instance by multiple users.\n","_LINK":"SDOC-SRS-123"},"815":{"MID":"e5b2aff0c1db4b11a8c75c278813300b","UID":"SDOC-SRS-130","STATUS":"Backlog","TITLE":"User accounts","STATEMENT":"StrictDoc shall support user accounts.\n","_LINK":"SDOC-SRS-130"},"816":{"MID":"440f0bc311b84421a7e8bea9dfd2448b","UID":"SDOC-SRS-131","STATUS":"Backlog","TITLE":"Update notifications","STATEMENT":"StrictDoc shall support notifying a user (users) about updated requirements.\n","_LINK":"SDOC-SRS-131"},"817":{"MID":"caecd704ed634d718deff07ba0db7fa6","UID":"SDOC-SRS-116","STATUS":"Backlog","TITLE":"Requirement validation according to EARS syntax","STATEMENT":"The SDoc model shall provide validation of requirements according to the EARS syntax.\n","_LINK":"SDOC-SRS-116"},"818":{"MID":"b74a7a3209d247f6b357513b0cce5000","UID":"SDOC-SRS-121","STATUS":"Backlog","TITLE":"WYSIWYG editing","STATEMENT":"StrictDoc shall provide WYSIWYG kind of editing for all multiline text input fields.\n","RATIONALE":"WYSIWYG improves the user experience, especially for non-programmer users.\n","_LINK":"SDOC-SRS-121"},"819":{"MID":"fa7fd8fd3a694d8e93953fd60e19fdde","UID":"SDOC-SRS-61","STATUS":"Backlog","TITLE":"Tables HTML editor","STATEMENT":"StrictDoc shall provide a solution for editing tables in its web interface.\n","_LINK":"SDOC-SRS-61"},"820":{"MID":"7a06d1433e4c4b0eaf55ede14507eac9","UID":"SDOC-SRS-94","STATUS":"Backlog","TITLE":"Move requirement / section nodes between documents","STATEMENT":"StrictDoc's Document screen shall provide a capability to move the nodes between documents.\n","RATIONALE":"Moving the nodes within a document is a convenience feature that speeds up the requirements editing process significantly.\n","_LINK":"SDOC-SRS-94"},"821":{"MID":"45b8513623744776899abfbf99c95286","UID":"SDOC-SRS-58","STATUS":"Backlog","TITLE":"Attach image to requirement","_LINK":"SDOC-SRS-58"},"822":{"MID":"c02a65f2716f4a86b8f83e3a7b4cd31c","UID":"SDOC-SRS-60","STATUS":"Backlog","TITLE":"Provide contextual help about RST markup","_LINK":"SDOC-SRS-60"},"823":{"MID":"7aa5316dd056465e97044e221412290b","UID":"SDOC-SRS-63","STATUS":"Backlog","TITLE":"TBL: Hide/show columns","STATEMENT":"StrictDoc's Table screen shall allow hiding/showing columns.\n","_LINK":"SDOC-SRS-63"},"824":{"MID":"229378602d1847cb83c61ab3e97bb22b","UID":"SDOC-SRS-64","STATUS":"Backlog","TITLE":"TBL: Select/deselect tags","STATEMENT":"StrictDoc's Table screen shall allow filtering content based on the selection/deselection of available tags.\n","_LINK":"SDOC-SRS-64"},"825":{"MID":"b3472533d57145bc9790724efe56075c","TITLE":"Screen: Impact analysis","_LINK":"2.24-Screen-Impact-analysis"},"826":{"MID":"f5feb38777064d9db939279d32f79130","UID":"SDOC-SRS-117","STATUS":"Backlog","TITLE":"Impact analysis","STATEMENT":"StrictDoc shall provide the Impact Analysis screen.\n\nNOTE: The Impact Analysis screen helps to get information about the impact that a given change to a requirement has on the other requirements in the project tree.\n","RATIONALE":"The impact analysis is one of the core functions of a requirements management tool. Analyzing the impact that a requirement has on other requirements and an overall project's technical definition helps to perform effective change management.\n","_LINK":"SDOC-SRS-117"},"827":{"MID":"a7c504087df04cedb5541d83ed988e9b","UID":"SDOC-SRS-75","STATUS":"Backlog","TITLE":"ReqXLS","_LINK":"SDOC-SRS-75"},"828":{"MID":"4a49c79a1bdd4d4aae5f62bc1d2a56d0","UID":"SECTION-SB-Backlog-Web-based-user-interface","TITLE":"Backlog: Web-based user interface","_LINK":"SECTION-SB-Backlog-Web-based-user-interface"},"829":{"MID":"d10cddd846de4961bbb0bc8b8c6550d3","STATEMENT":"- Uploading images via Web interface.\n\n- Deleting sections recursively. Correct clean-up of all traceability information.\n\n- Editing remaining document options: Inline/Table, Requirements in TOC, etc.\n\n- **Integration with Git repository.** Make the server commit changes to .sdoc files automatically. To a user, provide visibility to what happens under the hood.\n\n- Option to keep all multi-line text fields to 80 symbols width.\n\n- Moving nodes between documents.\n\n- TBL view: Column filters to show/hide columns.\n\n- TBL view: Completely empty columns are hidden by default.\n\n- Contextual help about the RST markup.\n- How to edit tables conveniently?\n\n- What to do with web content going out of sync with the server/file system state?\n\n- Issue when adding a child section from a nested section. The child section appears right after the nested section, not after its farthest descendant child.\n\n- ReqIF: Export complete documentation tree or a single document.\n- ReqIF: Import complete documentation tree or a single document.\n","_LINK":"d10cddd846de4961bbb0bc8b8c6550d3"},"830":{"MID":"866a55f2e47b477ebcd52ea57da4f037","UID":"SECTION-SB-Backlog-Nice-to-have","TITLE":"Backlog: Nice to have","_LINK":"SECTION-SB-Backlog-Nice-to-have"},"831":{"MID":"d02e104a518c4627ac918a33ad165c96","STATEMENT":"- Configuration file options:\n\n  - CLI command to dump default config file\n  - Project prefix?\n  - Config options for presenting requirements.\n    - Include/exclude requirements in TOC\n\n- **StrictDoc as a Python library**. Such a use allows a more fine-grained access to the StrictDoc's modules, such as Grammar, Import, Export classes, etc.\n\n- **Data exchange with Capella tool.** The current idea would be to implement this using ReqIF export/import features.\n\n- **Language Server Protocol.** The LSP can enable editing of SDoc files in IDEs like Eclipse, Visual Studio, PyCharm. A smart LSP can enable features like syntax highlighting, autocompletion and easy navigation through requirements. The promising base for the implementation: https://github.com/openlawlibrary/pygls.\n\n- StrictDoc shall support rendering text/code blocks into Markdown syntax.\n\n- **Fuzzy requirements search.** This feature can be implemented in the CLI as well as in the future GUI. A fuzzy requirements search can help to find existing requirements and also identify relevant requirements when creating new requirements.\n\n- Support creation of FMEA/FMECA safety analysis documents.\n\n- Calculation of checksums for requirements. This feature is relatively easy to implement, but the implementation is postponed until the linking between requirements and files is implemented.\n\n- Filtering of requirements by tags.\n\n- Import/export: PlantUML, Confluence, Tex, Doorstop.\n\n- **Partial evaluation of Jinja templates.** Many of the template variables could be made to be evaluated once, for example, config object's variables.\n\n- UI version for mobile devices (at least some basic tweaks).\n\n- Similar to the possibility of creating a child requirement to a section, one could provide a button for each of the relations defined in the grammar which would allow to quickly build a tree structure.\n","_LINK":"d02e104a518c4627ac918a33ad165c96"},"832":{"MID":"eb1fab2bbea541c8b00f70780326c9fc","UID":"SECTION-SB-Backlog-Technical-debt","TITLE":"Backlog: Technical debt","_LINK":"SECTION-SB-Backlog-Technical-debt"},"833":{"MID":"85e94802132048d29ca73cf2096c6758","STATEMENT":"- When a document is added, the whole documentation is rebuilt from the file system from scratch. A more fine-grained re-indexing of documentation tree can be implemented. The current idea is to introduce a layer of pickled cached data: preserve the whole in-memory traceability graph in a cache, and then use the cached data for making decisions about what should be regenerated.\n- The \"no framework\" approach with FastAPI and Turbo/Stimulus allows writing almost zero Javascript, however some proto-framework conventions are still needed. Currently, all code is written in the ``main_controller`` which combines all responsibilities, such as parsing HTTP request fields, accessing traceability graph, validations, rendering back the updated AJAX templates. A lack of abstraction is better than a poor abstraction, but some solution has to be found.\n- Request form object vs Response form object. The workflow of form validations is not optimal.\n- For Web development, the responsibilities of the ``TraceabilityIndex`` class compared to the ``ExportAction``, ``MarkupRenderer``, ``LinkRenderer`` classes are unstable. A more ecological composition of classes has to be found. ``Traceability`` index is rightfully a \"god object\" because it contains all information about the in-memory documentation graph.\n","_LINK":"85e94802132048d29ca73cf2096c6758"},"834":{"MID":"6ef8c2ad683d46af948674727c7a52b4","UID":"SECTION-SB-Open-questions","TITLE":"Open questions","_LINK":"SECTION-SB-Open-questions"},"835":{"MID":"717df91623014fb98ba34ab8173b94ab","UID":"SECTION-SB-One-or-many-input-sdoc-trees","TITLE":"One or many input sdoc trees","_LINK":"SECTION-SB-One-or-many-input-sdoc-trees"},"836":{"MID":"b778a18ede89464c936be2b2af492e24","STATEMENT":"StrictDoc supports this for HTML already but not for RST.\n\nWhen passed\n``strictdoc export ... /path/to/doctree1, /path/to/doctree2, /path/to/doctree3``,\nthe following is generated:\n\n.. code-block:: text\n\n    output folder:\n    - doctree1/\n      - contents\n    - doctree2/\n      - contents\n    - doctree3/\n      - contents\n\nand all three doctrees' requirements are merged into a single documentation\nspace with cross-linking possible.\n\nThe question is if it is worth supporting this case further or StrictDoc should\nonly work with one input folder with a single doc tree.\n","_LINK":"b778a18ede89464c936be2b2af492e24"},"837":{"MID":"18cf0af34c194590b3eb391c2ef94074","STATEMENT":"As an open-source project, StrictDoc is based on the work of many people and organizations:\n\n- StrictDoc receives contributions from other developers.\n- StrictDoc is built using other open-source software.\n- StrictDoc uses free hosting and Continuous Integration services provided for open-source software.\n- StrictDoc uses the commercial versions of JetBrains IDEs for free.\n\nThis page gives due credit to everyone who made StrictDoc possible.\n","_LINK":"18cf0af34c194590b3eb391c2ef94074"},"838":{"MID":"c89b5ba9c6dc427497647b64048a2c98","TITLE":"Contributions to StrictDoc","_LINK":"1-Contributions-to-StrictDoc"},"839":{"MID":"e6de83e242bc4aea96622a2e7585f135","STATEMENT":"The core team: @stanislaw and @mettta.\n\nThe following people and organizations have contributed to StrictDoc. The contributions are listed in the alphabetic order.\n\n- @BenGardiner – Import Excel feature, improvements of HTML and RST export, Document Fragments feature.\n- @GGBeer – Generating bibliography with BibTeX (ongoing), improvements of Excel export.\n- @haxtibal – Significant improvements and bug fixes to several StrictDoc features.\n- @lochsh – MathJax support.\n- @Relasym – Important fixes of how the documents are re-generated (or not).\n- @stumpyfr – Improvements of Excel export.\n\nCompanies:\n\n- `BUGSENG <https://www.bugseng.com>`_ and @RobertoBagnara have contributed bug reports and feature suggestions.\n- `Kontrol <https://www.kontrol.tech>`_ have sponsored the work related to the early implementation of the ReqIF import/export feature (@alex.d, @cbernt, @Relasym).\n\nSingle/smaller contributions can be also seen on the `StrictDoc's Insights/Contributors <https://github.com/strictdoc-project/strictdoc/graphs/contributors>`_ page.\n","_LINK":"e6de83e242bc4aea96622a2e7585f135"},"840":{"MID":"4d59a5df65d547e685cb491937793f69","TITLE":"Open source software","_LINK":"2-Open-source-software"},"841":{"MID":"4428ac9ec3504dda9f1e1e845ffb3c75","STATEMENT":"StrictDoc is based on other open source components. Without this support, we would have never reached where we are today.\n\nStrictDoc was heavily inspired by the `Doorstop <https://github.com/doorstop-dev/doorstop>`_ project. Without the strong example of Doorstop, StrictDoc would probably never exist.\n\nStrictDoc uses `textX <https://github.com/textX/textX>`_ as an underlying parser for the SDoc text markup language.\n\nStrictDoc uses `Sphinx <https://www.sphinx-doc.org/en/master/>`_ and `Docutils <https://docutils.sourceforge.io>`_ for generating SDoc documents to RST, HTML and PDF formats.\n\nStrictDoc has a satellite project `reqif <https://github.com/strictdoc-project/reqif>`_ which is built on top of the `lxml <https://lxml.de>`_ parser. The ``reqif`` library allows StrictDoc to import and export documents from/to ReqIF format.\n\nStrictDoc uses `FastAPI <https://github.com/tiangolo/fastapi>`_ and a combination of `Turbo.js <https://turbo.hotwired.dev>`_  and `Stimulus.js <https://stimulus.hotwired.dev>`_ for its Web-based graphical interface. This combination helps StrictDoc to stick with the `HTML over the wire approach <https://hotwired.dev>`_.\n\nStrictDoc uses `Jinja <https://jinja.palletsprojects.com>`_ as a templating engine. Jinja is used for both static HTML and RST exports as well as in the Web-based GUI.\n\nStrictDoc uses `Pygments <https://pygments.org>`_ to color-code the source files for the requirements-to-source-files traceability feature.\n\nStrictDoc uses `Tree-sitter <https://tree-sitter.github.io/tree-sitter/>`_ to enable language-aware parsing of source files for the requirements-to-source-files traceability feature.\n\nStrictDoc uses `XlsxWriter <https://xlsxwriter.readthedocs.io>`_, `xlrd <https://xlrd.readthedocs.io/en/latest/>`_ and `openpyxl <https://openpyxl.readthedocs.io/en/stable/>`_ for its Excel export/import features.\n\nThe credits also recursively go to the building blocks of each of the above projects because most of them have their own dependencies.\n\nRefer to the `configuration file <https://github.com/strictdoc-project/strictdoc/blob/main/pyproject.toml>`_ for an up-to-date summary of StrictDoc's dependencies.\n","_LINK":"4428ac9ec3504dda9f1e1e845ffb3c75"},"842":{"MID":"2da7450f8b804a7a8494921486bd4d8e","TITLE":"Hosting and Continuous Integration","_LINK":"3-Hosting-and-Continuous-Integration"},"843":{"MID":"5b702e6f9b714e458b059912ca8e196a","STATEMENT":"StrictDoc is hosted on `GitHub <https://github.com>`_ and uses `GitHub Actions <https://docs.github.com/en/actions>`_ to run all of its build, test and release tasks. As an open-source project, StrictDoc gets these services from GitHub for free.\n\nStrictDoc's documentation is hosted on `Read the Docs <https://readthedocs.org>`_.\n","_LINK":"5b702e6f9b714e458b059912ca8e196a"},"844":{"MID":"43ccb6448b9d4b65a2c40df54d1707aa","TITLE":"Free and commercial IDEs by JetBrains","_LINK":"4-Free-and-commercial-IDEs-by-JetBrains"},"845":{"MID":"b4729e592d104fe3818c8949615ffef9","STATEMENT":"For Python development, the StrictDoc core team uses the community version of\n`PyCharm <https://www.jetbrains.com/pycharm/>`_\nfrom `JetBrains <https://www.jetbrains.com/>`_.\n\nIn 2022-2023, the `Licenses for Open Source Development - Community Support <https://www.jetbrains.com/community/opensource/#support>`_ from JetBrains were provided to the core team for free, based on the precondition that StrictDoc is developed as completely free software, without any monetization mechanisms.\n","_LINK":"b4729e592d104fe3818c8949615ffef9"},"846":{"MID":"fc77215d50134f17aa242b4df7310099","STATEMENT":"This document outlines a set of high-level requirements for StrictDoc, a text-based requirements management system. While StrictDoc already meets many of these requirements, a further discussion is needed to clarify any remaining questions. For the outstanding requirements, we can establish a practical implementation plan within the upcoming 2023-2024 StrictDoc roadmap.\n\nThese requirements are recommended by engineers who adhere to the DO-178B and DO-178C standards of the aviation industry. For a visual summary of the DO-178 standard, please refer to this link: https://upload.wikimedia.org/wikipedia/commons/4/4f/DO-178B_Process_Visual_Summary_Rev_A.pdf.\n","_LINK":"fc77215d50134f17aa242b4df7310099"},"847":{"MID":"6be4dbe02b4346df9849eaa6fe077e0e","UID":"SECTION-DR-Already-implemented-features","TITLE":"Already implemented features","_LINK":"SECTION-DR-Already-implemented-features"},"848":{"MID":"af14393406e64ab6b2911eefa4358f33","UID":"DO178-1","COMPLIANCE":"C","STATUS":"Active","TITLE":"Document concept","STATEMENT":"StrictDoc shall store requirements in document files.\n","RATIONALE":"A concept of a \"document file with requirements\" helps to structure requirements like they are normally structured in the documents.\n\nAn alternative implementation of \"1 file per 1 requirement\" can be very restrictive in some use cases. For example, one needs to open lots of files to edit, if one file can only have one requirement.\n","_LINK":"DO178-1"},"849":{"MID":"0a19cae3756a4d2f9f0be9e57c44a8fa","UID":"DO178-2","COMPLIANCE":"C","STATUS":"Active","TITLE":"Strict specified grammar","STATEMENT":"StrictDoc shall feature a specified document grammar.\n","RATIONALE":"The grammar helps to standardize a document structure.\n","COMMENT":"N: StrictDoc is nice.\n","_LINK":"DO178-2"},"850":{"MID":"dd075d6cd4fb4ad2b731a9b8068efade","UID":"DO178-14","STATUS":"Active","TITLE":"Requirement UID autocompletion","STATEMENT":"StrictDoc shall provide autocompletion feature for requirement UID identifiers.\n\nNote: Most immediate use case: adding/editing parent requirements.\n","COMMENT":"N: When adding parent links, StrictDoc GUI shall present a selection list of UID, with a completion filter, then compute the sha1 of the selected parent req.\n","_LINK":"DO178-14"},"851":{"MID":"03346e43cd0b43529cc3b958a00d8d35","UID":"DO178-3","COMPLIANCE":"C","STATUS":"Active","TITLE":"Multiple git repositories document assembly","STATEMENT":"StrictDoc shall support generating requirement trees from multiple Git repositories.\n","COMMENT":"N: StrictDoc is compliant.\n","_LINK":"DO178-3"},"852":{"MID":"4f0809d49292413eb621a47a8b405bc7","UID":"DO178-4","COMPLIANCE":"C","STATUS":"Active","TITLE":"Document fragments in separate files","STATEMENT":"StrictDoc shall support assembly of documents from multiple files.\n","COMMENT":"S: StrictDoc supports document fragments. A document fragment corresponds to a section that can be kept in a separate file. A document stored in another file can import the fragment and have it included in the main document.\n","_LINK":"DO178-4"},"853":{"MID":"c74bba92cec34bf7b1046689c2dfc54c","UID":"DO178-5","COMPLIANCE":"C","STATUS":"Active","TITLE":"PDF and HTML publishing","STATEMENT":"StrictDoc shall support publication of documents to HTML and PDF formats.\n","COMMENT":"N: Sphinx is nice for release.\n","_LINK":"DO178-5"},"854":{"MID":"8b73ce9efcc840b2be272d5aaef08e70","UID":"DO178-6","COMPLIANCE":"C","STATUS":"Active","TITLE":"Graphical user interface (GUI)","STATEMENT":"StrictDoc shall support a graphical user interface.\n","COMMENT":"N: A Web GUI in StrictDoc is nice in daily work, especially for non developer people.\n","_LINK":"DO178-6"},"855":{"MID":"8c654ff659a94cceb0c7a52bc8ae4073","UID":"DO178-8","STATUS":"Active","TITLE":"Configuration: 'Host' parameter","STATEMENT":"StrictDoc shall provide an option to configure a host where a server is deployed.\n","COMMENT":"N: Binding to any local address (localhost) with an option would enable to edit from a smartphone bound to a Raspberry server, for instance.\n","_LINK":"DO178-8"},"856":{"MID":"cfdb3867a4a64b3eb9405e998c11ae72","UID":"DO178-7","COMPLIANCE":"C","STATUS":"Active","TITLE":"No use of proprietary technology","STATEMENT":"StrictDoc shall not use any proprietary tools.\n","RATIONALE":"Use of proprietary tools complicates the workflows and the interoperability between companies and teams.\n","COMMENT":"S: StrictDoc is written using Python and supports the ReqIF format out of the box. All StrictDoc's dependencies are open-source software components.\n","_LINK":"DO178-7"},"857":{"MID":"40d4a56263d0420691dbde5d7889895a","UID":"DO178-13","STATUS":"Active","TITLE":"Source file coverage","STATEMENT":"StrictDoc shall support generation of source code coverage information.\n","COMMENT":"S: Source file coverage is StrictDoc's experimental feature. With a more detailed specification, we can turn it to a more advanced and clear presentation of the needed aspects.\n","_LINK":"DO178-13"},"858":{"MID":"8bd26640450f448c8228464223c21373","UID":"DO178-9","COMPLIANCE":"C","STATUS":"Active","TITLE":"Project-level grammar","STATEMENT":"StrictDoc shall support creation of a project-level grammar.\n","RATIONALE":"A single grammar defined for a project (same grammar for several documents) helps to standardize the structure of all documents in a documentation tree and reduces the effort needed to create identical grammars all the time.\n","COMMENT":"S: This feature is easy to implement. The easiest implementation path is to include a config parameter, such as ``project_grammar`` in the already-existing ``strictdoc.toml`` file. At startup, StrictDoc recognizes the parameter and reads the grammar from a separate file. The project grammar becomes a single source of truth for all documents in the project tree but the option to override a grammar for a given document is still preserved.\n","_LINK":"DO178-9"},"859":{"MID":"09f3e3faa1b84aafb19f26e22ab06c95","UID":"SECTION-DR-Needs-discussion","TITLE":"Needs discussion","_LINK":"SECTION-DR-Needs-discussion"},"860":{"MID":"db4336a8f119443cae6a70d74a0601da","UID":"DO178-19","STATUS":"Active","TITLE":"WYSIWYG editing","STATEMENT":"StrictDoc's GUI shall support a WYSIWYG text editing.\n","COMMENT":"Simplifies editing of formatted text.\n","_LINK":"DO178-19"},"861":{"MID":"7d18b7674050495c935dc4669dfb260e","UID":"DO178-15","STATUS":"Active","TITLE":"Diff between document trees","STATEMENT":"StrictDoc shall allow calculating Diff between two document trees.\n\nNote: The primary use case is calculating a diff between two Git revisions.\n","COMMENT":"N: Highlight a req diff with its previous version (Git).\n","_LINK":"DO178-15"},"862":{"MID":"b0c13e71074242ab91d6344514b82657","UID":"DO178-10","COMPLIANCE":"C","STATUS":"Active","TITLE":"Traceability matrices","STATEMENT":"StrictDoc shall support generation of forward and backward traceability matrices.\n","COMMENT":"N: Trace matrix publishing (both ways : is covered by ... and covers ...) published in HTML/PDF.\n","_LINK":"DO178-10"},"863":{"MID":"7e8a475859084e9d95eda3f2c1381ae7","UID":"DO178-11","COMPLIANCE":"C","STATUS":"Active","TITLE":"Impact analysis","STATEMENT":"StrictDoc shall support generation of Impact Analysis information.\n","COMMENT":"N: Impact analysis – upon modification of a requirement: report the recursive list of impacted items.\n","_LINK":"DO178-11"},"864":{"MID":"23c11790799c4457804bcb9d6288931e","UID":"DO178-12","COMPLIANCE":"C","STATUS":"Active","TITLE":"Uncovered requirement report","STATEMENT":"StrictDoc shall support generation of uncovered requirement report.\n\nNote: An uncovered requirement is one that has no children.\n","COMMENT":"S: This is easy to implement but would be nice to have it specified in terms of how exactly it should look like. The requirements coverage screen was one experimental attempt to visualize and highlight the uncovered requirements but we didn't stabilize the feature in terms of the visual clarity.\n","_LINK":"DO178-12"},"865":{"MID":"a1fb2f7cd7cd4c8eb33c3407a791fd88","UID":"DO178-16","COMPLIANCE":"PC","STATUS":"Backlog","TITLE":"Interoperability with Sphinx","STATEMENT":"StrictDoc shall support interoperability with Sphinx:\n\n1) StrictDoc shall read RST fragments with Sphinx directives without errors.\n2) StrictDoc shall render Sphinx plugins natively.\n","COMMENT":"N: Support various fragments (images, csv, doxygen, uml, math expr...) => Sphinx extensions nice.\n","_LINK":"DO178-16"},"866":{"MID":"756503f4934a4aed81dfe090b2538e2a","UID":"DO178-17","COMPLIANCE":"NC","STATUS":"Backlog","TITLE":"Multi-user editing of documents","STATEMENT":"StrictDoc shall allow multi-user editing of documents.\n","COMMENT":"N: .sdoc file lock?\n","_LINK":"DO178-17"},"867":{"MID":"8120b4f6be4e4ecd83c0b69a3424e0be","UID":"DO178-18","STATUS":"Backlog","TITLE":"Support for Derived requirements","STATEMENT":"StrictDoc shall provide first-class support for Derived requirements.\n","COMMENT":"N: I would mention another important feature related to DO178. The requirement which have not parent are \"derived\" and shall be assessed by safety.\n\nTwo issues when a parent ref is set to ``REQUIRED: True`` in grammar:\n\n1. I cannot specify derived requirements.\n2. Top reqs do not have parents by définition.\n\nI worked around this, using a top .sdoc with grammar parent ref optional. Including a specific requirement titled \"derived\" on which all other .sdoc derived reqd will point as parent ref. But this might be improved.\n","_LINK":"DO178-18"},"868":{"MID":"68e87901205c4b0dbb6a0071479330b5","UID":"ZEP-1","STATUS":"Active","TITLE":"Multiple files / include mechanism","STATEMENT":"Requirements or groups of requirements shall be distributable over several files and still form a full specification (document) via some kind of include mechanism.\n","RATIONALE":"In a future constellation the requirements shall be written resp. update with the code in the same PR. Smallish requirements files per topic / component next to the code in the same repo allow a better workflow than one huge requirements file somewhere.\n","_LINK":"ZEP-1"},"869":{"MID":"36415af620f645388af4dc51c2a19b97","UID":"ZEP-2","STATUS":"Active","TITLE":"Clear separation of requirements (machine-readable)","STATEMENT":"Requirements objects shall be clearly separated from each other, also when organized in the same file.\n","RATIONALE":"For exporting or machine processing, a clear separation of requirements objects is a prerequisite.\n","_LINK":"ZEP-2"},"870":{"MID":"7a9e26240f5c4fe29143cf3348ac3d3b","UID":"ZEP-3","STATUS":"Active","TITLE":"Custom fields","STATEMENT":"Requiremements objects shall be configurable to create several types with a number of custom fields.\n","RATIONALE":"Requirements on software level may need to hold different information than on the architecture/interface and on the component level.\nBy having typed requirements objects, linkages between requirements objects can be verified and filtered (start_object_type – link_role_type --> end_object_type)\".\n","_LINK":"ZEP-3"},"871":{"MID":"a5928d6204a84d02a3c367d6dbc54092","UID":"ZEP-4","STATUS":"Active","TITLE":"Links","STATEMENT":"Linking shall in general be supported between any requirement object of any object type in a 1:n manner.\n","RATIONALE":"A SAIS requirement will link to a SRS requirement via «refines» link. A SITS test case will link to the same SAIS requirement.\n","_LINK":"ZEP-4"},"872":{"MID":"55bbe693d12d4e00956d41a837ef15ef","UID":"ZEP-5","STATUS":"Active","TITLE":"Multiple link roles","STATEMENT":"Links shall be configurable to create multiple link roles.\n","RATIONALE":"Link roles and requirements object types allow to verify, that the traceability is consistent.\n","_LINK":"ZEP-5"},"873":{"MID":"b58c387f3a2d4cf6a540e279dbe49e47","UID":"ZEP-6","STATUS":"Active","TITLE":"ReqIF export","STATEMENT":"Requirements specification shall be exportable to ReqIF.\n","RATIONALE":"Will/may be used to as exchange format to generate a requirements and traceability documentation.\n","_LINK":"ZEP-6"},"874":{"MID":"17a141add32f4d7696b5a74b6507b9aa","UID":"ZEP-7","STATUS":"Active","TITLE":"CSV","STATEMENT":"Requirements specification shall be exportable to CSV.\n","RATIONALE":"Will/may be used to as exchange format to generate a requirements and traceability documentation.\n","_LINK":"ZEP-7"},"875":{"MID":"d0d258d8640443578c7ec508c014b50d","UID":"ZEP-8","STATUS":"Active","TITLE":"Unique ID management","STATEMENT":"Requirements objects shall allow unique ID management when adding new requirements on different branches.\n\nOptions could be:\n\n- UUID: no checking required, but not handy\n- Manually assigned: collision checking required\n- Centralized: when not affected by branching\".\n","RATIONALE":"Centralized object ID management might collide with a branching, PR, merging process approach commonly used in the rest of the project.\n","_LINK":"ZEP-8"},"876":{"MID":"611546bf2409417e8844f93854d54268","UID":"ZEP-9","STATUS":"Active","TITLE":"Text formatting capabilities","STATEMENT":"The description field shall allow for formatting such as:\n\n- lists\n- tables\n- headings\n- UML diagrams\n- etc.\n","RATIONALE":"In some cases a plain text requirement is not sufficiently clear and requires formatting or even UML diagrams.\n","_LINK":"ZEP-9"},"877":{"MID":"f1f6da87da5c49d1b8c3441b14863975","UID":"ZEP-10","STATUS":"Active","TITLE":"Minimal requirement field set","STATEMENT":"A requirements object shall at least comprise the following fields (or similar):\n\n- title\n- ID\n- Description\n- Status\n- Outbound links\n- Inbound links (optional?)\n","RATIONALE":"TBD\n","_LINK":"ZEP-10"},"878":{"MID":"55cbd9b658164414adb0c13b0446e3f7","UID":"ZEP-11","STATUS":"Active","TITLE":"Requirements to source code traceability","STATEMENT":"Linking from requirements objects to code or from code to requirements objects via ID shall be supported.\n","RATIONALE":"For safety development and certification linking to code is required.\n","_LINK":"ZEP-11"},"879":{"MID":"a2930225168147808e6554a4da49aeb4","UID":"ZEP-12","STATUS":"Active","TITLE":"Non-intrusive links in source code","STATEMENT":"Linking from code to requirements objects via ID shall be least code intrusive.\n","RATIONALE":"Code with lots of meta information in it via comment tags, makes the code less readable. Links should best be hidden in existing comment structures e.g. function headers and not be extra tags.\n","_LINK":"ZEP-12"},"880":{"MID":"2614d6673a594da995df672e8943839e","UID":"ZEP-13","STATUS":"Active","TITLE":"Structuring requirements in documents","STATEMENT":"Requirements objects shall be structurable in a document like manner (with requirements ordering, and organized in chapters).\n","RATIONALE":"A collection of unorganized requirements as a specifications are hard to read and understand. They should be organizable in topic chapters or similar.\n","_LINK":"ZEP-13"},"881":{"MID":"a92a28ce3bcb4b3590f36e778a604ccb","UID":"ZEP-14","STATUS":"Active","TITLE":"Status field","STATEMENT":"Each requirements object type shall have a configurable status workflow.\n","RATIONALE":"Requirements may be in different statuses such as Draft, InReview, Approved. Dependent on the used process is rather reflected in the development work (branch=draft, PR under Review=InReview, PR merged to main=Approved.\n","_LINK":"ZEP-14"},"882":{"MID":"b74919612283422a9e139418a20926c6","UID":"ZEP-15","STATUS":"Active","TITLE":"Tool Qualifiability","STATEMENT":"The Requirement Tool shall be qualifiable for use in safety-related and/or security-related development. At the very least, the Requirement Tool shall come with its own set of requirements, which shall be amenable to validation in compliance with the relevant standards.\n","RATIONALE":"Certification of Zephyr-based products.\n","_LINK":"ZEP-15"}}